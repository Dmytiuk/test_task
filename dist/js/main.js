jQuery(document).ready(function($){var contentSections=$('.cd-section'),navigationItems=$('#cd-vertical-nav a');updateNavigation();$(window).on('scroll',function(){updateNavigation();});//smooth scroll to the section
navigationItems.on('click',function(event){event.preventDefault();smoothScroll($(this.hash));});//smooth scroll to second section
$('.cd-scroll-down').on('click',function(event){event.preventDefault();smoothScroll($(this.hash));});//open-close navigation on touch devices
$('.touch .cd-nav-trigger').on('click',function(){$('.touch #cd-vertical-nav').toggleClass('open');});//close navigation on touch devices when selectin an elemnt from the list
$('.touch #cd-vertical-nav a').on('click',function(){$('.touch #cd-vertical-nav').removeClass('open');});function updateNavigation(){contentSections.each(function(){$this=$(this);var activeSection=$('#cd-vertical-nav a[href="#'+$this.attr('id')+'"]').data('number')-1;if($this.offset().top-$(window).height()/2<$(window).scrollTop()&&$this.offset().top+$this.height()-$(window).height()/2>$(window).scrollTop()){navigationItems.eq(activeSection).addClass('is-selected');}else{navigationItems.eq(activeSection).removeClass('is-selected');}});}function smoothScroll(target){$('body,html').animate({'scrollTop':target.offset().top},600);}});
$(document).ready(function(){$('.slider').slick({dots:true,arrows:false});$(function(){var objt=$("div.person").length;// Считаем количество элементов с class="block"
if(objt>3){$(".owl-carousel").owlCarousel({items:3,loop:true,nav:true,dots:false});}});new WOW().init();$(window).scroll(function(){if($(this).scrollTop()>1){$('header').addClass("sticky");}else{$('header').removeClass("sticky");}});});
$(document).ready(function(){/*

   * Replace all SVG images with inline SVG

   */jQuery('img.svg').each(function(){var $img=jQuery(this);var imgID=$img.attr('id');var imgClass=$img.attr('class');var imgURL=$img.attr('src');jQuery.get(imgURL,function(data){// Get the SVG tag, ignore the rest
var $svg=jQuery(data).find('svg');// Add replaced image's ID to the new SVG
if(typeof imgID!=='undefined'){$svg=$svg.attr('id',imgID);}// Add replaced image's classes to the new SVG
if(typeof imgClass!=='undefined'){$svg=$svg.attr('class',imgClass+' replaced-svg');}// Replace image with new SVG
$img.replaceWith($svg);},'xml');});});
/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */ /**
 * Owl carousel
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 * @todo Lazy Load Icon
 * @todo prevent animationend bubling
 * @todo itemsScaleUp
 * @todo Test Zepto
 * @todo stagePadding calculate wrong active classes
 */;(function($,window,document,undefined){/**
	 * Creates a carousel.
	 * @class The Owl Carousel.
	 * @public
	 * @param {HTMLElement|jQuery} element - The element to create the carousel for.
	 * @param {Object} [options] - The options
	 */function Owl(element,options){/**
		 * Current settings for the carousel.
		 * @public
		 */this.settings=null;/**
		 * Current options set by the caller including defaults.
		 * @public
		 */this.options=$.extend({},Owl.Defaults,options);/**
		 * Plugin element.
		 * @public
		 */this.$element=$(element);/**
		 * Proxied event handlers.
		 * @protected
		 */this._handlers={};/**
		 * References to the running plugins of this carousel.
		 * @protected
		 */this._plugins={};/**
		 * Currently suppressed events to prevent them from being retriggered.
		 * @protected
		 */this._supress={};/**
		 * Absolute current position.
		 * @protected
		 */this._current=null;/**
		 * Animation speed in milliseconds.
		 * @protected
		 */this._speed=null;/**
		 * Coordinates of all items in pixel.
		 * @todo The name of this member is missleading.
		 * @protected
		 */this._coordinates=[];/**
		 * Current breakpoint.
		 * @todo Real media queries would be nice.
		 * @protected
		 */this._breakpoint=null;/**
		 * Current width of the plugin element.
		 */this._width=null;/**
		 * All real items.
		 * @protected
		 */this._items=[];/**
		 * All cloned items.
		 * @protected
		 */this._clones=[];/**
		 * Merge values of all items.
		 * @todo Maybe this could be part of a plugin.
		 * @protected
		 */this._mergers=[];/**
		 * Widths of all items.
		 */this._widths=[];/**
		 * Invalidated parts within the update process.
		 * @protected
		 */this._invalidated={};/**
		 * Ordered list of workers for the update process.
		 * @protected
		 */this._pipe=[];/**
		 * Current state information for the drag operation.
		 * @todo #261
		 * @protected
		 */this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null};/**
		 * Current state information and their tags.
		 * @type {Object}
		 * @protected
		 */this._states={current:{},tags:{'initializing':['busy'],'animating':['busy'],'dragging':['interacting']}};$.each(['onResize','onThrottledResize'],$.proxy(function(i,handler){this._handlers[handler]=$.proxy(this[handler],this);},this));$.each(Owl.Plugins,$.proxy(function(key,plugin){this._plugins[key.charAt(0).toLowerCase()+key.slice(1)]=new plugin(this);},this));$.each(Owl.Workers,$.proxy(function(priority,worker){this._pipe.push({'filter':worker.filter,'run':$.proxy(worker.run,this)});},this));this.setup();this.initialize();}/**
	 * Default options for the carousel.
	 * @public
	 */Owl.Defaults={items:3,loop:false,center:false,rewind:false,checkVisibility:true,mouseDrag:true,touchDrag:true,pullDrag:true,freeDrag:false,margin:0,stagePadding:0,merge:false,mergeFit:true,autoWidth:false,startPosition:0,rtl:false,smartSpeed:250,fluidSpeed:false,dragEndSpeed:false,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:window,fallbackEasing:'swing',slideTransition:'',info:false,nestedItemSelector:false,itemElement:'div',stageElement:'div',refreshClass:'owl-refresh',loadedClass:'owl-loaded',loadingClass:'owl-loading',rtlClass:'owl-rtl',responsiveClass:'owl-responsive',dragClass:'owl-drag',itemClass:'owl-item',stageClass:'owl-stage',stageOuterClass:'owl-stage-outer',grabClass:'owl-grab'};/**
	 * Enumeration for width.
	 * @public
	 * @readonly
	 * @enum {String}
	 */Owl.Width={Default:'default',Inner:'inner',Outer:'outer'};/**
	 * Enumeration for types.
	 * @public
	 * @readonly
	 * @enum {String}
	 */Owl.Type={Event:'event',State:'state'};/**
	 * Contains all registered plugins.
	 * @public
	 */Owl.Plugins={};/**
	 * List of workers involved in the update process.
	 */Owl.Workers=[{filter:['width','settings'],run:function(){this._width=this.$element.width();}},{filter:['width','items','settings'],run:function(cache){cache.current=this._items&&this._items[this.relative(this._current)];}},{filter:['items','settings'],run:function(){this.$stage.children('.cloned').remove();}},{filter:['width','items','settings'],run:function(cache){var margin=this.settings.margin||'',grid=!this.settings.autoWidth,rtl=this.settings.rtl,css={'width':'auto','margin-left':rtl?margin:'','margin-right':rtl?'':margin};!grid&&this.$stage.children().css(css);cache.css=css;}},{filter:['width','items','settings'],run:function(cache){var width=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,merge=null,iterator=this._items.length,grid=!this.settings.autoWidth,widths=[];cache.items={merge:false,width:width};while(iterator--){merge=this._mergers[iterator];merge=this.settings.mergeFit&&Math.min(merge,this.settings.items)||merge;cache.items.merge=merge>1||cache.items.merge;widths[iterator]=!grid?this._items[iterator].width():width*merge;}this._widths=widths;}},{filter:['items','settings'],run:function(){var clones=[],items=this._items,settings=this.settings,// TODO: Should be computed from number of min width items in stage
view=Math.max(settings.items*2,4),size=Math.ceil(items.length/2)*2,repeat=settings.loop&&items.length?settings.rewind?view:Math.max(view,size):0,append='',prepend='';repeat/=2;while(repeat>0){// Switch to only using appended clones
clones.push(this.normalize(clones.length/2,true));append=append+items[clones[clones.length-1]][0].outerHTML;clones.push(this.normalize(items.length-1-(clones.length-1)/2,true));prepend=items[clones[clones.length-1]][0].outerHTML+prepend;repeat-=1;}this._clones=clones;$(append).addClass('cloned').appendTo(this.$stage);$(prepend).addClass('cloned').prependTo(this.$stage);}},{filter:['width','items','settings'],run:function(){var rtl=this.settings.rtl?1:-1,size=this._clones.length+this._items.length,iterator=-1,previous=0,current=0,coordinates=[];while(++iterator<size){previous=coordinates[iterator-1]||0;current=this._widths[this.relative(iterator)]+this.settings.margin;coordinates.push(previous+current*rtl);}this._coordinates=coordinates;}},{filter:['width','items','settings'],run:function(){var padding=this.settings.stagePadding,coordinates=this._coordinates,css={'width':Math.ceil(Math.abs(coordinates[coordinates.length-1]))+padding*2,'padding-left':padding||'','padding-right':padding||''};this.$stage.css(css);}},{filter:['width','items','settings'],run:function(cache){var iterator=this._coordinates.length,grid=!this.settings.autoWidth,items=this.$stage.children();if(grid&&cache.items.merge){while(iterator--){cache.css.width=this._widths[this.relative(iterator)];items.eq(iterator).css(cache.css);}}else if(grid){cache.css.width=cache.items.width;items.css(cache.css);}}},{filter:['items'],run:function(){this._coordinates.length<1&&this.$stage.removeAttr('style');}},{filter:['width','items','settings'],run:function(cache){cache.current=cache.current?this.$stage.children().index(cache.current):0;cache.current=Math.max(this.minimum(),Math.min(this.maximum(),cache.current));this.reset(cache.current);}},{filter:['position'],run:function(){this.animate(this.coordinates(this._current));}},{filter:['width','position','items','settings'],run:function(){var rtl=this.settings.rtl?1:-1,padding=this.settings.stagePadding*2,begin=this.coordinates(this.current())+padding,end=begin+this.width()*rtl,inner,outer,matches=[],i,n;for(i=0,n=this._coordinates.length;i<n;i++){inner=this._coordinates[i-1]||0;outer=Math.abs(this._coordinates[i])+padding*rtl;if(this.op(inner,'<=',begin)&&this.op(inner,'>',end)||this.op(outer,'<',begin)&&this.op(outer,'>',end)){matches.push(i);}}this.$stage.children('.active').removeClass('active');this.$stage.children(':eq('+matches.join('), :eq(')+')').addClass('active');this.$stage.children('.center').removeClass('center');if(this.settings.center){this.$stage.children().eq(this.current()).addClass('center');}}}];/**
	 * Create the stage DOM element
	 */Owl.prototype.initializeStage=function(){this.$stage=this.$element.find('.'+this.settings.stageClass);// if the stage is already in the DOM, grab it and skip stage initialization
if(this.$stage.length){return;}this.$element.addClass(this.options.loadingClass);// create stage
this.$stage=$('<'+this.settings.stageElement+'>',{"class":this.settings.stageClass}).wrap($('<div/>',{"class":this.settings.stageOuterClass}));// append stage
this.$element.append(this.$stage.parent());};/**
	 * Create item DOM elements
	 */Owl.prototype.initializeItems=function(){var $items=this.$element.find('.owl-item');// if the items are already in the DOM, grab them and skip item initialization
if($items.length){this._items=$items.get().map(function(item){return $(item);});this._mergers=this._items.map(function(){return 1;});this.refresh();return;}// append content
this.replace(this.$element.children().not(this.$stage.parent()));// check visibility
if(this.isVisible()){// update view
this.refresh();}else{// invalidate width
this.invalidate('width');}this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);};/**
	 * Initializes the carousel.
	 * @protected
	 */Owl.prototype.initialize=function(){this.enter('initializing');this.trigger('initialize');this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl);if(this.settings.autoWidth&&!this.is('pre-loading')){var imgs,nestedSelector,width;imgs=this.$element.find('img');nestedSelector=this.settings.nestedItemSelector?'.'+this.settings.nestedItemSelector:undefined;width=this.$element.children(nestedSelector).width();if(imgs.length&&width<=0){this.preloadAutoWidthImages(imgs);}}this.initializeStage();this.initializeItems();// register event handlers
this.registerEventHandlers();this.leave('initializing');this.trigger('initialized');};/**
	 * @returns {Boolean} visibility of $element
	 *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to
	 *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does
	 */Owl.prototype.isVisible=function(){return this.settings.checkVisibility?this.$element.is(':visible'):true;};/**
	 * Setups the current settings.
	 * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
	 * @todo Support for media queries by using `matchMedia` would be nice.
	 * @public
	 */Owl.prototype.setup=function(){var viewport=this.viewport(),overwrites=this.options.responsive,match=-1,settings=null;if(!overwrites){settings=$.extend({},this.options);}else{$.each(overwrites,function(breakpoint){if(breakpoint<=viewport&&breakpoint>match){match=Number(breakpoint);}});settings=$.extend({},this.options,overwrites[match]);if(typeof settings.stagePadding==='function'){settings.stagePadding=settings.stagePadding();}delete settings.responsive;// responsive class
if(settings.responsiveClass){this.$element.attr('class',this.$element.attr('class').replace(new RegExp('('+this.options.responsiveClass+'-)\\S+\\s','g'),'$1'+match));}}this.trigger('change',{property:{name:'settings',value:settings}});this._breakpoint=match;this.settings=settings;this.invalidate('settings');this.trigger('changed',{property:{name:'settings',value:this.settings}});};/**
	 * Updates option logic if necessery.
	 * @protected
	 */Owl.prototype.optionsLogic=function(){if(this.settings.autoWidth){this.settings.stagePadding=false;this.settings.merge=false;}};/**
	 * Prepares an item before add.
	 * @todo Rename event parameter `content` to `item`.
	 * @protected
	 * @returns {jQuery|HTMLElement} - The item container.
	 */Owl.prototype.prepare=function(item){var event=this.trigger('prepare',{content:item});if(!event.data){event.data=$('<'+this.settings.itemElement+'/>').addClass(this.options.itemClass).append(item);}this.trigger('prepared',{content:event.data});return event.data;};/**
	 * Updates the view.
	 * @public
	 */Owl.prototype.update=function(){var i=0,n=this._pipe.length,filter=$.proxy(function(p){return this[p];},this._invalidated),cache={};while(i<n){if(this._invalidated.all||$.grep(this._pipe[i].filter,filter).length>0){this._pipe[i].run(cache);}i++;}this._invalidated={};!this.is('valid')&&this.enter('valid');};/**
	 * Gets the width of the view.
	 * @public
	 * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
	 * @returns {Number} - The width of the view in pixel.
	 */Owl.prototype.width=function(dimension){dimension=dimension||Owl.Width.Default;switch(dimension){case Owl.Width.Inner:case Owl.Width.Outer:return this._width;default:return this._width-this.settings.stagePadding*2+this.settings.margin;}};/**
	 * Refreshes the carousel primarily for adaptive purposes.
	 * @public
	 */Owl.prototype.refresh=function(){this.enter('refreshing');this.trigger('refresh');this.setup();this.optionsLogic();this.$element.addClass(this.options.refreshClass);this.update();this.$element.removeClass(this.options.refreshClass);this.leave('refreshing');this.trigger('refreshed');};/**
	 * Checks window `resize` event.
	 * @protected
	 */Owl.prototype.onThrottledResize=function(){window.clearTimeout(this.resizeTimer);this.resizeTimer=window.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate);};/**
	 * Checks window `resize` event.
	 * @protected
	 */Owl.prototype.onResize=function(){if(!this._items.length){return false;}if(this._width===this.$element.width()){return false;}if(!this.isVisible()){return false;}this.enter('resizing');if(this.trigger('resize').isDefaultPrevented()){this.leave('resizing');return false;}this.invalidate('width');this.refresh();this.leave('resizing');this.trigger('resized');};/**
	 * Registers event handlers.
	 * @todo Check `msPointerEnabled`
	 * @todo #261
	 * @protected
	 */Owl.prototype.registerEventHandlers=function(){if($.support.transition){this.$stage.on($.support.transition.end+'.owl.core',$.proxy(this.onTransitionEnd,this));}if(this.settings.responsive!==false){this.on(window,'resize',this._handlers.onThrottledResize);}if(this.settings.mouseDrag){this.$element.addClass(this.options.dragClass);this.$stage.on('mousedown.owl.core',$.proxy(this.onDragStart,this));this.$stage.on('dragstart.owl.core selectstart.owl.core',function(){return false;});}if(this.settings.touchDrag){this.$stage.on('touchstart.owl.core',$.proxy(this.onDragStart,this));this.$stage.on('touchcancel.owl.core',$.proxy(this.onDragEnd,this));}};/**
	 * Handles `touchstart` and `mousedown` events.
	 * @todo Horizontal swipe threshold as option
	 * @todo #261
	 * @protected
	 * @param {Event} event - The event arguments.
	 */Owl.prototype.onDragStart=function(event){var stage=null;if(event.which===3){return;}if($.support.transform){stage=this.$stage.css('transform').replace(/.*\(|\)| /g,'').split(',');stage={x:stage[stage.length===16?12:4],y:stage[stage.length===16?13:5]};}else{stage=this.$stage.position();stage={x:this.settings.rtl?stage.left+this.$stage.width()-this.width()+this.settings.margin:stage.left,y:stage.top};}if(this.is('animating')){$.support.transform?this.animate(stage.x):this.$stage.stop();this.invalidate('position');}this.$element.toggleClass(this.options.grabClass,event.type==='mousedown');this.speed(0);this._drag.time=new Date().getTime();this._drag.target=$(event.target);this._drag.stage.start=stage;this._drag.stage.current=stage;this._drag.pointer=this.pointer(event);$(document).on('mouseup.owl.core touchend.owl.core',$.proxy(this.onDragEnd,this));$(document).one('mousemove.owl.core touchmove.owl.core',$.proxy(function(event){var delta=this.difference(this._drag.pointer,this.pointer(event));$(document).on('mousemove.owl.core touchmove.owl.core',$.proxy(this.onDragMove,this));if(Math.abs(delta.x)<Math.abs(delta.y)&&this.is('valid')){return;}event.preventDefault();this.enter('dragging');this.trigger('drag');},this));};/**
	 * Handles the `touchmove` and `mousemove` events.
	 * @todo #261
	 * @protected
	 * @param {Event} event - The event arguments.
	 */Owl.prototype.onDragMove=function(event){var minimum=null,maximum=null,pull=null,delta=this.difference(this._drag.pointer,this.pointer(event)),stage=this.difference(this._drag.stage.start,delta);if(!this.is('dragging')){return;}event.preventDefault();if(this.settings.loop){minimum=this.coordinates(this.minimum());maximum=this.coordinates(this.maximum()+1)-minimum;stage.x=((stage.x-minimum)%maximum+maximum)%maximum+minimum;}else{minimum=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum());maximum=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum());pull=this.settings.pullDrag?-1*delta.x/5:0;stage.x=Math.max(Math.min(stage.x,minimum+pull),maximum+pull);}this._drag.stage.current=stage;this.animate(stage.x);};/**
	 * Handles the `touchend` and `mouseup` events.
	 * @todo #261
	 * @todo Threshold for click event
	 * @protected
	 * @param {Event} event - The event arguments.
	 */Owl.prototype.onDragEnd=function(event){var delta=this.difference(this._drag.pointer,this.pointer(event)),stage=this._drag.stage.current,direction=delta.x>0^this.settings.rtl?'left':'right';$(document).off('.owl.core');this.$element.removeClass(this.options.grabClass);if(delta.x!==0&&this.is('dragging')||!this.is('valid')){this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed);this.current(this.closest(stage.x,delta.x!==0?direction:this._drag.direction));this.invalidate('position');this.update();this._drag.direction=direction;if(Math.abs(delta.x)>3||new Date().getTime()-this._drag.time>300){this._drag.target.one('click.owl.core',function(){return false;});}}if(!this.is('dragging')){return;}this.leave('dragging');this.trigger('dragged');};/**
	 * Gets absolute position of the closest item for a coordinate.
	 * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
	 * @protected
	 * @param {Number} coordinate - The coordinate in pixel.
	 * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
	 * @return {Number} - The absolute position of the closest item.
	 */Owl.prototype.closest=function(coordinate,direction){var position=-1,pull=30,width=this.width(),coordinates=this.coordinates();if(!this.settings.freeDrag){// check closest item
$.each(coordinates,$.proxy(function(index,value){// on a left pull, check on current index
if(direction==='left'&&coordinate>value-pull&&coordinate<value+pull){position=index;// on a right pull, check on previous index
// to do so, subtract width from value and set position = index + 1
}else if(direction==='right'&&coordinate>value-width-pull&&coordinate<value-width+pull){position=index+1;}else if(this.op(coordinate,'<',value)&&this.op(coordinate,'>',coordinates[index+1]!==undefined?coordinates[index+1]:value-width)){position=direction==='left'?index+1:index;}return position===-1;},this));}if(!this.settings.loop){// non loop boundries
if(this.op(coordinate,'>',coordinates[this.minimum()])){position=coordinate=this.minimum();}else if(this.op(coordinate,'<',coordinates[this.maximum()])){position=coordinate=this.maximum();}}return position;};/**
	 * Animates the stage.
	 * @todo #270
	 * @public
	 * @param {Number} coordinate - The coordinate in pixels.
	 */Owl.prototype.animate=function(coordinate){var animate=this.speed()>0;this.is('animating')&&this.onTransitionEnd();if(animate){this.enter('animating');this.trigger('translate');}if($.support.transform3d&&$.support.transition){this.$stage.css({transform:'translate3d('+coordinate+'px,0px,0px)',transition:this.speed()/1000+'s'+(this.settings.slideTransition?' '+this.settings.slideTransition:'')});}else if(animate){this.$stage.animate({left:coordinate+'px'},this.speed(),this.settings.fallbackEasing,$.proxy(this.onTransitionEnd,this));}else{this.$stage.css({left:coordinate+'px'});}};/**
	 * Checks whether the carousel is in a specific state or not.
	 * @param {String} state - The state to check.
	 * @returns {Boolean} - The flag which indicates if the carousel is busy.
	 */Owl.prototype.is=function(state){return this._states.current[state]&&this._states.current[state]>0;};/**
	 * Sets the absolute position of the current item.
	 * @public
	 * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
	 * @returns {Number} - The absolute position of the current item.
	 */Owl.prototype.current=function(position){if(position===undefined){return this._current;}if(this._items.length===0){return undefined;}position=this.normalize(position);if(this._current!==position){var event=this.trigger('change',{property:{name:'position',value:position}});if(event.data!==undefined){position=this.normalize(event.data);}this._current=position;this.invalidate('position');this.trigger('changed',{property:{name:'position',value:this._current}});}return this._current;};/**
	 * Invalidates the given part of the update routine.
	 * @param {String} [part] - The part to invalidate.
	 * @returns {Array.<String>} - The invalidated parts.
	 */Owl.prototype.invalidate=function(part){if($.type(part)==='string'){this._invalidated[part]=true;this.is('valid')&&this.leave('valid');}return $.map(this._invalidated,function(v,i){return i;});};/**
	 * Resets the absolute position of the current item.
	 * @public
	 * @param {Number} position - The absolute position of the new item.
	 */Owl.prototype.reset=function(position){position=this.normalize(position);if(position===undefined){return;}this._speed=0;this._current=position;this.suppress(['translate','translated']);this.animate(this.coordinates(position));this.release(['translate','translated']);};/**
	 * Normalizes an absolute or a relative position of an item.
	 * @public
	 * @param {Number} position - The absolute or relative position to normalize.
	 * @param {Boolean} [relative=false] - Whether the given position is relative or not.
	 * @returns {Number} - The normalized position.
	 */Owl.prototype.normalize=function(position,relative){var n=this._items.length,m=relative?0:this._clones.length;if(!this.isNumeric(position)||n<1){position=undefined;}else if(position<0||position>=n+m){position=((position-m/2)%n+n)%n+m/2;}return position;};/**
	 * Converts an absolute position of an item into a relative one.
	 * @public
	 * @param {Number} position - The absolute position to convert.
	 * @returns {Number} - The converted position.
	 */Owl.prototype.relative=function(position){position-=this._clones.length/2;return this.normalize(position,true);};/**
	 * Gets the maximum position for the current item.
	 * @public
	 * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
	 * @returns {Number}
	 */Owl.prototype.maximum=function(relative){var settings=this.settings,maximum=this._coordinates.length,iterator,reciprocalItemsWidth,elementWidth;if(settings.loop){maximum=this._clones.length/2+this._items.length-1;}else if(settings.autoWidth||settings.merge){iterator=this._items.length;if(iterator){reciprocalItemsWidth=this._items[--iterator].width();elementWidth=this.$element.width();while(iterator--){reciprocalItemsWidth+=this._items[iterator].width()+this.settings.margin;if(reciprocalItemsWidth>elementWidth){break;}}}maximum=iterator+1;}else if(settings.center){maximum=this._items.length-1;}else{maximum=this._items.length-settings.items;}if(relative){maximum-=this._clones.length/2;}return Math.max(maximum,0);};/**
	 * Gets the minimum position for the current item.
	 * @public
	 * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
	 * @returns {Number}
	 */Owl.prototype.minimum=function(relative){return relative?0:this._clones.length/2;};/**
	 * Gets an item at the specified relative position.
	 * @public
	 * @param {Number} [position] - The relative position of the item.
	 * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
	 */Owl.prototype.items=function(position){if(position===undefined){return this._items.slice();}position=this.normalize(position,true);return this._items[position];};/**
	 * Gets an item at the specified relative position.
	 * @public
	 * @param {Number} [position] - The relative position of the item.
	 * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
	 */Owl.prototype.mergers=function(position){if(position===undefined){return this._mergers.slice();}position=this.normalize(position,true);return this._mergers[position];};/**
	 * Gets the absolute positions of clones for an item.
	 * @public
	 * @param {Number} [position] - The relative position of the item.
	 * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
	 */Owl.prototype.clones=function(position){var odd=this._clones.length/2,even=odd+this._items.length,map=function(index){return index%2===0?even+index/2:odd-(index+1)/2;};if(position===undefined){return $.map(this._clones,function(v,i){return map(i);});}return $.map(this._clones,function(v,i){return v===position?map(i):null;});};/**
	 * Sets the current animation speed.
	 * @public
	 * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
	 * @returns {Number} - The current animation speed in milliseconds.
	 */Owl.prototype.speed=function(speed){if(speed!==undefined){this._speed=speed;}return this._speed;};/**
	 * Gets the coordinate of an item.
	 * @todo The name of this method is missleanding.
	 * @public
	 * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
	 * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
	 */Owl.prototype.coordinates=function(position){var multiplier=1,newPosition=position-1,coordinate;if(position===undefined){return $.map(this._coordinates,$.proxy(function(coordinate,index){return this.coordinates(index);},this));}if(this.settings.center){if(this.settings.rtl){multiplier=-1;newPosition=position+1;}coordinate=this._coordinates[position];coordinate+=(this.width()-coordinate+(this._coordinates[newPosition]||0))/2*multiplier;}else{coordinate=this._coordinates[newPosition]||0;}coordinate=Math.ceil(coordinate);return coordinate;};/**
	 * Calculates the speed for a translation.
	 * @protected
	 * @param {Number} from - The absolute position of the start item.
	 * @param {Number} to - The absolute position of the target item.
	 * @param {Number} [factor=undefined] - The time factor in milliseconds.
	 * @returns {Number} - The time in milliseconds for the translation.
	 */Owl.prototype.duration=function(from,to,factor){if(factor===0){return 0;}return Math.min(Math.max(Math.abs(to-from),1),6)*Math.abs(factor||this.settings.smartSpeed);};/**
	 * Slides to the specified item.
	 * @public
	 * @param {Number} position - The position of the item.
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 */Owl.prototype.to=function(position,speed){var current=this.current(),revert=null,distance=position-this.relative(current),direction=(distance>0)-(distance<0),items=this._items.length,minimum=this.minimum(),maximum=this.maximum();if(this.settings.loop){if(!this.settings.rewind&&Math.abs(distance)>items/2){distance+=direction*-1*items;}position=current+distance;revert=((position-minimum)%items+items)%items+minimum;if(revert!==position&&revert-distance<=maximum&&revert-distance>0){current=revert-distance;position=revert;this.reset(current);}}else if(this.settings.rewind){maximum+=1;position=(position%maximum+maximum)%maximum;}else{position=Math.max(minimum,Math.min(maximum,position));}this.speed(this.duration(current,position,speed));this.current(position);if(this.isVisible()){this.update();}};/**
	 * Slides to the next item.
	 * @public
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 */Owl.prototype.next=function(speed){speed=speed||false;this.to(this.relative(this.current())+1,speed);};/**
	 * Slides to the previous item.
	 * @public
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 */Owl.prototype.prev=function(speed){speed=speed||false;this.to(this.relative(this.current())-1,speed);};/**
	 * Handles the end of an animation.
	 * @protected
	 * @param {Event} event - The event arguments.
	 */Owl.prototype.onTransitionEnd=function(event){// if css2 animation then event object is undefined
if(event!==undefined){event.stopPropagation();// Catch only owl-stage transitionEnd event
if((event.target||event.srcElement||event.originalTarget)!==this.$stage.get(0)){return false;}}this.leave('animating');this.trigger('translated');};/**
	 * Gets viewport width.
	 * @protected
	 * @return {Number} - The width in pixel.
	 */Owl.prototype.viewport=function(){var width;if(this.options.responsiveBaseElement!==window){width=$(this.options.responsiveBaseElement).width();}else if(window.innerWidth){width=window.innerWidth;}else if(document.documentElement&&document.documentElement.clientWidth){width=document.documentElement.clientWidth;}else{console.warn('Can not detect viewport width.');}return width;};/**
	 * Replaces the current content.
	 * @public
	 * @param {HTMLElement|jQuery|String} content - The new content.
	 */Owl.prototype.replace=function(content){this.$stage.empty();this._items=[];if(content){content=content instanceof jQuery?content:$(content);}if(this.settings.nestedItemSelector){content=content.find('.'+this.settings.nestedItemSelector);}content.filter(function(){return this.nodeType===1;}).each($.proxy(function(index,item){item=this.prepare(item);this.$stage.append(item);this._items.push(item);this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge')*1||1);},this));this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0);this.invalidate('items');};/**
	 * Adds an item.
	 * @todo Use `item` instead of `content` for the event arguments.
	 * @public
	 * @param {HTMLElement|jQuery|String} content - The item content to add.
	 * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
	 */Owl.prototype.add=function(content,position){var current=this.relative(this._current);position=position===undefined?this._items.length:this.normalize(position,true);content=content instanceof jQuery?content:$(content);this.trigger('add',{content:content,position:position});content=this.prepare(content);if(this._items.length===0||position===this._items.length){this._items.length===0&&this.$stage.append(content);this._items.length!==0&&this._items[position-1].after(content);this._items.push(content);this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge')*1||1);}else{this._items[position].before(content);this._items.splice(position,0,content);this._mergers.splice(position,0,content.find('[data-merge]').addBack('[data-merge]').attr('data-merge')*1||1);}this._items[current]&&this.reset(this._items[current].index());this.invalidate('items');this.trigger('added',{content:content,position:position});};/**
	 * Removes an item by its position.
	 * @todo Use `item` instead of `content` for the event arguments.
	 * @public
	 * @param {Number} position - The relative position of the item to remove.
	 */Owl.prototype.remove=function(position){position=this.normalize(position,true);if(position===undefined){return;}this.trigger('remove',{content:this._items[position],position:position});this._items[position].remove();this._items.splice(position,1);this._mergers.splice(position,1);this.invalidate('items');this.trigger('removed',{content:null,position:position});};/**
	 * Preloads images with auto width.
	 * @todo Replace by a more generic approach
	 * @protected
	 */Owl.prototype.preloadAutoWidthImages=function(images){images.each($.proxy(function(i,element){this.enter('pre-loading');element=$(element);$(new Image()).one('load',$.proxy(function(e){element.attr('src',e.target.src);element.css('opacity',1);this.leave('pre-loading');!this.is('pre-loading')&&!this.is('initializing')&&this.refresh();},this)).attr('src',element.attr('src')||element.attr('data-src')||element.attr('data-src-retina'));},this));};/**
	 * Destroys the carousel.
	 * @public
	 */Owl.prototype.destroy=function(){this.$element.off('.owl.core');this.$stage.off('.owl.core');$(document).off('.owl.core');if(this.settings.responsive!==false){window.clearTimeout(this.resizeTimer);this.off(window,'resize',this._handlers.onThrottledResize);}for(var i in this._plugins){this._plugins[i].destroy();}this.$stage.children('.cloned').remove();this.$stage.unwrap();this.$stage.children().contents().unwrap();this.$stage.children().unwrap();this.$stage.remove();this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class',this.$element.attr('class').replace(new RegExp(this.options.responsiveClass+'-\\S+\\s','g'),'')).removeData('owl.carousel');};/**
	 * Operators to calculate right-to-left and left-to-right.
	 * @protected
	 * @param {Number} [a] - The left side operand.
	 * @param {String} [o] - The operator.
	 * @param {Number} [b] - The right side operand.
	 */Owl.prototype.op=function(a,o,b){var rtl=this.settings.rtl;switch(o){case'<':return rtl?a>b:a<b;case'>':return rtl?a<b:a>b;case'>=':return rtl?a<=b:a>=b;case'<=':return rtl?a>=b:a<=b;default:break;}};/**
	 * Attaches to an internal event.
	 * @protected
	 * @param {HTMLElement} element - The event source.
	 * @param {String} event - The event name.
	 * @param {Function} listener - The event handler to attach.
	 * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
	 */Owl.prototype.on=function(element,event,listener,capture){if(element.addEventListener){element.addEventListener(event,listener,capture);}else if(element.attachEvent){element.attachEvent('on'+event,listener);}};/**
	 * Detaches from an internal event.
	 * @protected
	 * @param {HTMLElement} element - The event source.
	 * @param {String} event - The event name.
	 * @param {Function} listener - The attached event handler to detach.
	 * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
	 */Owl.prototype.off=function(element,event,listener,capture){if(element.removeEventListener){element.removeEventListener(event,listener,capture);}else if(element.detachEvent){element.detachEvent('on'+event,listener);}};/**
	 * Triggers a public event.
	 * @todo Remove `status`, `relatedTarget` should be used instead.
	 * @protected
	 * @param {String} name - The event name.
	 * @param {*} [data=null] - The event data.
	 * @param {String} [namespace=carousel] - The event namespace.
	 * @param {String} [state] - The state which is associated with the event.
	 * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
	 * @returns {Event} - The event arguments.
	 */Owl.prototype.trigger=function(name,data,namespace,state,enter){var status={item:{count:this._items.length,index:this.current()}},handler=$.camelCase($.grep(['on',name,namespace],function(v){return v;}).join('-').toLowerCase()),event=$.Event([name,'owl',namespace||'carousel'].join('.').toLowerCase(),$.extend({relatedTarget:this},status,data));if(!this._supress[name]){$.each(this._plugins,function(name,plugin){if(plugin.onTrigger){plugin.onTrigger(event);}});this.register({type:Owl.Type.Event,name:name});this.$element.trigger(event);if(this.settings&&typeof this.settings[handler]==='function'){this.settings[handler].call(this,event);}}return event;};/**
	 * Enters a state.
	 * @param name - The state name.
	 */Owl.prototype.enter=function(name){$.each([name].concat(this._states.tags[name]||[]),$.proxy(function(i,name){if(this._states.current[name]===undefined){this._states.current[name]=0;}this._states.current[name]++;},this));};/**
	 * Leaves a state.
	 * @param name - The state name.
	 */Owl.prototype.leave=function(name){$.each([name].concat(this._states.tags[name]||[]),$.proxy(function(i,name){this._states.current[name]--;},this));};/**
	 * Registers an event or state.
	 * @public
	 * @param {Object} object - The event or state to register.
	 */Owl.prototype.register=function(object){if(object.type===Owl.Type.Event){if(!$.event.special[object.name]){$.event.special[object.name]={};}if(!$.event.special[object.name].owl){var _default=$.event.special[object.name]._default;$.event.special[object.name]._default=function(e){if(_default&&_default.apply&&(!e.namespace||e.namespace.indexOf('owl')===-1)){return _default.apply(this,arguments);}return e.namespace&&e.namespace.indexOf('owl')>-1;};$.event.special[object.name].owl=true;}}else if(object.type===Owl.Type.State){if(!this._states.tags[object.name]){this._states.tags[object.name]=object.tags;}else{this._states.tags[object.name]=this._states.tags[object.name].concat(object.tags);}this._states.tags[object.name]=$.grep(this._states.tags[object.name],$.proxy(function(tag,i){return $.inArray(tag,this._states.tags[object.name])===i;},this));}};/**
	 * Suppresses events.
	 * @protected
	 * @param {Array.<String>} events - The events to suppress.
	 */Owl.prototype.suppress=function(events){$.each(events,$.proxy(function(index,event){this._supress[event]=true;},this));};/**
	 * Releases suppressed events.
	 * @protected
	 * @param {Array.<String>} events - The events to release.
	 */Owl.prototype.release=function(events){$.each(events,$.proxy(function(index,event){delete this._supress[event];},this));};/**
	 * Gets unified pointer coordinates from event.
	 * @todo #261
	 * @protected
	 * @param {Event} - The `mousedown` or `touchstart` event.
	 * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
	 */Owl.prototype.pointer=function(event){var result={x:null,y:null};event=event.originalEvent||event||window.event;event=event.touches&&event.touches.length?event.touches[0]:event.changedTouches&&event.changedTouches.length?event.changedTouches[0]:event;if(event.pageX){result.x=event.pageX;result.y=event.pageY;}else{result.x=event.clientX;result.y=event.clientY;}return result;};/**
	 * Determines if the input is a Number or something that can be coerced to a Number
	 * @protected
	 * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
	 * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
	 */Owl.prototype.isNumeric=function(number){return!isNaN(parseFloat(number));};/**
	 * Gets the difference of two vectors.
	 * @todo #261
	 * @protected
	 * @param {Object} - The first vector.
	 * @param {Object} - The second vector.
	 * @returns {Object} - The difference.
	 */Owl.prototype.difference=function(first,second){return{x:first.x-second.x,y:first.y-second.y};};/**
	 * The jQuery Plugin for the Owl Carousel
	 * @todo Navigation plugin `next` and `prev`
	 * @public
	 */$.fn.owlCarousel=function(option){var args=Array.prototype.slice.call(arguments,1);return this.each(function(){var $this=$(this),data=$this.data('owl.carousel');if(!data){data=new Owl(this,typeof option=='object'&&option);$this.data('owl.carousel',data);$.each(['next','prev','to','destroy','refresh','replace','add','remove'],function(i,event){data.register({type:Owl.Type.Event,name:event});data.$element.on(event+'.owl.carousel.core',$.proxy(function(e){if(e.namespace&&e.relatedTarget!==this){this.suppress([event]);data[event].apply(this,[].slice.call(arguments,1));this.release([event]);}},data));});}if(typeof option=='string'&&option.charAt(0)!=='_'){data[option].apply(data,args);}});};/**
	 * The constructor for the jQuery Plugin
	 * @public
	 */$.fn.owlCarousel.Constructor=Owl;})(window.Zepto||window.jQuery,window,document);/**
 * AutoRefresh Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){/**
	 * Creates the auto refresh plugin.
	 * @class The Auto Refresh Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */var AutoRefresh=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;/**
		 * Refresh interval.
		 * @protected
		 * @type {number}
		 */this._interval=null;/**
		 * Whether the element is currently visible or not.
		 * @protected
		 * @type {Boolean}
		 */this._visible=null;/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */this._handlers={'initialized.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.autoRefresh){this.watch();}},this)};// set default options
this._core.options=$.extend({},AutoRefresh.Defaults,this._core.options);// register event handlers
this._core.$element.on(this._handlers);};/**
	 * Default options.
	 * @public
	 */AutoRefresh.Defaults={autoRefresh:true,autoRefreshInterval:500};/**
	 * Watches the element.
	 */AutoRefresh.prototype.watch=function(){if(this._interval){return;}this._visible=this._core.isVisible();this._interval=window.setInterval($.proxy(this.refresh,this),this._core.settings.autoRefreshInterval);};/**
	 * Refreshes the element.
	 */AutoRefresh.prototype.refresh=function(){if(this._core.isVisible()===this._visible){return;}this._visible=!this._visible;this._core.$element.toggleClass('owl-hidden',!this._visible);this._visible&&this._core.invalidate('width')&&this._core.refresh();};/**
	 * Destroys the plugin.
	 */AutoRefresh.prototype.destroy=function(){var handler,property;window.clearInterval(this._interval);for(handler in this._handlers){this._core.$element.off(handler,this._handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.AutoRefresh=AutoRefresh;})(window.Zepto||window.jQuery,window,document);/**
 * Lazy Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){/**
	 * Creates the lazy plugin.
	 * @class The Lazy Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */var Lazy=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;/**
		 * Already loaded items.
		 * @protected
		 * @type {Array.<jQuery>}
		 */this._loaded=[];/**
		 * Event handlers.
		 * @protected
		 * @type {Object}
		 */this._handlers={'initialized.owl.carousel change.owl.carousel resized.owl.carousel':$.proxy(function(e){if(!e.namespace){return;}if(!this._core.settings||!this._core.settings.lazyLoad){return;}if(e.property&&e.property.name=='position'||e.type=='initialized'){var settings=this._core.settings,n=settings.center&&Math.ceil(settings.items/2)||settings.items,i=settings.center&&n*-1||0,position=(e.property&&e.property.value!==undefined?e.property.value:this._core.current())+i,clones=this._core.clones().length,load=$.proxy(function(i,v){this.load(v);},this);//TODO: Need documentation for this new option
if(settings.lazyLoadEager>0){n+=settings.lazyLoadEager;// If the carousel is looping also preload images that are to the "left"
if(settings.loop){position-=settings.lazyLoadEager;n++;}}while(i++<n){this.load(clones/2+this._core.relative(position));clones&&$.each(this._core.clones(this._core.relative(position)),load);position++;}}},this)};// set the default options
this._core.options=$.extend({},Lazy.Defaults,this._core.options);// register event handler
this._core.$element.on(this._handlers);};/**
	 * Default options.
	 * @public
	 */Lazy.Defaults={lazyLoad:false,lazyLoadEager:0};/**
	 * Loads all resources of an item at the specified position.
	 * @param {Number} position - The absolute position of the item.
	 * @protected
	 */Lazy.prototype.load=function(position){var $item=this._core.$stage.children().eq(position),$elements=$item&&$item.find('.owl-lazy');if(!$elements||$.inArray($item.get(0),this._loaded)>-1){return;}$elements.each($.proxy(function(index,element){var $element=$(element),image,url=window.devicePixelRatio>1&&$element.attr('data-src-retina')||$element.attr('data-src')||$element.attr('data-srcset');this._core.trigger('load',{element:$element,url:url},'lazy');if($element.is('img')){$element.one('load.owl.lazy',$.proxy(function(){$element.css('opacity',1);this._core.trigger('loaded',{element:$element,url:url},'lazy');},this)).attr('src',url);}else if($element.is('source')){$element.one('load.owl.lazy',$.proxy(function(){this._core.trigger('loaded',{element:$element,url:url},'lazy');},this)).attr('srcset',url);}else{image=new Image();image.onload=$.proxy(function(){$element.css({'background-image':'url("'+url+'")','opacity':'1'});this._core.trigger('loaded',{element:$element,url:url},'lazy');},this);image.src=url;}},this));this._loaded.push($item.get(0));};/**
	 * Destroys the plugin.
	 * @public
	 */Lazy.prototype.destroy=function(){var handler,property;for(handler in this.handlers){this._core.$element.off(handler,this.handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.Lazy=Lazy;})(window.Zepto||window.jQuery,window,document);/**
 * AutoHeight Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){/**
	 * Creates the auto height plugin.
	 * @class The Auto Height Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */var AutoHeight=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;this._previousHeight=null;/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */this._handlers={'initialized.owl.carousel refreshed.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.autoHeight){this.update();}},this),'changed.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.autoHeight&&e.property.name==='position'){this.update();}},this),'loaded.owl.lazy':$.proxy(function(e){if(e.namespace&&this._core.settings.autoHeight&&e.element.closest('.'+this._core.settings.itemClass).index()===this._core.current()){this.update();}},this)};// set default options
this._core.options=$.extend({},AutoHeight.Defaults,this._core.options);// register event handlers
this._core.$element.on(this._handlers);this._intervalId=null;var refThis=this;// These changes have been taken from a PR by gavrochelegnou proposed in #1575
// and have been made compatible with the latest jQuery version
$(window).on('load',function(){if(refThis._core.settings.autoHeight){refThis.update();}});// Autoresize the height of the carousel when window is resized
// When carousel has images, the height is dependent on the width
// and should also change on resize
$(window).resize(function(){if(refThis._core.settings.autoHeight){if(refThis._intervalId!=null){clearTimeout(refThis._intervalId);}refThis._intervalId=setTimeout(function(){refThis.update();},250);}});};/**
	 * Default options.
	 * @public
	 */AutoHeight.Defaults={autoHeight:false,autoHeightClass:'owl-height'};/**
	 * Updates the view.
	 */AutoHeight.prototype.update=function(){var start=this._core._current,end=start+this._core.settings.items,lazyLoadEnabled=this._core.settings.lazyLoad,visible=this._core.$stage.children().toArray().slice(start,end),heights=[],maxheight=0;$.each(visible,function(index,item){heights.push($(item).height());});maxheight=Math.max.apply(null,heights);if(maxheight<=1&&lazyLoadEnabled&&this._previousHeight){maxheight=this._previousHeight;}this._previousHeight=maxheight;this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);};AutoHeight.prototype.destroy=function(){var handler,property;for(handler in this._handlers){this._core.$element.off(handler,this._handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!=='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.AutoHeight=AutoHeight;})(window.Zepto||window.jQuery,window,document);/**
 * Video Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){/**
	 * Creates the video plugin.
	 * @class The Video Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */var Video=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;/**
		 * Cache all video URLs.
		 * @protected
		 * @type {Object}
		 */this._videos={};/**
		 * Current playing item.
		 * @protected
		 * @type {jQuery}
		 */this._playing=null;/**
		 * All event handlers.
		 * @todo The cloned content removale is too late
		 * @protected
		 * @type {Object}
		 */this._handlers={'initialized.owl.carousel':$.proxy(function(e){if(e.namespace){this._core.register({type:'state',name:'playing',tags:['interacting']});}},this),'resize.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.video&&this.isInFullScreen()){e.preventDefault();}},this),'refreshed.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.is('resizing')){this._core.$stage.find('.cloned .owl-video-frame').remove();}},this),'changed.owl.carousel':$.proxy(function(e){if(e.namespace&&e.property.name==='position'&&this._playing){this.stop();}},this),'prepared.owl.carousel':$.proxy(function(e){if(!e.namespace){return;}var $element=$(e.content).find('.owl-video');if($element.length){$element.css('display','none');this.fetch($element,$(e.content));}},this)};// set default options
this._core.options=$.extend({},Video.Defaults,this._core.options);// register event handlers
this._core.$element.on(this._handlers);this._core.$element.on('click.owl.video','.owl-video-play-icon',$.proxy(function(e){this.play(e);},this));};/**
	 * Default options.
	 * @public
	 */Video.Defaults={video:false,videoHeight:false,videoWidth:false};/**
	 * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
	 * @protected
	 * @param {jQuery} target - The target containing the video data.
	 * @param {jQuery} item - The item containing the video.
	 */Video.prototype.fetch=function(target,item){var type=function(){if(target.attr('data-vimeo-id')){return'vimeo';}else if(target.attr('data-vzaar-id')){return'vzaar';}else{return'youtube';}}(),id=target.attr('data-vimeo-id')||target.attr('data-youtube-id')||target.attr('data-vzaar-id'),width=target.attr('data-width')||this._core.settings.videoWidth,height=target.attr('data-height')||this._core.settings.videoHeight,url=target.attr('href');if(url){/*
					Parses the id's out of the following urls (and probably more):
					https://www.youtube.com/watch?v=:id
					https://youtu.be/:id
					https://vimeo.com/:id
					https://vimeo.com/channels/:channel/:id
					https://vimeo.com/groups/:group/videos/:id
					https://app.vzaar.com/videos/:id

					Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
			*/id=url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);if(id[3].indexOf('youtu')>-1){type='youtube';}else if(id[3].indexOf('vimeo')>-1){type='vimeo';}else if(id[3].indexOf('vzaar')>-1){type='vzaar';}else{throw new Error('Video URL not supported.');}id=id[6];}else{throw new Error('Missing video URL.');}this._videos[url]={type:type,id:id,width:width,height:height};item.attr('data-video',url);this.thumbnail(target,this._videos[url]);};/**
	 * Creates video thumbnail.
	 * @protected
	 * @param {jQuery} target - The target containing the video data.
	 * @param {Object} info - The video info object.
	 * @see `fetch`
	 */Video.prototype.thumbnail=function(target,video){var tnLink,icon,path,dimensions=video.width&&video.height?'width:'+video.width+'px;height:'+video.height+'px;':'',customTn=target.find('img'),srcType='src',lazyClass='',settings=this._core.settings,create=function(path){icon='<div class="owl-video-play-icon"></div>';if(settings.lazyLoad){tnLink=$('<div/>',{"class":'owl-video-tn '+lazyClass,"srcType":path});}else{tnLink=$('<div/>',{"class":"owl-video-tn","style":'opacity:1;background-image:url('+path+')'});}target.after(tnLink);target.after(icon);};// wrap video content into owl-video-wrapper div
target.wrap($('<div/>',{"class":"owl-video-wrapper","style":dimensions}));if(this._core.settings.lazyLoad){srcType='data-src';lazyClass='owl-lazy';}// custom thumbnail
if(customTn.length){create(customTn.attr(srcType));customTn.remove();return false;}if(video.type==='youtube'){path="//img.youtube.com/vi/"+video.id+"/hqdefault.jpg";create(path);}else if(video.type==='vimeo'){$.ajax({type:'GET',url:'//vimeo.com/api/v2/video/'+video.id+'.json',jsonp:'callback',dataType:'jsonp',success:function(data){path=data[0].thumbnail_large;create(path);}});}else if(video.type==='vzaar'){$.ajax({type:'GET',url:'//vzaar.com/api/videos/'+video.id+'.json',jsonp:'callback',dataType:'jsonp',success:function(data){path=data.framegrab_url;create(path);}});}};/**
	 * Stops the current video.
	 * @public
	 */Video.prototype.stop=function(){this._core.trigger('stop',null,'video');this._playing.find('.owl-video-frame').remove();this._playing.removeClass('owl-video-playing');this._playing=null;this._core.leave('playing');this._core.trigger('stopped',null,'video');};/**
	 * Starts the current video.
	 * @public
	 * @param {Event} event - The event arguments.
	 */Video.prototype.play=function(event){var target=$(event.target),item=target.closest('.'+this._core.settings.itemClass),video=this._videos[item.attr('data-video')],width=video.width||'100%',height=video.height||this._core.$stage.height(),html,iframe;if(this._playing){return;}this._core.enter('playing');this._core.trigger('play',null,'video');item=this._core.items(this._core.relative(item.index()));this._core.reset(item.index());html=$('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>');html.attr('height',height);html.attr('width',width);if(video.type==='youtube'){html.attr('src','//www.youtube.com/embed/'+video.id+'?autoplay=1&rel=0&v='+video.id);}else if(video.type==='vimeo'){html.attr('src','//player.vimeo.com/video/'+video.id+'?autoplay=1');}else if(video.type==='vzaar'){html.attr('src','//view.vzaar.com/'+video.id+'/player?autoplay=true');}iframe=$(html).wrap('<div class="owl-video-frame" />').insertAfter(item.find('.owl-video'));this._playing=item.addClass('owl-video-playing');};/**
	 * Checks whether an video is currently in full screen mode or not.
	 * @todo Bad style because looks like a readonly method but changes members.
	 * @protected
	 * @returns {Boolean}
	 */Video.prototype.isInFullScreen=function(){var element=document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement;return element&&$(element).parent().hasClass('owl-video-frame');};/**
	 * Destroys the plugin.
	 */Video.prototype.destroy=function(){var handler,property;this._core.$element.off('click.owl.video');for(handler in this._handlers){this._core.$element.off(handler,this._handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.Video=Video;})(window.Zepto||window.jQuery,window,document);/**
 * Animate Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){/**
	 * Creates the animate plugin.
	 * @class The Navigation Plugin
	 * @param {Owl} scope - The Owl Carousel
	 */var Animate=function(scope){this.core=scope;this.core.options=$.extend({},Animate.Defaults,this.core.options);this.swapping=true;this.previous=undefined;this.next=undefined;this.handlers={'change.owl.carousel':$.proxy(function(e){if(e.namespace&&e.property.name=='position'){this.previous=this.core.current();this.next=e.property.value;}},this),'drag.owl.carousel dragged.owl.carousel translated.owl.carousel':$.proxy(function(e){if(e.namespace){this.swapping=e.type=='translated';}},this),'translate.owl.carousel':$.proxy(function(e){if(e.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)){this.swap();}},this)};this.core.$element.on(this.handlers);};/**
	 * Default options.
	 * @public
	 */Animate.Defaults={animateOut:false,animateIn:false};/**
	 * Toggles the animation classes whenever an translations starts.
	 * @protected
	 * @returns {Boolean|undefined}
	 */Animate.prototype.swap=function(){if(this.core.settings.items!==1){return;}if(!$.support.animation||!$.support.transition){return;}this.core.speed(0);var left,clear=$.proxy(this.clear,this),previous=this.core.$stage.children().eq(this.previous),next=this.core.$stage.children().eq(this.next),incoming=this.core.settings.animateIn,outgoing=this.core.settings.animateOut;if(this.core.current()===this.previous){return;}if(outgoing){left=this.core.coordinates(this.previous)-this.core.coordinates(this.next);previous.one($.support.animation.end,clear).css({'left':left+'px'}).addClass('animated owl-animated-out').addClass(outgoing);}if(incoming){next.one($.support.animation.end,clear).addClass('animated owl-animated-in').addClass(incoming);}};Animate.prototype.clear=function(e){$(e.target).css({'left':''}).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);this.core.onTransitionEnd();};/**
	 * Destroys the plugin.
	 * @public
	 */Animate.prototype.destroy=function(){var handler,property;for(handler in this.handlers){this.core.$element.off(handler,this.handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.Animate=Animate;})(window.Zepto||window.jQuery,window,document);/**
 * Autoplay Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author Artus Kolanowski
 * @author David Deutsch
 * @author Tom De Caluwé
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){/**
	 * Creates the autoplay plugin.
	 * @class The Autoplay Plugin
	 * @param {Owl} scope - The Owl Carousel
	 */var Autoplay=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;/**
		 * The autoplay timeout id.
		 * @type {Number}
		 */this._call=null;/**
		 * Depending on the state of the plugin, this variable contains either
		 * the start time of the timer or the current timer value if it's
		 * paused. Since we start in a paused state we initialize the timer
		 * value.
		 * @type {Number}
		 */this._time=0;/**
		 * Stores the timeout currently used.
		 * @type {Number}
		 */this._timeout=0;/**
		 * Indicates whenever the autoplay is paused.
		 * @type {Boolean}
		 */this._paused=true;/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */this._handlers={'changed.owl.carousel':$.proxy(function(e){if(e.namespace&&e.property.name==='settings'){if(this._core.settings.autoplay){this.play();}else{this.stop();}}else if(e.namespace&&e.property.name==='position'&&this._paused){// Reset the timer. This code is triggered when the position
// of the carousel was changed through user interaction.
this._time=0;}},this),'initialized.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.autoplay){this.play();}},this),'play.owl.autoplay':$.proxy(function(e,t,s){if(e.namespace){this.play(t,s);}},this),'stop.owl.autoplay':$.proxy(function(e){if(e.namespace){this.stop();}},this),'mouseover.owl.autoplay':$.proxy(function(){if(this._core.settings.autoplayHoverPause&&this._core.is('rotating')){this.pause();}},this),'mouseleave.owl.autoplay':$.proxy(function(){if(this._core.settings.autoplayHoverPause&&this._core.is('rotating')){this.play();}},this),'touchstart.owl.core':$.proxy(function(){if(this._core.settings.autoplayHoverPause&&this._core.is('rotating')){this.pause();}},this),'touchend.owl.core':$.proxy(function(){if(this._core.settings.autoplayHoverPause){this.play();}},this)};// register event handlers
this._core.$element.on(this._handlers);// set default options
this._core.options=$.extend({},Autoplay.Defaults,this._core.options);};/**
	 * Default options.
	 * @public
	 */Autoplay.Defaults={autoplay:false,autoplayTimeout:5000,autoplayHoverPause:false,autoplaySpeed:false};/**
	 * Transition to the next slide and set a timeout for the next transition.
	 * @private
	 * @param {Number} [speed] - The animation speed for the animations.
	 */Autoplay.prototype._next=function(speed){this._call=window.setTimeout($.proxy(this._next,this,speed),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read());if(this._core.is('interacting')||document.hidden){return;}this._core.next(speed||this._core.settings.autoplaySpeed);};/**
	 * Reads the current timer value when the timer is playing.
	 * @public
	 */Autoplay.prototype.read=function(){return new Date().getTime()-this._time;};/**
	 * Starts the autoplay.
	 * @public
	 * @param {Number} [timeout] - The interval before the next animation starts.
	 * @param {Number} [speed] - The animation speed for the animations.
	 */Autoplay.prototype.play=function(timeout,speed){var elapsed;if(!this._core.is('rotating')){this._core.enter('rotating');}timeout=timeout||this._core.settings.autoplayTimeout;// Calculate the elapsed time since the last transition. If the carousel
// wasn't playing this calculation will yield zero.
elapsed=Math.min(this._time%(this._timeout||timeout),timeout);if(this._paused){// Start the clock.
this._time=this.read();this._paused=false;}else{// Clear the active timeout to allow replacement.
window.clearTimeout(this._call);}// Adjust the origin of the timer to match the new timeout value.
this._time+=this.read()%timeout-elapsed;this._timeout=timeout;this._call=window.setTimeout($.proxy(this._next,this,speed),timeout-elapsed);};/**
	 * Stops the autoplay.
	 * @public
	 */Autoplay.prototype.stop=function(){if(this._core.is('rotating')){// Reset the clock.
this._time=0;this._paused=true;window.clearTimeout(this._call);this._core.leave('rotating');}};/**
	 * Pauses the autoplay.
	 * @public
	 */Autoplay.prototype.pause=function(){if(this._core.is('rotating')&&!this._paused){// Pause the clock.
this._time=this.read();this._paused=true;window.clearTimeout(this._call);}};/**
	 * Destroys the plugin.
	 */Autoplay.prototype.destroy=function(){var handler,property;this.stop();for(handler in this._handlers){this._core.$element.off(handler,this._handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.autoplay=Autoplay;})(window.Zepto||window.jQuery,window,document);/**
 * Navigation Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){'use strict';/**
	 * Creates the navigation plugin.
	 * @class The Navigation Plugin
	 * @param {Owl} carousel - The Owl Carousel.
	 */var Navigation=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;/**
		 * Indicates whether the plugin is initialized or not.
		 * @protected
		 * @type {Boolean}
		 */this._initialized=false;/**
		 * The current paging indexes.
		 * @protected
		 * @type {Array}
		 */this._pages=[];/**
		 * All DOM elements of the user interface.
		 * @protected
		 * @type {Object}
		 */this._controls={};/**
		 * Markup for an indicator.
		 * @protected
		 * @type {Array.<String>}
		 */this._templates=[];/**
		 * The carousel element.
		 * @type {jQuery}
		 */this.$element=this._core.$element;/**
		 * Overridden methods of the carousel.
		 * @protected
		 * @type {Object}
		 */this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to};/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */this._handlers={'prepared.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.dotsData){this._templates.push('<div class="'+this._core.settings.dotClass+'">'+$(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot')+'</div>');}},this),'added.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.dotsData){this._templates.splice(e.position,0,this._templates.pop());}},this),'remove.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.dotsData){this._templates.splice(e.position,1);}},this),'changed.owl.carousel':$.proxy(function(e){if(e.namespace&&e.property.name=='position'){this.draw();}},this),'initialized.owl.carousel':$.proxy(function(e){if(e.namespace&&!this._initialized){this._core.trigger('initialize',null,'navigation');this.initialize();this.update();this.draw();this._initialized=true;this._core.trigger('initialized',null,'navigation');}},this),'refreshed.owl.carousel':$.proxy(function(e){if(e.namespace&&this._initialized){this._core.trigger('refresh',null,'navigation');this.update();this.draw();this._core.trigger('refreshed',null,'navigation');}},this)};// set default options
this._core.options=$.extend({},Navigation.Defaults,this._core.options);// register event handlers
this.$element.on(this._handlers);};/**
	 * Default options.
	 * @public
	 * @todo Rename `slideBy` to `navBy`
	 */Navigation.Defaults={nav:false,navText:['<div aria-label="'+'Previous'+'">	<img class="svg" src="./src/img/arrow.svg" alt=""> </div>','<div aria-label="'+'Next'+'">	<img class="svg" src="./src/img/arrow.svg" alt=""></div>'],navSpeed:false,navElement:'button type="button" role="presentation"',navContainer:false,navContainerClass:'owl-nav',navClass:['owl-prev','owl-next'],slideBy:1,dotClass:'owl-dot',dotsClass:'owl-dots',dots:true,dotsEach:false,dotsData:false,dotsSpeed:false,dotsContainer:false};/**
	 * Initializes the layout of the plugin and extends the carousel.
	 * @protected
	 */Navigation.prototype.initialize=function(){var override,settings=this._core.settings;// create DOM structure for relative navigation
this._controls.$relative=(settings.navContainer?$(settings.navContainer):$('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');this._controls.$previous=$('<'+settings.navElement+'>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click',$.proxy(function(e){this.prev(settings.navSpeed);},this));this._controls.$next=$('<'+settings.navElement+'>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click',$.proxy(function(e){this.next(settings.navSpeed);},this));// create DOM structure for absolute navigation
if(!settings.dotsData){this._templates=[$('<button role="button">').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];}this._controls.$absolute=(settings.dotsContainer?$(settings.dotsContainer):$('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');this._controls.$absolute.on('click','button',$.proxy(function(e){var index=$(e.target).parent().is(this._controls.$absolute)?$(e.target).index():$(e.target).parent().index();e.preventDefault();this.to(index,settings.dotsSpeed);},this));/*$el.on('focusin', function() {
			$(document).off(".carousel");

			$(document).on('keydown.carousel', function(e) {
				if(e.keyCode == 37) {
					$el.trigger('prev.owl')
				}
				if(e.keyCode == 39) {
					$el.trigger('next.owl')
				}
			});
		});*/ // override public methods of the carousel
for(override in this._overrides){this._core[override]=$.proxy(this[override],this);}};/**
	 * Destroys the plugin.
	 * @protected
	 */Navigation.prototype.destroy=function(){var handler,control,property,override,settings;settings=this._core.settings;for(handler in this._handlers){this.$element.off(handler,this._handlers[handler]);}for(control in this._controls){if(control==='$relative'&&settings.navContainer){this._controls[control].html('');}else{this._controls[control].remove();}}for(override in this.overides){this._core[override]=this._overrides[override];}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};/**
	 * Updates the internal state.
	 * @protected
	 */Navigation.prototype.update=function(){var i,j,k,lower=this._core.clones().length/2,upper=lower+this._core.items().length,maximum=this._core.maximum(true),settings=this._core.settings,size=settings.center||settings.autoWidth||settings.dotsData?1:settings.dotsEach||settings.items;if(settings.slideBy!=='page'){settings.slideBy=Math.min(settings.slideBy,settings.items);}if(settings.dots||settings.slideBy=='page'){this._pages=[];for(i=lower,j=0,k=0;i<upper;i++){if(j>=size||j===0){this._pages.push({start:Math.min(maximum,i-lower),end:i-lower+size-1});if(Math.min(maximum,i-lower)===maximum){break;}j=0,++k;}j+=this._core.mergers(this._core.relative(i));}}};/**
	 * Draws the user interface.
	 * @todo The option `dotsData` wont work.
	 * @protected
	 */Navigation.prototype.draw=function(){var difference,settings=this._core.settings,disabled=this._core.items().length<=settings.items,index=this._core.relative(this._core.current()),loop=settings.loop||settings.rewind;this._controls.$relative.toggleClass('disabled',!settings.nav||disabled);if(settings.nav){this._controls.$previous.toggleClass('disabled',!loop&&index<=this._core.minimum(true));this._controls.$next.toggleClass('disabled',!loop&&index>=this._core.maximum(true));}this._controls.$absolute.toggleClass('disabled',!settings.dots||disabled);if(settings.dots){difference=this._pages.length-this._controls.$absolute.children().length;if(settings.dotsData&&difference!==0){this._controls.$absolute.html(this._templates.join(''));}else if(difference>0){this._controls.$absolute.append(new Array(difference+1).join(this._templates[0]));}else if(difference<0){this._controls.$absolute.children().slice(difference).remove();}this._controls.$absolute.find('.active').removeClass('active');this._controls.$absolute.children().eq($.inArray(this.current(),this._pages)).addClass('active');}};/**
	 * Extends event data.
	 * @protected
	 * @param {Event} event - The event object which gets thrown.
	 */Navigation.prototype.onTrigger=function(event){var settings=this._core.settings;event.page={index:$.inArray(this.current(),this._pages),count:this._pages.length,size:settings&&(settings.center||settings.autoWidth||settings.dotsData?1:settings.dotsEach||settings.items)};};/**
	 * Gets the current page position of the carousel.
	 * @protected
	 * @returns {Number}
	 */Navigation.prototype.current=function(){var current=this._core.relative(this._core.current());return $.grep(this._pages,$.proxy(function(page,index){return page.start<=current&&page.end>=current;},this)).pop();};/**
	 * Gets the current succesor/predecessor position.
	 * @protected
	 * @returns {Number}
	 */Navigation.prototype.getPosition=function(successor){var position,length,settings=this._core.settings;if(settings.slideBy=='page'){position=$.inArray(this.current(),this._pages);length=this._pages.length;successor?++position:--position;position=this._pages[(position%length+length)%length].start;}else{position=this._core.relative(this._core.current());length=this._core.items().length;successor?position+=settings.slideBy:position-=settings.slideBy;}return position;};/**
	 * Slides to the next item or page.
	 * @public
	 * @param {Number} [speed=false] - The time in milliseconds for the transition.
	 */Navigation.prototype.next=function(speed){$.proxy(this._overrides.to,this._core)(this.getPosition(true),speed);};/**
	 * Slides to the previous item or page.
	 * @public
	 * @param {Number} [speed=false] - The time in milliseconds for the transition.
	 */Navigation.prototype.prev=function(speed){$.proxy(this._overrides.to,this._core)(this.getPosition(false),speed);};/**
	 * Slides to the specified item or page.
	 * @public
	 * @param {Number} position - The position of the item or page.
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
	 */Navigation.prototype.to=function(position,speed,standard){var length;if(!standard&&this._pages.length){length=this._pages.length;$.proxy(this._overrides.to,this._core)(this._pages[(position%length+length)%length].start,speed);}else{$.proxy(this._overrides.to,this._core)(position,speed);}};$.fn.owlCarousel.Constructor.Plugins.Navigation=Navigation;})(window.Zepto||window.jQuery,window,document);/**
 * Hash Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){'use strict';/**
	 * Creates the hash plugin.
	 * @class The Hash Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */var Hash=function(carousel){/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */this._core=carousel;/**
		 * Hash index for the items.
		 * @protected
		 * @type {Object}
		 */this._hashes={};/**
		 * The carousel element.
		 * @type {jQuery}
		 */this.$element=this._core.$element;/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */this._handlers={'initialized.owl.carousel':$.proxy(function(e){if(e.namespace&&this._core.settings.startPosition==='URLHash'){$(window).trigger('hashchange.owl.navigation');}},this),'prepared.owl.carousel':$.proxy(function(e){if(e.namespace){var hash=$(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');if(!hash){return;}this._hashes[hash]=e.content;}},this),'changed.owl.carousel':$.proxy(function(e){if(e.namespace&&e.property.name==='position'){var current=this._core.items(this._core.relative(this._core.current())),hash=$.map(this._hashes,function(item,hash){return item===current?hash:null;}).join();if(!hash||window.location.hash.slice(1)===hash){return;}window.location.hash=hash;}},this)};// set default options
this._core.options=$.extend({},Hash.Defaults,this._core.options);// register the event handlers
this.$element.on(this._handlers);// register event listener for hash navigation
$(window).on('hashchange.owl.navigation',$.proxy(function(e){var hash=window.location.hash.substring(1),items=this._core.$stage.children(),position=this._hashes[hash]&&items.index(this._hashes[hash]);if(position===undefined||position===this._core.current()){return;}this._core.to(this._core.relative(position),false,true);},this));};/**
	 * Default options.
	 * @public
	 */Hash.Defaults={URLhashListener:false};/**
	 * Destroys the plugin.
	 * @public
	 */Hash.prototype.destroy=function(){var handler,property;$(window).off('hashchange.owl.navigation');for(handler in this._handlers){this._core.$element.off(handler,this._handlers[handler]);}for(property in Object.getOwnPropertyNames(this)){typeof this[property]!='function'&&(this[property]=null);}};$.fn.owlCarousel.Constructor.Plugins.Hash=Hash;})(window.Zepto||window.jQuery,window,document);/**
 * Support Plugin
 *
 * @version 2.3.4
 * @author Vivid Planet Software GmbH
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */;(function($,window,document,undefined){var style=$('<support>').get(0).style,prefixes='Webkit Moz O ms'.split(' '),events={transition:{end:{WebkitTransition:'webkitTransitionEnd',MozTransition:'transitionend',OTransition:'oTransitionEnd',transition:'transitionend'}},animation:{end:{WebkitAnimation:'webkitAnimationEnd',MozAnimation:'animationend',OAnimation:'oAnimationEnd',animation:'animationend'}}},tests={csstransforms:function(){return!!test('transform');},csstransforms3d:function(){return!!test('perspective');},csstransitions:function(){return!!test('transition');},cssanimations:function(){return!!test('animation');}};function test(property,prefixed){var result=false,upper=property.charAt(0).toUpperCase()+property.slice(1);$.each((property+' '+prefixes.join(upper+' ')+upper).split(' '),function(i,property){if(style[property]!==undefined){result=prefixed?property:true;return false;}});return result;}function prefixed(property){return test(property,true);}if(tests.csstransitions()){/* jshint -W053 */$.support.transition=new String(prefixed('transition'));$.support.transition.end=events.transition.end[$.support.transition];}if(tests.cssanimations()){/* jshint -W053 */$.support.animation=new String(prefixed('animation'));$.support.animation.end=events.animation.end[$.support.animation];}if(tests.csstransforms()){/* jshint -W053 */$.support.transform=new String(prefixed('transform'));$.support.transform3d=tests.csstransforms3d();}})(window.Zepto||window.jQuery,window,document);
/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */ /* global window, document, define, jQuery, setInterval, clearInterval */;(function(factory){'use strict';if(typeof define==='function'&&define.amd){define(['jquery'],factory);}else if(typeof exports!=='undefined'){module.exports=factory(require('jquery'));}else{factory(jQuery);}})(function($){'use strict';var Slick=window.Slick||{};Slick=function(){var instanceUid=0;function Slick(element,settings){var _=this,dataSettings;_.defaults={accessibility:true,adaptiveHeight:false,appendArrows:$(element),appendDots:$(element),arrows:true,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:false,autoplaySpeed:3000,centerMode:false,centerPadding:'50px',cssEase:'ease',customPaging:function(slider,i){return $('<button type="button" />').text(i+1);},dots:false,dotsClass:'slick-dots',draggable:true,easing:'linear',edgeFriction:0.35,fade:false,focusOnSelect:false,focusOnChange:false,infinite:true,initialSlide:0,lazyLoad:'ondemand',mobileFirst:false,pauseOnHover:true,pauseOnFocus:true,pauseOnDotsHover:false,respondTo:'window',responsive:null,rows:1,rtl:false,slide:'',slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:true,swipeToSlide:false,touchMove:true,touchThreshold:5,useCSS:true,useTransform:true,variableWidth:false,vertical:false,verticalSwiping:false,waitForAnimate:true,zIndex:1000};_.initials={animating:false,dragging:false,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:false,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:false,slideOffset:0,swipeLeft:null,swiping:false,$list:null,touchObject:{},transformsEnabled:false,unslicked:false};$.extend(_,_.initials);_.activeBreakpoint=null;_.animType=null;_.animProp=null;_.breakpoints=[];_.breakpointSettings=[];_.cssTransitions=false;_.focussed=false;_.interrupted=false;_.hidden='hidden';_.paused=true;_.positionProp=null;_.respondTo=null;_.rowCount=1;_.shouldClick=true;_.$slider=$(element);_.$slidesCache=null;_.transformType=null;_.transitionType=null;_.visibilityChange='visibilitychange';_.windowWidth=0;_.windowTimer=null;dataSettings=$(element).data('slick')||{};_.options=$.extend({},_.defaults,settings,dataSettings);_.currentSlide=_.options.initialSlide;_.originalSettings=_.options;if(typeof document.mozHidden!=='undefined'){_.hidden='mozHidden';_.visibilityChange='mozvisibilitychange';}else if(typeof document.webkitHidden!=='undefined'){_.hidden='webkitHidden';_.visibilityChange='webkitvisibilitychange';}_.autoPlay=$.proxy(_.autoPlay,_);_.autoPlayClear=$.proxy(_.autoPlayClear,_);_.autoPlayIterator=$.proxy(_.autoPlayIterator,_);_.changeSlide=$.proxy(_.changeSlide,_);_.clickHandler=$.proxy(_.clickHandler,_);_.selectHandler=$.proxy(_.selectHandler,_);_.setPosition=$.proxy(_.setPosition,_);_.swipeHandler=$.proxy(_.swipeHandler,_);_.dragHandler=$.proxy(_.dragHandler,_);_.keyHandler=$.proxy(_.keyHandler,_);_.instanceUid=instanceUid++;// A simple way to check for HTML strings
// Strict HTML recognition (must start with <)
// Extracted from jQuery v1.11 source
_.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/;_.registerBreakpoints();_.init(true);}return Slick;}();Slick.prototype.activateADA=function(){var _=this;_.$slideTrack.find('.slick-active').attr({'aria-hidden':'false'}).find('a, input, button, select').attr({'tabindex':'0'});};Slick.prototype.addSlide=Slick.prototype.slickAdd=function(markup,index,addBefore){var _=this;if(typeof index==='boolean'){addBefore=index;index=null;}else if(index<0||index>=_.slideCount){return false;}_.unload();if(typeof index==='number'){if(index===0&&_.$slides.length===0){$(markup).appendTo(_.$slideTrack);}else if(addBefore){$(markup).insertBefore(_.$slides.eq(index));}else{$(markup).insertAfter(_.$slides.eq(index));}}else{if(addBefore===true){$(markup).prependTo(_.$slideTrack);}else{$(markup).appendTo(_.$slideTrack);}}_.$slides=_.$slideTrack.children(this.options.slide);_.$slideTrack.children(this.options.slide).detach();_.$slideTrack.append(_.$slides);_.$slides.each(function(index,element){$(element).attr('data-slick-index',index);});_.$slidesCache=_.$slides;_.reinit();};Slick.prototype.animateHeight=function(){var _=this;if(_.options.slidesToShow===1&&_.options.adaptiveHeight===true&&_.options.vertical===false){var targetHeight=_.$slides.eq(_.currentSlide).outerHeight(true);_.$list.animate({height:targetHeight},_.options.speed);}};Slick.prototype.animateSlide=function(targetLeft,callback){var animProps={},_=this;_.animateHeight();if(_.options.rtl===true&&_.options.vertical===false){targetLeft=-targetLeft;}if(_.transformsEnabled===false){if(_.options.vertical===false){_.$slideTrack.animate({left:targetLeft},_.options.speed,_.options.easing,callback);}else{_.$slideTrack.animate({top:targetLeft},_.options.speed,_.options.easing,callback);}}else{if(_.cssTransitions===false){if(_.options.rtl===true){_.currentLeft=-_.currentLeft;}$({animStart:_.currentLeft}).animate({animStart:targetLeft},{duration:_.options.speed,easing:_.options.easing,step:function(now){now=Math.ceil(now);if(_.options.vertical===false){animProps[_.animType]='translate('+now+'px, 0px)';_.$slideTrack.css(animProps);}else{animProps[_.animType]='translate(0px,'+now+'px)';_.$slideTrack.css(animProps);}},complete:function(){if(callback){callback.call();}}});}else{_.applyTransition();targetLeft=Math.ceil(targetLeft);if(_.options.vertical===false){animProps[_.animType]='translate3d('+targetLeft+'px, 0px, 0px)';}else{animProps[_.animType]='translate3d(0px,'+targetLeft+'px, 0px)';}_.$slideTrack.css(animProps);if(callback){setTimeout(function(){_.disableTransition();callback.call();},_.options.speed);}}}};Slick.prototype.getNavTarget=function(){var _=this,asNavFor=_.options.asNavFor;if(asNavFor&&asNavFor!==null){asNavFor=$(asNavFor).not(_.$slider);}return asNavFor;};Slick.prototype.asNavFor=function(index){var _=this,asNavFor=_.getNavTarget();if(asNavFor!==null&&typeof asNavFor==='object'){asNavFor.each(function(){var target=$(this).slick('getSlick');if(!target.unslicked){target.slideHandler(index,true);}});}};Slick.prototype.applyTransition=function(slide){var _=this,transition={};if(_.options.fade===false){transition[_.transitionType]=_.transformType+' '+_.options.speed+'ms '+_.options.cssEase;}else{transition[_.transitionType]='opacity '+_.options.speed+'ms '+_.options.cssEase;}if(_.options.fade===false){_.$slideTrack.css(transition);}else{_.$slides.eq(slide).css(transition);}};Slick.prototype.autoPlay=function(){var _=this;_.autoPlayClear();if(_.slideCount>_.options.slidesToShow){_.autoPlayTimer=setInterval(_.autoPlayIterator,_.options.autoplaySpeed);}};Slick.prototype.autoPlayClear=function(){var _=this;if(_.autoPlayTimer){clearInterval(_.autoPlayTimer);}};Slick.prototype.autoPlayIterator=function(){var _=this,slideTo=_.currentSlide+_.options.slidesToScroll;if(!_.paused&&!_.interrupted&&!_.focussed){if(_.options.infinite===false){if(_.direction===1&&_.currentSlide+1===_.slideCount-1){_.direction=0;}else if(_.direction===0){slideTo=_.currentSlide-_.options.slidesToScroll;if(_.currentSlide-1===0){_.direction=1;}}}_.slideHandler(slideTo);}};Slick.prototype.buildArrows=function(){var _=this;if(_.options.arrows===true){_.$prevArrow=$(_.options.prevArrow).addClass('slick-arrow');_.$nextArrow=$(_.options.nextArrow).addClass('slick-arrow');if(_.slideCount>_.options.slidesToShow){_.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');_.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');if(_.htmlExpr.test(_.options.prevArrow)){_.$prevArrow.prependTo(_.options.appendArrows);}if(_.htmlExpr.test(_.options.nextArrow)){_.$nextArrow.appendTo(_.options.appendArrows);}if(_.options.infinite!==true){_.$prevArrow.addClass('slick-disabled').attr('aria-disabled','true');}}else{_.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({'aria-disabled':'true','tabindex':'-1'});}}};Slick.prototype.buildDots=function(){var _=this,i,dot;if(_.options.dots===true&&_.slideCount>_.options.slidesToShow){_.$slider.addClass('slick-dotted');dot=$('<ul />').addClass(_.options.dotsClass);for(i=0;i<=_.getDotCount();i+=1){dot.append($('<li />').append(_.options.customPaging.call(this,_,i)));}_.$dots=dot.appendTo(_.options.appendDots);_.$dots.find('li').first().addClass('slick-active');}};Slick.prototype.buildOut=function(){var _=this;_.$slides=_.$slider.children(_.options.slide+':not(.slick-cloned)').addClass('slick-slide');_.slideCount=_.$slides.length;_.$slides.each(function(index,element){$(element).attr('data-slick-index',index).data('originalStyling',$(element).attr('style')||'');});_.$slider.addClass('slick-slider');_.$slideTrack=_.slideCount===0?$('<div class="slick-track"/>').appendTo(_.$slider):_.$slides.wrapAll('<div class="slick-track"/>').parent();_.$list=_.$slideTrack.wrap('<div class="slick-list"/>').parent();_.$slideTrack.css('opacity',0);if(_.options.centerMode===true||_.options.swipeToSlide===true){_.options.slidesToScroll=1;}$('img[data-lazy]',_.$slider).not('[src]').addClass('slick-loading');_.setupInfinite();_.buildArrows();_.buildDots();_.updateDots();_.setSlideClasses(typeof _.currentSlide==='number'?_.currentSlide:0);if(_.options.draggable===true){_.$list.addClass('draggable');}};Slick.prototype.buildRows=function(){var _=this,a,b,c,newSlides,numOfSlides,originalSlides,slidesPerSection;newSlides=document.createDocumentFragment();originalSlides=_.$slider.children();if(_.options.rows>0){slidesPerSection=_.options.slidesPerRow*_.options.rows;numOfSlides=Math.ceil(originalSlides.length/slidesPerSection);for(a=0;a<numOfSlides;a++){var slide=document.createElement('div');for(b=0;b<_.options.rows;b++){var row=document.createElement('div');for(c=0;c<_.options.slidesPerRow;c++){var target=a*slidesPerSection+(b*_.options.slidesPerRow+c);if(originalSlides.get(target)){row.appendChild(originalSlides.get(target));}}slide.appendChild(row);}newSlides.appendChild(slide);}_.$slider.empty().append(newSlides);_.$slider.children().children().children().css({'width':100/_.options.slidesPerRow+'%','display':'inline-block'});}};Slick.prototype.checkResponsive=function(initial,forceUpdate){var _=this,breakpoint,targetBreakpoint,respondToWidth,triggerBreakpoint=false;var sliderWidth=_.$slider.width();var windowWidth=window.innerWidth||$(window).width();if(_.respondTo==='window'){respondToWidth=windowWidth;}else if(_.respondTo==='slider'){respondToWidth=sliderWidth;}else if(_.respondTo==='min'){respondToWidth=Math.min(windowWidth,sliderWidth);}if(_.options.responsive&&_.options.responsive.length&&_.options.responsive!==null){targetBreakpoint=null;for(breakpoint in _.breakpoints){if(_.breakpoints.hasOwnProperty(breakpoint)){if(_.originalSettings.mobileFirst===false){if(respondToWidth<_.breakpoints[breakpoint]){targetBreakpoint=_.breakpoints[breakpoint];}}else{if(respondToWidth>_.breakpoints[breakpoint]){targetBreakpoint=_.breakpoints[breakpoint];}}}}if(targetBreakpoint!==null){if(_.activeBreakpoint!==null){if(targetBreakpoint!==_.activeBreakpoint||forceUpdate){_.activeBreakpoint=targetBreakpoint;if(_.breakpointSettings[targetBreakpoint]==='unslick'){_.unslick(targetBreakpoint);}else{_.options=$.extend({},_.originalSettings,_.breakpointSettings[targetBreakpoint]);if(initial===true){_.currentSlide=_.options.initialSlide;}_.refresh(initial);}triggerBreakpoint=targetBreakpoint;}}else{_.activeBreakpoint=targetBreakpoint;if(_.breakpointSettings[targetBreakpoint]==='unslick'){_.unslick(targetBreakpoint);}else{_.options=$.extend({},_.originalSettings,_.breakpointSettings[targetBreakpoint]);if(initial===true){_.currentSlide=_.options.initialSlide;}_.refresh(initial);}triggerBreakpoint=targetBreakpoint;}}else{if(_.activeBreakpoint!==null){_.activeBreakpoint=null;_.options=_.originalSettings;if(initial===true){_.currentSlide=_.options.initialSlide;}_.refresh(initial);triggerBreakpoint=targetBreakpoint;}}// only trigger breakpoints during an actual break. not on initialize.
if(!initial&&triggerBreakpoint!==false){_.$slider.trigger('breakpoint',[_,triggerBreakpoint]);}}};Slick.prototype.changeSlide=function(event,dontAnimate){var _=this,$target=$(event.currentTarget),indexOffset,slideOffset,unevenOffset;// If target is a link, prevent default action.
if($target.is('a')){event.preventDefault();}// If target is not the <li> element (ie: a child), find the <li>.
if(!$target.is('li')){$target=$target.closest('li');}unevenOffset=_.slideCount%_.options.slidesToScroll!==0;indexOffset=unevenOffset?0:(_.slideCount-_.currentSlide)%_.options.slidesToScroll;switch(event.data.message){case'previous':slideOffset=indexOffset===0?_.options.slidesToScroll:_.options.slidesToShow-indexOffset;if(_.slideCount>_.options.slidesToShow){_.slideHandler(_.currentSlide-slideOffset,false,dontAnimate);}break;case'next':slideOffset=indexOffset===0?_.options.slidesToScroll:indexOffset;if(_.slideCount>_.options.slidesToShow){_.slideHandler(_.currentSlide+slideOffset,false,dontAnimate);}break;case'index':var index=event.data.index===0?0:event.data.index||$target.index()*_.options.slidesToScroll;_.slideHandler(_.checkNavigable(index),false,dontAnimate);$target.children().trigger('focus');break;default:return;}};Slick.prototype.checkNavigable=function(index){var _=this,navigables,prevNavigable;navigables=_.getNavigableIndexes();prevNavigable=0;if(index>navigables[navigables.length-1]){index=navigables[navigables.length-1];}else{for(var n in navigables){if(index<navigables[n]){index=prevNavigable;break;}prevNavigable=navigables[n];}}return index;};Slick.prototype.cleanUpEvents=function(){var _=this;if(_.options.dots&&_.$dots!==null){$('li',_.$dots).off('click.slick',_.changeSlide).off('mouseenter.slick',$.proxy(_.interrupt,_,true)).off('mouseleave.slick',$.proxy(_.interrupt,_,false));if(_.options.accessibility===true){_.$dots.off('keydown.slick',_.keyHandler);}}_.$slider.off('focus.slick blur.slick');if(_.options.arrows===true&&_.slideCount>_.options.slidesToShow){_.$prevArrow&&_.$prevArrow.off('click.slick',_.changeSlide);_.$nextArrow&&_.$nextArrow.off('click.slick',_.changeSlide);if(_.options.accessibility===true){_.$prevArrow&&_.$prevArrow.off('keydown.slick',_.keyHandler);_.$nextArrow&&_.$nextArrow.off('keydown.slick',_.keyHandler);}}_.$list.off('touchstart.slick mousedown.slick',_.swipeHandler);_.$list.off('touchmove.slick mousemove.slick',_.swipeHandler);_.$list.off('touchend.slick mouseup.slick',_.swipeHandler);_.$list.off('touchcancel.slick mouseleave.slick',_.swipeHandler);_.$list.off('click.slick',_.clickHandler);$(document).off(_.visibilityChange,_.visibility);_.cleanUpSlideEvents();if(_.options.accessibility===true){_.$list.off('keydown.slick',_.keyHandler);}if(_.options.focusOnSelect===true){$(_.$slideTrack).children().off('click.slick',_.selectHandler);}$(window).off('orientationchange.slick.slick-'+_.instanceUid,_.orientationChange);$(window).off('resize.slick.slick-'+_.instanceUid,_.resize);$('[draggable!=true]',_.$slideTrack).off('dragstart',_.preventDefault);$(window).off('load.slick.slick-'+_.instanceUid,_.setPosition);};Slick.prototype.cleanUpSlideEvents=function(){var _=this;_.$list.off('mouseenter.slick',$.proxy(_.interrupt,_,true));_.$list.off('mouseleave.slick',$.proxy(_.interrupt,_,false));};Slick.prototype.cleanUpRows=function(){var _=this,originalSlides;if(_.options.rows>0){originalSlides=_.$slides.children().children();originalSlides.removeAttr('style');_.$slider.empty().append(originalSlides);}};Slick.prototype.clickHandler=function(event){var _=this;if(_.shouldClick===false){event.stopImmediatePropagation();event.stopPropagation();event.preventDefault();}};Slick.prototype.destroy=function(refresh){var _=this;_.autoPlayClear();_.touchObject={};_.cleanUpEvents();$('.slick-cloned',_.$slider).detach();if(_.$dots){_.$dots.remove();}if(_.$prevArrow&&_.$prevArrow.length){_.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display','');if(_.htmlExpr.test(_.options.prevArrow)){_.$prevArrow.remove();}}if(_.$nextArrow&&_.$nextArrow.length){_.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display','');if(_.htmlExpr.test(_.options.nextArrow)){_.$nextArrow.remove();}}if(_.$slides){_.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function(){$(this).attr('style',$(this).data('originalStyling'));});_.$slideTrack.children(this.options.slide).detach();_.$slideTrack.detach();_.$list.detach();_.$slider.append(_.$slides);}_.cleanUpRows();_.$slider.removeClass('slick-slider');_.$slider.removeClass('slick-initialized');_.$slider.removeClass('slick-dotted');_.unslicked=true;if(!refresh){_.$slider.trigger('destroy',[_]);}};Slick.prototype.disableTransition=function(slide){var _=this,transition={};transition[_.transitionType]='';if(_.options.fade===false){_.$slideTrack.css(transition);}else{_.$slides.eq(slide).css(transition);}};Slick.prototype.fadeSlide=function(slideIndex,callback){var _=this;if(_.cssTransitions===false){_.$slides.eq(slideIndex).css({zIndex:_.options.zIndex});_.$slides.eq(slideIndex).animate({opacity:1},_.options.speed,_.options.easing,callback);}else{_.applyTransition(slideIndex);_.$slides.eq(slideIndex).css({opacity:1,zIndex:_.options.zIndex});if(callback){setTimeout(function(){_.disableTransition(slideIndex);callback.call();},_.options.speed);}}};Slick.prototype.fadeSlideOut=function(slideIndex){var _=this;if(_.cssTransitions===false){_.$slides.eq(slideIndex).animate({opacity:0,zIndex:_.options.zIndex-2},_.options.speed,_.options.easing);}else{_.applyTransition(slideIndex);_.$slides.eq(slideIndex).css({opacity:0,zIndex:_.options.zIndex-2});}};Slick.prototype.filterSlides=Slick.prototype.slickFilter=function(filter){var _=this;if(filter!==null){_.$slidesCache=_.$slides;_.unload();_.$slideTrack.children(this.options.slide).detach();_.$slidesCache.filter(filter).appendTo(_.$slideTrack);_.reinit();}};Slick.prototype.focusHandler=function(){var _=this;_.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick','*',function(event){event.stopImmediatePropagation();var $sf=$(this);setTimeout(function(){if(_.options.pauseOnFocus){_.focussed=$sf.is(':focus');_.autoPlay();}},0);});};Slick.prototype.getCurrent=Slick.prototype.slickCurrentSlide=function(){var _=this;return _.currentSlide;};Slick.prototype.getDotCount=function(){var _=this;var breakPoint=0;var counter=0;var pagerQty=0;if(_.options.infinite===true){if(_.slideCount<=_.options.slidesToShow){++pagerQty;}else{while(breakPoint<_.slideCount){++pagerQty;breakPoint=counter+_.options.slidesToScroll;counter+=_.options.slidesToScroll<=_.options.slidesToShow?_.options.slidesToScroll:_.options.slidesToShow;}}}else if(_.options.centerMode===true){pagerQty=_.slideCount;}else if(!_.options.asNavFor){pagerQty=1+Math.ceil((_.slideCount-_.options.slidesToShow)/_.options.slidesToScroll);}else{while(breakPoint<_.slideCount){++pagerQty;breakPoint=counter+_.options.slidesToScroll;counter+=_.options.slidesToScroll<=_.options.slidesToShow?_.options.slidesToScroll:_.options.slidesToShow;}}return pagerQty-1;};Slick.prototype.getLeft=function(slideIndex){var _=this,targetLeft,verticalHeight,verticalOffset=0,targetSlide,coef;_.slideOffset=0;verticalHeight=_.$slides.first().outerHeight(true);if(_.options.infinite===true){if(_.slideCount>_.options.slidesToShow){_.slideOffset=_.slideWidth*_.options.slidesToShow*-1;coef=-1;if(_.options.vertical===true&&_.options.centerMode===true){if(_.options.slidesToShow===2){coef=-1.5;}else if(_.options.slidesToShow===1){coef=-2;}}verticalOffset=verticalHeight*_.options.slidesToShow*coef;}if(_.slideCount%_.options.slidesToScroll!==0){if(slideIndex+_.options.slidesToScroll>_.slideCount&&_.slideCount>_.options.slidesToShow){if(slideIndex>_.slideCount){_.slideOffset=(_.options.slidesToShow-(slideIndex-_.slideCount))*_.slideWidth*-1;verticalOffset=(_.options.slidesToShow-(slideIndex-_.slideCount))*verticalHeight*-1;}else{_.slideOffset=_.slideCount%_.options.slidesToScroll*_.slideWidth*-1;verticalOffset=_.slideCount%_.options.slidesToScroll*verticalHeight*-1;}}}}else{if(slideIndex+_.options.slidesToShow>_.slideCount){_.slideOffset=(slideIndex+_.options.slidesToShow-_.slideCount)*_.slideWidth;verticalOffset=(slideIndex+_.options.slidesToShow-_.slideCount)*verticalHeight;}}if(_.slideCount<=_.options.slidesToShow){_.slideOffset=0;verticalOffset=0;}if(_.options.centerMode===true&&_.slideCount<=_.options.slidesToShow){_.slideOffset=_.slideWidth*Math.floor(_.options.slidesToShow)/2-_.slideWidth*_.slideCount/2;}else if(_.options.centerMode===true&&_.options.infinite===true){_.slideOffset+=_.slideWidth*Math.floor(_.options.slidesToShow/2)-_.slideWidth;}else if(_.options.centerMode===true){_.slideOffset=0;_.slideOffset+=_.slideWidth*Math.floor(_.options.slidesToShow/2);}if(_.options.vertical===false){targetLeft=slideIndex*_.slideWidth*-1+_.slideOffset;}else{targetLeft=slideIndex*verticalHeight*-1+verticalOffset;}if(_.options.variableWidth===true){if(_.slideCount<=_.options.slidesToShow||_.options.infinite===false){targetSlide=_.$slideTrack.children('.slick-slide').eq(slideIndex);}else{targetSlide=_.$slideTrack.children('.slick-slide').eq(slideIndex+_.options.slidesToShow);}if(_.options.rtl===true){if(targetSlide[0]){targetLeft=(_.$slideTrack.width()-targetSlide[0].offsetLeft-targetSlide.width())*-1;}else{targetLeft=0;}}else{targetLeft=targetSlide[0]?targetSlide[0].offsetLeft*-1:0;}if(_.options.centerMode===true){if(_.slideCount<=_.options.slidesToShow||_.options.infinite===false){targetSlide=_.$slideTrack.children('.slick-slide').eq(slideIndex);}else{targetSlide=_.$slideTrack.children('.slick-slide').eq(slideIndex+_.options.slidesToShow+1);}if(_.options.rtl===true){if(targetSlide[0]){targetLeft=(_.$slideTrack.width()-targetSlide[0].offsetLeft-targetSlide.width())*-1;}else{targetLeft=0;}}else{targetLeft=targetSlide[0]?targetSlide[0].offsetLeft*-1:0;}targetLeft+=(_.$list.width()-targetSlide.outerWidth())/2;}}return targetLeft;};Slick.prototype.getOption=Slick.prototype.slickGetOption=function(option){var _=this;return _.options[option];};Slick.prototype.getNavigableIndexes=function(){var _=this,breakPoint=0,counter=0,indexes=[],max;if(_.options.infinite===false){max=_.slideCount;}else{breakPoint=_.options.slidesToScroll*-1;counter=_.options.slidesToScroll*-1;max=_.slideCount*2;}while(breakPoint<max){indexes.push(breakPoint);breakPoint=counter+_.options.slidesToScroll;counter+=_.options.slidesToScroll<=_.options.slidesToShow?_.options.slidesToScroll:_.options.slidesToShow;}return indexes;};Slick.prototype.getSlick=function(){return this;};Slick.prototype.getSlideCount=function(){var _=this,slidesTraversed,swipedSlide,centerOffset;centerOffset=_.options.centerMode===true?_.slideWidth*Math.floor(_.options.slidesToShow/2):0;if(_.options.swipeToSlide===true){_.$slideTrack.find('.slick-slide').each(function(index,slide){if(slide.offsetLeft-centerOffset+$(slide).outerWidth()/2>_.swipeLeft*-1){swipedSlide=slide;return false;}});slidesTraversed=Math.abs($(swipedSlide).attr('data-slick-index')-_.currentSlide)||1;return slidesTraversed;}else{return _.options.slidesToScroll;}};Slick.prototype.goTo=Slick.prototype.slickGoTo=function(slide,dontAnimate){var _=this;_.changeSlide({data:{message:'index',index:parseInt(slide)}},dontAnimate);};Slick.prototype.init=function(creation){var _=this;if(!$(_.$slider).hasClass('slick-initialized')){$(_.$slider).addClass('slick-initialized');_.buildRows();_.buildOut();_.setProps();_.startLoad();_.loadSlider();_.initializeEvents();_.updateArrows();_.updateDots();_.checkResponsive(true);_.focusHandler();}if(creation){_.$slider.trigger('init',[_]);}if(_.options.accessibility===true){_.initADA();}if(_.options.autoplay){_.paused=false;_.autoPlay();}};Slick.prototype.initADA=function(){var _=this,numDotGroups=Math.ceil(_.slideCount/_.options.slidesToShow),tabControlIndexes=_.getNavigableIndexes().filter(function(val){return val>=0&&val<_.slideCount;});_.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({'aria-hidden':'true','tabindex':'-1'}).find('a, input, button, select').attr({'tabindex':'-1'});if(_.$dots!==null){_.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i){var slideControlIndex=tabControlIndexes.indexOf(i);$(this).attr({'role':'tabpanel','id':'slick-slide'+_.instanceUid+i,'tabindex':-1});if(slideControlIndex!==-1){var ariaButtonControl='slick-slide-control'+_.instanceUid+slideControlIndex;if($('#'+ariaButtonControl).length){$(this).attr({'aria-describedby':ariaButtonControl});}}});_.$dots.attr('role','tablist').find('li').each(function(i){var mappedSlideIndex=tabControlIndexes[i];$(this).attr({'role':'presentation'});$(this).find('button').first().attr({'role':'tab','id':'slick-slide-control'+_.instanceUid+i,'aria-controls':'slick-slide'+_.instanceUid+mappedSlideIndex,'aria-label':i+1+' of '+numDotGroups,'aria-selected':null,'tabindex':'-1'});}).eq(_.currentSlide).find('button').attr({'aria-selected':'true','tabindex':'0'}).end();}for(var i=_.currentSlide,max=i+_.options.slidesToShow;i<max;i++){if(_.options.focusOnChange){_.$slides.eq(i).attr({'tabindex':'0'});}else{_.$slides.eq(i).removeAttr('tabindex');}}_.activateADA();};Slick.prototype.initArrowEvents=function(){var _=this;if(_.options.arrows===true&&_.slideCount>_.options.slidesToShow){_.$prevArrow.off('click.slick').on('click.slick',{message:'previous'},_.changeSlide);_.$nextArrow.off('click.slick').on('click.slick',{message:'next'},_.changeSlide);if(_.options.accessibility===true){_.$prevArrow.on('keydown.slick',_.keyHandler);_.$nextArrow.on('keydown.slick',_.keyHandler);}}};Slick.prototype.initDotEvents=function(){var _=this;if(_.options.dots===true&&_.slideCount>_.options.slidesToShow){$('li',_.$dots).on('click.slick',{message:'index'},_.changeSlide);if(_.options.accessibility===true){_.$dots.on('keydown.slick',_.keyHandler);}}if(_.options.dots===true&&_.options.pauseOnDotsHover===true&&_.slideCount>_.options.slidesToShow){$('li',_.$dots).on('mouseenter.slick',$.proxy(_.interrupt,_,true)).on('mouseleave.slick',$.proxy(_.interrupt,_,false));}};Slick.prototype.initSlideEvents=function(){var _=this;if(_.options.pauseOnHover){_.$list.on('mouseenter.slick',$.proxy(_.interrupt,_,true));_.$list.on('mouseleave.slick',$.proxy(_.interrupt,_,false));}};Slick.prototype.initializeEvents=function(){var _=this;_.initArrowEvents();_.initDotEvents();_.initSlideEvents();_.$list.on('touchstart.slick mousedown.slick',{action:'start'},_.swipeHandler);_.$list.on('touchmove.slick mousemove.slick',{action:'move'},_.swipeHandler);_.$list.on('touchend.slick mouseup.slick',{action:'end'},_.swipeHandler);_.$list.on('touchcancel.slick mouseleave.slick',{action:'end'},_.swipeHandler);_.$list.on('click.slick',_.clickHandler);$(document).on(_.visibilityChange,$.proxy(_.visibility,_));if(_.options.accessibility===true){_.$list.on('keydown.slick',_.keyHandler);}if(_.options.focusOnSelect===true){$(_.$slideTrack).children().on('click.slick',_.selectHandler);}$(window).on('orientationchange.slick.slick-'+_.instanceUid,$.proxy(_.orientationChange,_));$(window).on('resize.slick.slick-'+_.instanceUid,$.proxy(_.resize,_));$('[draggable!=true]',_.$slideTrack).on('dragstart',_.preventDefault);$(window).on('load.slick.slick-'+_.instanceUid,_.setPosition);$(_.setPosition);};Slick.prototype.initUI=function(){var _=this;if(_.options.arrows===true&&_.slideCount>_.options.slidesToShow){_.$prevArrow.show();_.$nextArrow.show();}if(_.options.dots===true&&_.slideCount>_.options.slidesToShow){_.$dots.show();}};Slick.prototype.keyHandler=function(event){var _=this;//Dont slide if the cursor is inside the form fields and arrow keys are pressed
if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')){if(event.keyCode===37&&_.options.accessibility===true){_.changeSlide({data:{message:_.options.rtl===true?'next':'previous'}});}else if(event.keyCode===39&&_.options.accessibility===true){_.changeSlide({data:{message:_.options.rtl===true?'previous':'next'}});}}};Slick.prototype.lazyLoad=function(){var _=this,loadRange,cloneRange,rangeStart,rangeEnd;function loadImages(imagesScope){$('img[data-lazy]',imagesScope).each(function(){var image=$(this),imageSource=$(this).attr('data-lazy'),imageSrcSet=$(this).attr('data-srcset'),imageSizes=$(this).attr('data-sizes')||_.$slider.attr('data-sizes'),imageToLoad=document.createElement('img');imageToLoad.onload=function(){image.animate({opacity:0},100,function(){if(imageSrcSet){image.attr('srcset',imageSrcSet);if(imageSizes){image.attr('sizes',imageSizes);}}image.attr('src',imageSource).animate({opacity:1},200,function(){image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');});_.$slider.trigger('lazyLoaded',[_,image,imageSource]);});};imageToLoad.onerror=function(){image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');_.$slider.trigger('lazyLoadError',[_,image,imageSource]);};imageToLoad.src=imageSource;});}if(_.options.centerMode===true){if(_.options.infinite===true){rangeStart=_.currentSlide+(_.options.slidesToShow/2+1);rangeEnd=rangeStart+_.options.slidesToShow+2;}else{rangeStart=Math.max(0,_.currentSlide-(_.options.slidesToShow/2+1));rangeEnd=2+(_.options.slidesToShow/2+1)+_.currentSlide;}}else{rangeStart=_.options.infinite?_.options.slidesToShow+_.currentSlide:_.currentSlide;rangeEnd=Math.ceil(rangeStart+_.options.slidesToShow);if(_.options.fade===true){if(rangeStart>0)rangeStart--;if(rangeEnd<=_.slideCount)rangeEnd++;}}loadRange=_.$slider.find('.slick-slide').slice(rangeStart,rangeEnd);if(_.options.lazyLoad==='anticipated'){var prevSlide=rangeStart-1,nextSlide=rangeEnd,$slides=_.$slider.find('.slick-slide');for(var i=0;i<_.options.slidesToScroll;i++){if(prevSlide<0)prevSlide=_.slideCount-1;loadRange=loadRange.add($slides.eq(prevSlide));loadRange=loadRange.add($slides.eq(nextSlide));prevSlide--;nextSlide++;}}loadImages(loadRange);if(_.slideCount<=_.options.slidesToShow){cloneRange=_.$slider.find('.slick-slide');loadImages(cloneRange);}else if(_.currentSlide>=_.slideCount-_.options.slidesToShow){cloneRange=_.$slider.find('.slick-cloned').slice(0,_.options.slidesToShow);loadImages(cloneRange);}else if(_.currentSlide===0){cloneRange=_.$slider.find('.slick-cloned').slice(_.options.slidesToShow*-1);loadImages(cloneRange);}};Slick.prototype.loadSlider=function(){var _=this;_.setPosition();_.$slideTrack.css({opacity:1});_.$slider.removeClass('slick-loading');_.initUI();if(_.options.lazyLoad==='progressive'){_.progressiveLazyLoad();}};Slick.prototype.next=Slick.prototype.slickNext=function(){var _=this;_.changeSlide({data:{message:'next'}});};Slick.prototype.orientationChange=function(){var _=this;_.checkResponsive();_.setPosition();};Slick.prototype.pause=Slick.prototype.slickPause=function(){var _=this;_.autoPlayClear();_.paused=true;};Slick.prototype.play=Slick.prototype.slickPlay=function(){var _=this;_.autoPlay();_.options.autoplay=true;_.paused=false;_.focussed=false;_.interrupted=false;};Slick.prototype.postSlide=function(index){var _=this;if(!_.unslicked){_.$slider.trigger('afterChange',[_,index]);_.animating=false;if(_.slideCount>_.options.slidesToShow){_.setPosition();}_.swipeLeft=null;if(_.options.autoplay){_.autoPlay();}if(_.options.accessibility===true){_.initADA();if(_.options.focusOnChange){var $currentSlide=$(_.$slides.get(_.currentSlide));$currentSlide.attr('tabindex',0).focus();}}}};Slick.prototype.prev=Slick.prototype.slickPrev=function(){var _=this;_.changeSlide({data:{message:'previous'}});};Slick.prototype.preventDefault=function(event){event.preventDefault();};Slick.prototype.progressiveLazyLoad=function(tryCount){tryCount=tryCount||1;var _=this,$imgsToLoad=$('img[data-lazy]',_.$slider),image,imageSource,imageSrcSet,imageSizes,imageToLoad;if($imgsToLoad.length){image=$imgsToLoad.first();imageSource=image.attr('data-lazy');imageSrcSet=image.attr('data-srcset');imageSizes=image.attr('data-sizes')||_.$slider.attr('data-sizes');imageToLoad=document.createElement('img');imageToLoad.onload=function(){if(imageSrcSet){image.attr('srcset',imageSrcSet);if(imageSizes){image.attr('sizes',imageSizes);}}image.attr('src',imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');if(_.options.adaptiveHeight===true){_.setPosition();}_.$slider.trigger('lazyLoaded',[_,image,imageSource]);_.progressiveLazyLoad();};imageToLoad.onerror=function(){if(tryCount<3){/**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */setTimeout(function(){_.progressiveLazyLoad(tryCount+1);},500);}else{image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');_.$slider.trigger('lazyLoadError',[_,image,imageSource]);_.progressiveLazyLoad();}};imageToLoad.src=imageSource;}else{_.$slider.trigger('allImagesLoaded',[_]);}};Slick.prototype.refresh=function(initializing){var _=this,currentSlide,lastVisibleIndex;lastVisibleIndex=_.slideCount-_.options.slidesToShow;// in non-infinite sliders, we don't want to go past the
// last visible index.
if(!_.options.infinite&&_.currentSlide>lastVisibleIndex){_.currentSlide=lastVisibleIndex;}// if less slides than to show, go to start.
if(_.slideCount<=_.options.slidesToShow){_.currentSlide=0;}currentSlide=_.currentSlide;_.destroy(true);$.extend(_,_.initials,{currentSlide:currentSlide});_.init();if(!initializing){_.changeSlide({data:{message:'index',index:currentSlide}},false);}};Slick.prototype.registerBreakpoints=function(){var _=this,breakpoint,currentBreakpoint,l,responsiveSettings=_.options.responsive||null;if($.type(responsiveSettings)==='array'&&responsiveSettings.length){_.respondTo=_.options.respondTo||'window';for(breakpoint in responsiveSettings){l=_.breakpoints.length-1;if(responsiveSettings.hasOwnProperty(breakpoint)){currentBreakpoint=responsiveSettings[breakpoint].breakpoint;// loop through the breakpoints and cut out any existing
// ones with the same breakpoint number, we don't want dupes.
while(l>=0){if(_.breakpoints[l]&&_.breakpoints[l]===currentBreakpoint){_.breakpoints.splice(l,1);}l--;}_.breakpoints.push(currentBreakpoint);_.breakpointSettings[currentBreakpoint]=responsiveSettings[breakpoint].settings;}}_.breakpoints.sort(function(a,b){return _.options.mobileFirst?a-b:b-a;});}};Slick.prototype.reinit=function(){var _=this;_.$slides=_.$slideTrack.children(_.options.slide).addClass('slick-slide');_.slideCount=_.$slides.length;if(_.currentSlide>=_.slideCount&&_.currentSlide!==0){_.currentSlide=_.currentSlide-_.options.slidesToScroll;}if(_.slideCount<=_.options.slidesToShow){_.currentSlide=0;}_.registerBreakpoints();_.setProps();_.setupInfinite();_.buildArrows();_.updateArrows();_.initArrowEvents();_.buildDots();_.updateDots();_.initDotEvents();_.cleanUpSlideEvents();_.initSlideEvents();_.checkResponsive(false,true);if(_.options.focusOnSelect===true){$(_.$slideTrack).children().on('click.slick',_.selectHandler);}_.setSlideClasses(typeof _.currentSlide==='number'?_.currentSlide:0);_.setPosition();_.focusHandler();_.paused=!_.options.autoplay;_.autoPlay();_.$slider.trigger('reInit',[_]);};Slick.prototype.resize=function(){var _=this;if($(window).width()!==_.windowWidth){clearTimeout(_.windowDelay);_.windowDelay=window.setTimeout(function(){_.windowWidth=$(window).width();_.checkResponsive();if(!_.unslicked){_.setPosition();}},50);}};Slick.prototype.removeSlide=Slick.prototype.slickRemove=function(index,removeBefore,removeAll){var _=this;if(typeof index==='boolean'){removeBefore=index;index=removeBefore===true?0:_.slideCount-1;}else{index=removeBefore===true?--index:index;}if(_.slideCount<1||index<0||index>_.slideCount-1){return false;}_.unload();if(removeAll===true){_.$slideTrack.children().remove();}else{_.$slideTrack.children(this.options.slide).eq(index).remove();}_.$slides=_.$slideTrack.children(this.options.slide);_.$slideTrack.children(this.options.slide).detach();_.$slideTrack.append(_.$slides);_.$slidesCache=_.$slides;_.reinit();};Slick.prototype.setCSS=function(position){var _=this,positionProps={},x,y;if(_.options.rtl===true){position=-position;}x=_.positionProp=='left'?Math.ceil(position)+'px':'0px';y=_.positionProp=='top'?Math.ceil(position)+'px':'0px';positionProps[_.positionProp]=position;if(_.transformsEnabled===false){_.$slideTrack.css(positionProps);}else{positionProps={};if(_.cssTransitions===false){positionProps[_.animType]='translate('+x+', '+y+')';_.$slideTrack.css(positionProps);}else{positionProps[_.animType]='translate3d('+x+', '+y+', 0px)';_.$slideTrack.css(positionProps);}}};Slick.prototype.setDimensions=function(){var _=this;if(_.options.vertical===false){if(_.options.centerMode===true){_.$list.css({padding:'0px '+_.options.centerPadding});}}else{_.$list.height(_.$slides.first().outerHeight(true)*_.options.slidesToShow);if(_.options.centerMode===true){_.$list.css({padding:_.options.centerPadding+' 0px'});}}_.listWidth=_.$list.width();_.listHeight=_.$list.height();if(_.options.vertical===false&&_.options.variableWidth===false){_.slideWidth=Math.ceil(_.listWidth/_.options.slidesToShow);_.$slideTrack.width(Math.ceil(_.slideWidth*_.$slideTrack.children('.slick-slide').length));}else if(_.options.variableWidth===true){_.$slideTrack.width(5000*_.slideCount);}else{_.slideWidth=Math.ceil(_.listWidth);_.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true)*_.$slideTrack.children('.slick-slide').length));}var offset=_.$slides.first().outerWidth(true)-_.$slides.first().width();if(_.options.variableWidth===false)_.$slideTrack.children('.slick-slide').width(_.slideWidth-offset);};Slick.prototype.setFade=function(){var _=this,targetLeft;_.$slides.each(function(index,element){targetLeft=_.slideWidth*index*-1;if(_.options.rtl===true){$(element).css({position:'relative',right:targetLeft,top:0,zIndex:_.options.zIndex-2,opacity:0});}else{$(element).css({position:'relative',left:targetLeft,top:0,zIndex:_.options.zIndex-2,opacity:0});}});_.$slides.eq(_.currentSlide).css({zIndex:_.options.zIndex-1,opacity:1});};Slick.prototype.setHeight=function(){var _=this;if(_.options.slidesToShow===1&&_.options.adaptiveHeight===true&&_.options.vertical===false){var targetHeight=_.$slides.eq(_.currentSlide).outerHeight(true);_.$list.css('height',targetHeight);}};Slick.prototype.setOption=Slick.prototype.slickSetOption=function(){/**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */var _=this,l,item,option,value,refresh=false,type;if($.type(arguments[0])==='object'){option=arguments[0];refresh=arguments[1];type='multiple';}else if($.type(arguments[0])==='string'){option=arguments[0];value=arguments[1];refresh=arguments[2];if(arguments[0]==='responsive'&&$.type(arguments[1])==='array'){type='responsive';}else if(typeof arguments[1]!=='undefined'){type='single';}}if(type==='single'){_.options[option]=value;}else if(type==='multiple'){$.each(option,function(opt,val){_.options[opt]=val;});}else if(type==='responsive'){for(item in value){if($.type(_.options.responsive)!=='array'){_.options.responsive=[value[item]];}else{l=_.options.responsive.length-1;// loop through the responsive object and splice out duplicates.
while(l>=0){if(_.options.responsive[l].breakpoint===value[item].breakpoint){_.options.responsive.splice(l,1);}l--;}_.options.responsive.push(value[item]);}}}if(refresh){_.unload();_.reinit();}};Slick.prototype.setPosition=function(){var _=this;_.setDimensions();_.setHeight();if(_.options.fade===false){_.setCSS(_.getLeft(_.currentSlide));}else{_.setFade();}_.$slider.trigger('setPosition',[_]);};Slick.prototype.setProps=function(){var _=this,bodyStyle=document.body.style;_.positionProp=_.options.vertical===true?'top':'left';if(_.positionProp==='top'){_.$slider.addClass('slick-vertical');}else{_.$slider.removeClass('slick-vertical');}if(bodyStyle.WebkitTransition!==undefined||bodyStyle.MozTransition!==undefined||bodyStyle.msTransition!==undefined){if(_.options.useCSS===true){_.cssTransitions=true;}}if(_.options.fade){if(typeof _.options.zIndex==='number'){if(_.options.zIndex<3){_.options.zIndex=3;}}else{_.options.zIndex=_.defaults.zIndex;}}if(bodyStyle.OTransform!==undefined){_.animType='OTransform';_.transformType='-o-transform';_.transitionType='OTransition';if(bodyStyle.perspectiveProperty===undefined&&bodyStyle.webkitPerspective===undefined)_.animType=false;}if(bodyStyle.MozTransform!==undefined){_.animType='MozTransform';_.transformType='-moz-transform';_.transitionType='MozTransition';if(bodyStyle.perspectiveProperty===undefined&&bodyStyle.MozPerspective===undefined)_.animType=false;}if(bodyStyle.webkitTransform!==undefined){_.animType='webkitTransform';_.transformType='-webkit-transform';_.transitionType='webkitTransition';if(bodyStyle.perspectiveProperty===undefined&&bodyStyle.webkitPerspective===undefined)_.animType=false;}if(bodyStyle.msTransform!==undefined){_.animType='msTransform';_.transformType='-ms-transform';_.transitionType='msTransition';if(bodyStyle.msTransform===undefined)_.animType=false;}if(bodyStyle.transform!==undefined&&_.animType!==false){_.animType='transform';_.transformType='transform';_.transitionType='transition';}_.transformsEnabled=_.options.useTransform&&_.animType!==null&&_.animType!==false;};Slick.prototype.setSlideClasses=function(index){var _=this,centerOffset,allSlides,indexOffset,remainder;allSlides=_.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden','true');_.$slides.eq(index).addClass('slick-current');if(_.options.centerMode===true){var evenCoef=_.options.slidesToShow%2===0?1:0;centerOffset=Math.floor(_.options.slidesToShow/2);if(_.options.infinite===true){if(index>=centerOffset&&index<=_.slideCount-1-centerOffset){_.$slides.slice(index-centerOffset+evenCoef,index+centerOffset+1).addClass('slick-active').attr('aria-hidden','false');}else{indexOffset=_.options.slidesToShow+index;allSlides.slice(indexOffset-centerOffset+1+evenCoef,indexOffset+centerOffset+2).addClass('slick-active').attr('aria-hidden','false');}if(index===0){allSlides.eq(allSlides.length-1-_.options.slidesToShow).addClass('slick-center');}else if(index===_.slideCount-1){allSlides.eq(_.options.slidesToShow).addClass('slick-center');}}_.$slides.eq(index).addClass('slick-center');}else{if(index>=0&&index<=_.slideCount-_.options.slidesToShow){_.$slides.slice(index,index+_.options.slidesToShow).addClass('slick-active').attr('aria-hidden','false');}else if(allSlides.length<=_.options.slidesToShow){allSlides.addClass('slick-active').attr('aria-hidden','false');}else{remainder=_.slideCount%_.options.slidesToShow;indexOffset=_.options.infinite===true?_.options.slidesToShow+index:index;if(_.options.slidesToShow==_.options.slidesToScroll&&_.slideCount-index<_.options.slidesToShow){allSlides.slice(indexOffset-(_.options.slidesToShow-remainder),indexOffset+remainder).addClass('slick-active').attr('aria-hidden','false');}else{allSlides.slice(indexOffset,indexOffset+_.options.slidesToShow).addClass('slick-active').attr('aria-hidden','false');}}}if(_.options.lazyLoad==='ondemand'||_.options.lazyLoad==='anticipated'){_.lazyLoad();}};Slick.prototype.setupInfinite=function(){var _=this,i,slideIndex,infiniteCount;if(_.options.fade===true){_.options.centerMode=false;}if(_.options.infinite===true&&_.options.fade===false){slideIndex=null;if(_.slideCount>_.options.slidesToShow){if(_.options.centerMode===true){infiniteCount=_.options.slidesToShow+1;}else{infiniteCount=_.options.slidesToShow;}for(i=_.slideCount;i>_.slideCount-infiniteCount;i-=1){slideIndex=i-1;$(_.$slides[slideIndex]).clone(true).attr('id','').attr('data-slick-index',slideIndex-_.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');}for(i=0;i<infiniteCount+_.slideCount;i+=1){slideIndex=i;$(_.$slides[slideIndex]).clone(true).attr('id','').attr('data-slick-index',slideIndex+_.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');}_.$slideTrack.find('.slick-cloned').find('[id]').each(function(){$(this).attr('id','');});}}};Slick.prototype.interrupt=function(toggle){var _=this;if(!toggle){_.autoPlay();}_.interrupted=toggle;};Slick.prototype.selectHandler=function(event){var _=this;var targetElement=$(event.target).is('.slick-slide')?$(event.target):$(event.target).parents('.slick-slide');var index=parseInt(targetElement.attr('data-slick-index'));if(!index)index=0;if(_.slideCount<=_.options.slidesToShow){_.slideHandler(index,false,true);return;}_.slideHandler(index);};Slick.prototype.slideHandler=function(index,sync,dontAnimate){var targetSlide,animSlide,oldSlide,slideLeft,targetLeft=null,_=this,navTarget;sync=sync||false;if(_.animating===true&&_.options.waitForAnimate===true){return;}if(_.options.fade===true&&_.currentSlide===index){return;}if(sync===false){_.asNavFor(index);}targetSlide=index;targetLeft=_.getLeft(targetSlide);slideLeft=_.getLeft(_.currentSlide);_.currentLeft=_.swipeLeft===null?slideLeft:_.swipeLeft;if(_.options.infinite===false&&_.options.centerMode===false&&(index<0||index>_.getDotCount()*_.options.slidesToScroll)){if(_.options.fade===false){targetSlide=_.currentSlide;if(dontAnimate!==true&&_.slideCount>_.options.slidesToShow){_.animateSlide(slideLeft,function(){_.postSlide(targetSlide);});}else{_.postSlide(targetSlide);}}return;}else if(_.options.infinite===false&&_.options.centerMode===true&&(index<0||index>_.slideCount-_.options.slidesToScroll)){if(_.options.fade===false){targetSlide=_.currentSlide;if(dontAnimate!==true&&_.slideCount>_.options.slidesToShow){_.animateSlide(slideLeft,function(){_.postSlide(targetSlide);});}else{_.postSlide(targetSlide);}}return;}if(_.options.autoplay){clearInterval(_.autoPlayTimer);}if(targetSlide<0){if(_.slideCount%_.options.slidesToScroll!==0){animSlide=_.slideCount-_.slideCount%_.options.slidesToScroll;}else{animSlide=_.slideCount+targetSlide;}}else if(targetSlide>=_.slideCount){if(_.slideCount%_.options.slidesToScroll!==0){animSlide=0;}else{animSlide=targetSlide-_.slideCount;}}else{animSlide=targetSlide;}_.animating=true;_.$slider.trigger('beforeChange',[_,_.currentSlide,animSlide]);oldSlide=_.currentSlide;_.currentSlide=animSlide;_.setSlideClasses(_.currentSlide);if(_.options.asNavFor){navTarget=_.getNavTarget();navTarget=navTarget.slick('getSlick');if(navTarget.slideCount<=navTarget.options.slidesToShow){navTarget.setSlideClasses(_.currentSlide);}}_.updateDots();_.updateArrows();if(_.options.fade===true){if(dontAnimate!==true){_.fadeSlideOut(oldSlide);_.fadeSlide(animSlide,function(){_.postSlide(animSlide);});}else{_.postSlide(animSlide);}_.animateHeight();return;}if(dontAnimate!==true&&_.slideCount>_.options.slidesToShow){_.animateSlide(targetLeft,function(){_.postSlide(animSlide);});}else{_.postSlide(animSlide);}};Slick.prototype.startLoad=function(){var _=this;if(_.options.arrows===true&&_.slideCount>_.options.slidesToShow){_.$prevArrow.hide();_.$nextArrow.hide();}if(_.options.dots===true&&_.slideCount>_.options.slidesToShow){_.$dots.hide();}_.$slider.addClass('slick-loading');};Slick.prototype.swipeDirection=function(){var xDist,yDist,r,swipeAngle,_=this;xDist=_.touchObject.startX-_.touchObject.curX;yDist=_.touchObject.startY-_.touchObject.curY;r=Math.atan2(yDist,xDist);swipeAngle=Math.round(r*180/Math.PI);if(swipeAngle<0){swipeAngle=360-Math.abs(swipeAngle);}if(swipeAngle<=45&&swipeAngle>=0){return _.options.rtl===false?'left':'right';}if(swipeAngle<=360&&swipeAngle>=315){return _.options.rtl===false?'left':'right';}if(swipeAngle>=135&&swipeAngle<=225){return _.options.rtl===false?'right':'left';}if(_.options.verticalSwiping===true){if(swipeAngle>=35&&swipeAngle<=135){return'down';}else{return'up';}}return'vertical';};Slick.prototype.swipeEnd=function(event){var _=this,slideCount,direction;_.dragging=false;_.swiping=false;if(_.scrolling){_.scrolling=false;return false;}_.interrupted=false;_.shouldClick=_.touchObject.swipeLength>10?false:true;if(_.touchObject.curX===undefined){return false;}if(_.touchObject.edgeHit===true){_.$slider.trigger('edge',[_,_.swipeDirection()]);}if(_.touchObject.swipeLength>=_.touchObject.minSwipe){direction=_.swipeDirection();switch(direction){case'left':case'down':slideCount=_.options.swipeToSlide?_.checkNavigable(_.currentSlide+_.getSlideCount()):_.currentSlide+_.getSlideCount();_.currentDirection=0;break;case'right':case'up':slideCount=_.options.swipeToSlide?_.checkNavigable(_.currentSlide-_.getSlideCount()):_.currentSlide-_.getSlideCount();_.currentDirection=1;break;default:}if(direction!='vertical'){_.slideHandler(slideCount);_.touchObject={};_.$slider.trigger('swipe',[_,direction]);}}else{if(_.touchObject.startX!==_.touchObject.curX){_.slideHandler(_.currentSlide);_.touchObject={};}}};Slick.prototype.swipeHandler=function(event){var _=this;if(_.options.swipe===false||'ontouchend'in document&&_.options.swipe===false){return;}else if(_.options.draggable===false&&event.type.indexOf('mouse')!==-1){return;}_.touchObject.fingerCount=event.originalEvent&&event.originalEvent.touches!==undefined?event.originalEvent.touches.length:1;_.touchObject.minSwipe=_.listWidth/_.options.touchThreshold;if(_.options.verticalSwiping===true){_.touchObject.minSwipe=_.listHeight/_.options.touchThreshold;}switch(event.data.action){case'start':_.swipeStart(event);break;case'move':_.swipeMove(event);break;case'end':_.swipeEnd(event);break;}};Slick.prototype.swipeMove=function(event){var _=this,edgeWasHit=false,curLeft,swipeDirection,swipeLength,positionOffset,touches,verticalSwipeLength;touches=event.originalEvent!==undefined?event.originalEvent.touches:null;if(!_.dragging||_.scrolling||touches&&touches.length!==1){return false;}curLeft=_.getLeft(_.currentSlide);_.touchObject.curX=touches!==undefined?touches[0].pageX:event.clientX;_.touchObject.curY=touches!==undefined?touches[0].pageY:event.clientY;_.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(_.touchObject.curX-_.touchObject.startX,2)));verticalSwipeLength=Math.round(Math.sqrt(Math.pow(_.touchObject.curY-_.touchObject.startY,2)));if(!_.options.verticalSwiping&&!_.swiping&&verticalSwipeLength>4){_.scrolling=true;return false;}if(_.options.verticalSwiping===true){_.touchObject.swipeLength=verticalSwipeLength;}swipeDirection=_.swipeDirection();if(event.originalEvent!==undefined&&_.touchObject.swipeLength>4){_.swiping=true;event.preventDefault();}positionOffset=(_.options.rtl===false?1:-1)*(_.touchObject.curX>_.touchObject.startX?1:-1);if(_.options.verticalSwiping===true){positionOffset=_.touchObject.curY>_.touchObject.startY?1:-1;}swipeLength=_.touchObject.swipeLength;_.touchObject.edgeHit=false;if(_.options.infinite===false){if(_.currentSlide===0&&swipeDirection==='right'||_.currentSlide>=_.getDotCount()&&swipeDirection==='left'){swipeLength=_.touchObject.swipeLength*_.options.edgeFriction;_.touchObject.edgeHit=true;}}if(_.options.vertical===false){_.swipeLeft=curLeft+swipeLength*positionOffset;}else{_.swipeLeft=curLeft+swipeLength*(_.$list.height()/_.listWidth)*positionOffset;}if(_.options.verticalSwiping===true){_.swipeLeft=curLeft+swipeLength*positionOffset;}if(_.options.fade===true||_.options.touchMove===false){return false;}if(_.animating===true){_.swipeLeft=null;return false;}_.setCSS(_.swipeLeft);};Slick.prototype.swipeStart=function(event){var _=this,touches;_.interrupted=true;if(_.touchObject.fingerCount!==1||_.slideCount<=_.options.slidesToShow){_.touchObject={};return false;}if(event.originalEvent!==undefined&&event.originalEvent.touches!==undefined){touches=event.originalEvent.touches[0];}_.touchObject.startX=_.touchObject.curX=touches!==undefined?touches.pageX:event.clientX;_.touchObject.startY=_.touchObject.curY=touches!==undefined?touches.pageY:event.clientY;_.dragging=true;};Slick.prototype.unfilterSlides=Slick.prototype.slickUnfilter=function(){var _=this;if(_.$slidesCache!==null){_.unload();_.$slideTrack.children(this.options.slide).detach();_.$slidesCache.appendTo(_.$slideTrack);_.reinit();}};Slick.prototype.unload=function(){var _=this;$('.slick-cloned',_.$slider).remove();if(_.$dots){_.$dots.remove();}if(_.$prevArrow&&_.htmlExpr.test(_.options.prevArrow)){_.$prevArrow.remove();}if(_.$nextArrow&&_.htmlExpr.test(_.options.nextArrow)){_.$nextArrow.remove();}_.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden','true').css('width','');};Slick.prototype.unslick=function(fromBreakpoint){var _=this;_.$slider.trigger('unslick',[_,fromBreakpoint]);_.destroy();};Slick.prototype.updateArrows=function(){var _=this,centerOffset;centerOffset=Math.floor(_.options.slidesToShow/2);if(_.options.arrows===true&&_.slideCount>_.options.slidesToShow&&!_.options.infinite){_.$prevArrow.removeClass('slick-disabled').attr('aria-disabled','false');_.$nextArrow.removeClass('slick-disabled').attr('aria-disabled','false');if(_.currentSlide===0){_.$prevArrow.addClass('slick-disabled').attr('aria-disabled','true');_.$nextArrow.removeClass('slick-disabled').attr('aria-disabled','false');}else if(_.currentSlide>=_.slideCount-_.options.slidesToShow&&_.options.centerMode===false){_.$nextArrow.addClass('slick-disabled').attr('aria-disabled','true');_.$prevArrow.removeClass('slick-disabled').attr('aria-disabled','false');}else if(_.currentSlide>=_.slideCount-1&&_.options.centerMode===true){_.$nextArrow.addClass('slick-disabled').attr('aria-disabled','true');_.$prevArrow.removeClass('slick-disabled').attr('aria-disabled','false');}}};Slick.prototype.updateDots=function(){var _=this;if(_.$dots!==null){_.$dots.find('li').removeClass('slick-active').end();_.$dots.find('li').eq(Math.floor(_.currentSlide/_.options.slidesToScroll)).addClass('slick-active');}};Slick.prototype.visibility=function(){var _=this;if(_.options.autoplay){if(document[_.hidden]){_.interrupted=true;}else{_.interrupted=false;}}};$.fn.slick=function(){var _=this,opt=arguments[0],args=Array.prototype.slice.call(arguments,1),l=_.length,i,ret;for(i=0;i<l;i++){if(typeof opt=='object'||typeof opt=='undefined')_[i].slick=new Slick(_[i],opt);else ret=_[i].slick[opt].apply(_[i].slick,args);if(typeof ret!='undefined')return ret;}return _;};});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdl9zY3JvbGwuanMiLCJzY3JpcHRzLmpzIiwic3ZnX2NvbnZlcnQuanMiLCJsaWJzL2Nhcm91c2VsLmpzIiwibGlicy9zbGljay5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJkb2N1bWVudCIsInJlYWR5IiwiJCIsImNvbnRlbnRTZWN0aW9ucyIsIm5hdmlnYXRpb25JdGVtcyIsInVwZGF0ZU5hdmlnYXRpb24iLCJ3aW5kb3ciLCJvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzbW9vdGhTY3JvbGwiLCJoYXNoIiwidG9nZ2xlQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImVhY2giLCIkdGhpcyIsImFjdGl2ZVNlY3Rpb24iLCJhdHRyIiwiZGF0YSIsIm9mZnNldCIsInRvcCIsImhlaWdodCIsInNjcm9sbFRvcCIsImVxIiwiYWRkQ2xhc3MiLCJ0YXJnZXQiLCJhbmltYXRlIiwic2xpY2siLCJkb3RzIiwiYXJyb3dzIiwib2JqdCIsImxlbmd0aCIsIm93bENhcm91c2VsIiwiaXRlbXMiLCJsb29wIiwibmF2IiwiV09XIiwiaW5pdCIsInNjcm9sbCIsIiRpbWciLCJpbWdJRCIsImltZ0NsYXNzIiwiaW1nVVJMIiwiZ2V0IiwiJHN2ZyIsImZpbmQiLCJyZXBsYWNlV2l0aCIsInVuZGVmaW5lZCIsIk93bCIsImVsZW1lbnQiLCJvcHRpb25zIiwic2V0dGluZ3MiLCJleHRlbmQiLCJEZWZhdWx0cyIsIiRlbGVtZW50IiwiX2hhbmRsZXJzIiwiX3BsdWdpbnMiLCJfc3VwcmVzcyIsIl9jdXJyZW50IiwiX3NwZWVkIiwiX2Nvb3JkaW5hdGVzIiwiX2JyZWFrcG9pbnQiLCJfd2lkdGgiLCJfaXRlbXMiLCJfY2xvbmVzIiwiX21lcmdlcnMiLCJfd2lkdGhzIiwiX2ludmFsaWRhdGVkIiwiX3BpcGUiLCJfZHJhZyIsInRpbWUiLCJwb2ludGVyIiwic3RhZ2UiLCJzdGFydCIsImN1cnJlbnQiLCJkaXJlY3Rpb24iLCJfc3RhdGVzIiwidGFncyIsInByb3h5IiwiaSIsImhhbmRsZXIiLCJQbHVnaW5zIiwia2V5IiwicGx1Z2luIiwiY2hhckF0IiwidG9Mb3dlckNhc2UiLCJzbGljZSIsIldvcmtlcnMiLCJwcmlvcml0eSIsIndvcmtlciIsInB1c2giLCJmaWx0ZXIiLCJydW4iLCJzZXR1cCIsImluaXRpYWxpemUiLCJjZW50ZXIiLCJyZXdpbmQiLCJjaGVja1Zpc2liaWxpdHkiLCJtb3VzZURyYWciLCJ0b3VjaERyYWciLCJwdWxsRHJhZyIsImZyZWVEcmFnIiwibWFyZ2luIiwic3RhZ2VQYWRkaW5nIiwibWVyZ2UiLCJtZXJnZUZpdCIsImF1dG9XaWR0aCIsInN0YXJ0UG9zaXRpb24iLCJydGwiLCJzbWFydFNwZWVkIiwiZmx1aWRTcGVlZCIsImRyYWdFbmRTcGVlZCIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlUmVmcmVzaFJhdGUiLCJyZXNwb25zaXZlQmFzZUVsZW1lbnQiLCJmYWxsYmFja0Vhc2luZyIsInNsaWRlVHJhbnNpdGlvbiIsImluZm8iLCJuZXN0ZWRJdGVtU2VsZWN0b3IiLCJpdGVtRWxlbWVudCIsInN0YWdlRWxlbWVudCIsInJlZnJlc2hDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicnRsQ2xhc3MiLCJyZXNwb25zaXZlQ2xhc3MiLCJkcmFnQ2xhc3MiLCJpdGVtQ2xhc3MiLCJzdGFnZUNsYXNzIiwic3RhZ2VPdXRlckNsYXNzIiwiZ3JhYkNsYXNzIiwiV2lkdGgiLCJEZWZhdWx0IiwiSW5uZXIiLCJPdXRlciIsIlR5cGUiLCJFdmVudCIsIlN0YXRlIiwid2lkdGgiLCJjYWNoZSIsInJlbGF0aXZlIiwiJHN0YWdlIiwiY2hpbGRyZW4iLCJyZW1vdmUiLCJncmlkIiwiY3NzIiwidG9GaXhlZCIsIml0ZXJhdG9yIiwid2lkdGhzIiwiTWF0aCIsIm1pbiIsImNsb25lcyIsInZpZXciLCJtYXgiLCJzaXplIiwiY2VpbCIsInJlcGVhdCIsImFwcGVuZCIsInByZXBlbmQiLCJub3JtYWxpemUiLCJvdXRlckhUTUwiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsInByZXZpb3VzIiwiY29vcmRpbmF0ZXMiLCJwYWRkaW5nIiwiYWJzIiwicmVtb3ZlQXR0ciIsImluZGV4IiwibWluaW11bSIsIm1heGltdW0iLCJyZXNldCIsImJlZ2luIiwiZW5kIiwiaW5uZXIiLCJvdXRlciIsIm1hdGNoZXMiLCJuIiwib3AiLCJqb2luIiwicHJvdG90eXBlIiwiaW5pdGlhbGl6ZVN0YWdlIiwid3JhcCIsInBhcmVudCIsImluaXRpYWxpemVJdGVtcyIsIiRpdGVtcyIsIm1hcCIsIml0ZW0iLCJyZWZyZXNoIiwicmVwbGFjZSIsIm5vdCIsImlzVmlzaWJsZSIsImludmFsaWRhdGUiLCJlbnRlciIsInRyaWdnZXIiLCJpcyIsImltZ3MiLCJuZXN0ZWRTZWxlY3RvciIsInByZWxvYWRBdXRvV2lkdGhJbWFnZXMiLCJyZWdpc3RlckV2ZW50SGFuZGxlcnMiLCJsZWF2ZSIsInZpZXdwb3J0Iiwib3ZlcndyaXRlcyIsIm1hdGNoIiwiYnJlYWtwb2ludCIsIk51bWJlciIsIlJlZ0V4cCIsInByb3BlcnR5IiwibmFtZSIsInZhbHVlIiwib3B0aW9uc0xvZ2ljIiwicHJlcGFyZSIsImNvbnRlbnQiLCJ1cGRhdGUiLCJwIiwiYWxsIiwiZ3JlcCIsImRpbWVuc2lvbiIsIm9uVGhyb3R0bGVkUmVzaXplIiwiY2xlYXJUaW1lb3V0IiwicmVzaXplVGltZXIiLCJzZXRUaW1lb3V0Iiwib25SZXNpemUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJzdXBwb3J0IiwidHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwid2hpY2giLCJ0cmFuc2Zvcm0iLCJzcGxpdCIsIngiLCJ5IiwicG9zaXRpb24iLCJsZWZ0Iiwic3RvcCIsInR5cGUiLCJzcGVlZCIsIkRhdGUiLCJnZXRUaW1lIiwib25lIiwiZGVsdGEiLCJkaWZmZXJlbmNlIiwib25EcmFnTW92ZSIsInB1bGwiLCJvZmYiLCJjbG9zZXN0IiwiY29vcmRpbmF0ZSIsInRyYW5zZm9ybTNkIiwic3RhdGUiLCJwYXJ0IiwidiIsInN1cHByZXNzIiwicmVsZWFzZSIsIm0iLCJpc051bWVyaWMiLCJyZWNpcHJvY2FsSXRlbXNXaWR0aCIsImVsZW1lbnRXaWR0aCIsIm1lcmdlcnMiLCJvZGQiLCJldmVuIiwibXVsdGlwbGllciIsIm5ld1Bvc2l0aW9uIiwiZHVyYXRpb24iLCJmcm9tIiwidG8iLCJmYWN0b3IiLCJyZXZlcnQiLCJkaXN0YW5jZSIsIm5leHQiLCJwcmV2Iiwic3RvcFByb3BhZ2F0aW9uIiwic3JjRWxlbWVudCIsIm9yaWdpbmFsVGFyZ2V0IiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiY29uc29sZSIsIndhcm4iLCJlbXB0eSIsIm5vZGVUeXBlIiwiYWRkQmFjayIsImFkZCIsImFmdGVyIiwiYmVmb3JlIiwic3BsaWNlIiwiaW1hZ2VzIiwiSW1hZ2UiLCJlIiwic3JjIiwiZGVzdHJveSIsInVud3JhcCIsImNvbnRlbnRzIiwicmVtb3ZlRGF0YSIsImEiLCJvIiwiYiIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIm5hbWVzcGFjZSIsInN0YXR1cyIsImNvdW50IiwiY2FtZWxDYXNlIiwicmVsYXRlZFRhcmdldCIsIm9uVHJpZ2dlciIsInJlZ2lzdGVyIiwiY2FsbCIsImNvbmNhdCIsIm9iamVjdCIsInNwZWNpYWwiLCJvd2wiLCJfZGVmYXVsdCIsImFwcGx5IiwiaW5kZXhPZiIsImFyZ3VtZW50cyIsInRhZyIsImluQXJyYXkiLCJldmVudHMiLCJyZXN1bHQiLCJvcmlnaW5hbEV2ZW50IiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImNsaWVudFgiLCJjbGllbnRZIiwibnVtYmVyIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiZmlyc3QiLCJzZWNvbmQiLCJmbiIsIm9wdGlvbiIsImFyZ3MiLCJBcnJheSIsIkNvbnN0cnVjdG9yIiwiWmVwdG8iLCJBdXRvUmVmcmVzaCIsImNhcm91c2VsIiwiX2NvcmUiLCJfaW50ZXJ2YWwiLCJfdmlzaWJsZSIsImF1dG9SZWZyZXNoIiwid2F0Y2giLCJhdXRvUmVmcmVzaEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkxhenkiLCJfbG9hZGVkIiwibGF6eUxvYWQiLCJsb2FkIiwibGF6eUxvYWRFYWdlciIsIiRpdGVtIiwiJGVsZW1lbnRzIiwiaW1hZ2UiLCJ1cmwiLCJkZXZpY2VQaXhlbFJhdGlvIiwib25sb2FkIiwiaGFuZGxlcnMiLCJBdXRvSGVpZ2h0IiwiX3ByZXZpb3VzSGVpZ2h0IiwiYXV0b0hlaWdodCIsIl9pbnRlcnZhbElkIiwicmVmVGhpcyIsInJlc2l6ZSIsImF1dG9IZWlnaHRDbGFzcyIsImxhenlMb2FkRW5hYmxlZCIsInZpc2libGUiLCJ0b0FycmF5IiwiaGVpZ2h0cyIsIm1heGhlaWdodCIsIlZpZGVvIiwiX3ZpZGVvcyIsIl9wbGF5aW5nIiwidmlkZW8iLCJpc0luRnVsbFNjcmVlbiIsImZldGNoIiwicGxheSIsInZpZGVvSGVpZ2h0IiwidmlkZW9XaWR0aCIsImlkIiwiRXJyb3IiLCJ0aHVtYm5haWwiLCJ0bkxpbmsiLCJpY29uIiwicGF0aCIsImRpbWVuc2lvbnMiLCJjdXN0b21UbiIsInNyY1R5cGUiLCJsYXp5Q2xhc3MiLCJjcmVhdGUiLCJhamF4IiwianNvbnAiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0aHVtYm5haWxfbGFyZ2UiLCJmcmFtZWdyYWJfdXJsIiwiaHRtbCIsImlmcmFtZSIsImluc2VydEFmdGVyIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsU2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwiaGFzQ2xhc3MiLCJBbmltYXRlIiwic2NvcGUiLCJjb3JlIiwic3dhcHBpbmciLCJhbmltYXRlT3V0IiwiYW5pbWF0ZUluIiwic3dhcCIsImFuaW1hdGlvbiIsImNsZWFyIiwiaW5jb21pbmciLCJvdXRnb2luZyIsIkF1dG9wbGF5IiwiX2NhbGwiLCJfdGltZSIsIl90aW1lb3V0IiwiX3BhdXNlZCIsImF1dG9wbGF5IiwidCIsInMiLCJhdXRvcGxheUhvdmVyUGF1c2UiLCJwYXVzZSIsImF1dG9wbGF5VGltZW91dCIsImF1dG9wbGF5U3BlZWQiLCJfbmV4dCIsInJvdW5kIiwicmVhZCIsImhpZGRlbiIsInRpbWVvdXQiLCJlbGFwc2VkIiwiTmF2aWdhdGlvbiIsIl9pbml0aWFsaXplZCIsIl9wYWdlcyIsIl9jb250cm9scyIsIl90ZW1wbGF0ZXMiLCJfb3ZlcnJpZGVzIiwiZG90c0RhdGEiLCJkb3RDbGFzcyIsInBvcCIsImRyYXciLCJuYXZUZXh0IiwibmF2U3BlZWQiLCJuYXZFbGVtZW50IiwibmF2Q29udGFpbmVyIiwibmF2Q29udGFpbmVyQ2xhc3MiLCJuYXZDbGFzcyIsInNsaWRlQnkiLCJkb3RzQ2xhc3MiLCJkb3RzRWFjaCIsImRvdHNTcGVlZCIsImRvdHNDb250YWluZXIiLCJvdmVycmlkZSIsIiRyZWxhdGl2ZSIsIiRwcmV2aW91cyIsIiRuZXh0IiwicHJvcCIsIiRhYnNvbHV0ZSIsImNvbnRyb2wiLCJvdmVyaWRlcyIsImoiLCJrIiwibG93ZXIiLCJ1cHBlciIsImRpc2FibGVkIiwicGFnZSIsImdldFBvc2l0aW9uIiwic3VjY2Vzc29yIiwic3RhbmRhcmQiLCJIYXNoIiwiX2hhc2hlcyIsImxvY2F0aW9uIiwic3Vic3RyaW5nIiwiVVJMaGFzaExpc3RlbmVyIiwic3R5bGUiLCJwcmVmaXhlcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJXZWJraXRBbmltYXRpb24iLCJNb3pBbmltYXRpb24iLCJPQW5pbWF0aW9uIiwidGVzdHMiLCJjc3N0cmFuc2Zvcm1zIiwidGVzdCIsImNzc3RyYW5zZm9ybXMzZCIsImNzc3RyYW5zaXRpb25zIiwiY3NzYW5pbWF0aW9ucyIsInByZWZpeGVkIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJTbGljayIsImluc3RhbmNlVWlkIiwiXyIsImRhdGFTZXR0aW5ncyIsImRlZmF1bHRzIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwidGV4dCIsImRyYWdnYWJsZSIsImVhc2luZyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicm93cyIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJzd2lwZSIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJ6SW5kZXgiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImRyYWdnaW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2Nyb2xsaW5nIiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsIiRzbGlkZXMiLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCJzd2lwaW5nIiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBhdXNlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJvcmlnaW5hbFNldHRpbmdzIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwiYXV0b1BsYXkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNoYW5nZVNsaWRlIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwibWFya3VwIiwiYWRkQmVmb3JlIiwidW5sb2FkIiwiaW5zZXJ0QmVmb3JlIiwiZGV0YWNoIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImNhbGxiYWNrIiwiYW5pbVByb3BzIiwiYW5pbVN0YXJ0Iiwic3RlcCIsIm5vdyIsImNvbXBsZXRlIiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGlkZUhhbmRsZXIiLCJzbGlkZVRvIiwiYnVpbGRBcnJvd3MiLCJidWlsZERvdHMiLCJkb3QiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwid3JhcEFsbCIsInNldHVwSW5maW5pdGUiLCJ1cGRhdGVEb3RzIiwic2V0U2xpZGVDbGFzc2VzIiwiYnVpbGRSb3dzIiwiYyIsIm5ld1NsaWRlcyIsIm51bU9mU2xpZGVzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJyb3ciLCJhcHBlbmRDaGlsZCIsImNoZWNrUmVzcG9uc2l2ZSIsImluaXRpYWwiLCJmb3JjZVVwZGF0ZSIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJoYXNPd25Qcm9wZXJ0eSIsInVuc2xpY2siLCJkb250QW5pbWF0ZSIsIiR0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiaW5kZXhPZmZzZXQiLCJ1bmV2ZW5PZmZzZXQiLCJtZXNzYWdlIiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwidmlzaWJpbGl0eSIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwiY2xlYW5VcFJvd3MiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJmYWRlU2xpZGUiLCJzbGlkZUluZGV4Iiwib3BhY2l0eSIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInZlcnRpY2FsT2Zmc2V0IiwidGFyZ2V0U2xpZGUiLCJjb2VmIiwiZmxvb3IiLCJvZmZzZXRMZWZ0Iiwib3V0ZXJXaWR0aCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiaW5kZXhlcyIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInNsaWRlc1RyYXZlcnNlZCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0IiwiZ29UbyIsInNsaWNrR29UbyIsInBhcnNlSW50IiwiY3JlYXRpb24iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsIm51bURvdEdyb3VwcyIsInRhYkNvbnRyb2xJbmRleGVzIiwidmFsIiwic2xpZGVDb250cm9sSW5kZXgiLCJhcmlhQnV0dG9uQ29udHJvbCIsIm1hcHBlZFNsaWRlSW5kZXgiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwic2hvdyIsInRhZ05hbWUiLCJrZXlDb2RlIiwibG9hZFJhbmdlIiwiY2xvbmVSYW5nZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiaW1hZ2VUb0xvYWQiLCJvbmVycm9yIiwicHJldlNsaWRlIiwibmV4dFNsaWRlIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInNsaWNrUGF1c2UiLCJzbGlja1BsYXkiLCJwb3N0U2xpZGUiLCIkY3VycmVudFNsaWRlIiwiZm9jdXMiLCJzbGlja1ByZXYiLCJ0cnlDb3VudCIsIiRpbWdzVG9Mb2FkIiwiaW5pdGlhbGl6aW5nIiwibGFzdFZpc2libGVJbmRleCIsImN1cnJlbnRCcmVha3BvaW50IiwibCIsInJlc3BvbnNpdmVTZXR0aW5ncyIsInNvcnQiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJwb3NpdGlvblByb3BzIiwic2V0RGltZW5zaW9ucyIsInNldEZhZGUiLCJyaWdodCIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwib3B0IiwiYm9keVN0eWxlIiwiYm9keSIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pUcmFuc2Zvcm0iLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiYWxsU2xpZGVzIiwicmVtYWluZGVyIiwiZXZlbkNvZWYiLCJpbmZpbml0ZUNvdW50IiwiY2xvbmUiLCJ0b2dnbGUiLCJ0YXJnZXRFbGVtZW50IiwicGFyZW50cyIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsImhpZGUiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJyIiwic3dpcGVBbmdsZSIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJQSSIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJlZGdlV2FzSGl0IiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0IiwidmVydGljYWxTd2lwZUxlbmd0aCIsInNxcnQiLCJwb3ciLCJ1bmZpbHRlclNsaWRlcyIsInNsaWNrVW5maWx0ZXIiLCJmcm9tQnJlYWtwb2ludCIsInJldCJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsUUFBRCxDQUFOLENBQWlCQyxLQUFqQixDQUF1QixTQUFTQyxDQUFULENBQVcsQ0FDakMsR0FBSUMsQ0FBQUEsZUFBZSxDQUFHRCxDQUFDLENBQUMsYUFBRCxDQUF2QixD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R0FBSWllLENBQUFBLENBQUMsQ0FBRyxJQUFSLENBQ0k4USxHQUFHLENBQUczYyxTQUFTLENBQUMsQ0FBRCxDQURuQixDQUVJbUIsSUFBSSxDQUFHQyxLQUFLLENBQUMvSixTQUFOLENBQWdCOUYsS0FBaEIsQ0FBc0JpTyxJQUF0QixDQUEyQlEsU0FBM0IsQ0FBc0MsQ0FBdEMsQ0FGWCxDQUdJMmIsQ0FBQyxDQUFHOVAsQ0FBQyxDQUFDN2QsTUFIVixDQUlJZ0QsQ0FKSixDQUtJK3VCLEdBTEosQ0FNQSxJQUFLL3VCLENBQUMsQ0FBRyxDQUFULENBQVlBLENBQUMsQ0FBRzJxQixDQUFoQixDQUFtQjNxQixDQUFDLEVBQXBCLENBQXdCLENBQ3BCLEdBQUksTUFBTzJyQixDQUFBQSxHQUFQLEVBQWMsUUFBZCxFQUEwQixNQUFPQSxDQUFBQSxHQUFQLEVBQWMsV0FBNUMsQ0FDSTlRLENBQUMsQ0FBQzdhLENBQUQsQ0FBRCxDQUFLcEQsS0FBTCxDQUFhLEdBQUkrZCxDQUFBQSxLQUFKLENBQVVFLENBQUMsQ0FBQzdhLENBQUQsQ0FBWCxDQUFnQjJyQixHQUFoQixDQUFiLENBREosSUFHSW9ELENBQUFBLEdBQUcsQ0FBR2xVLENBQUMsQ0FBQzdhLENBQUQsQ0FBRCxDQUFLcEQsS0FBTCxDQUFXK3VCLEdBQVgsRUFBZ0I3YyxLQUFoQixDQUFzQitMLENBQUMsQ0FBQzdhLENBQUQsQ0FBRCxDQUFLcEQsS0FBM0IsQ0FBa0N1VCxJQUFsQyxDQUFOLENBQ0osR0FBSSxNQUFPNGUsQ0FBQUEsR0FBUCxFQUFjLFdBQWxCLENBQStCLE1BQU9BLENBQUFBLEdBQVAsQ0FDbEMsQ0FDRCxNQUFPbFUsQ0FBQUEsQ0FBUCxDQUNILENBZkQsQ0FpQkgsQ0FqN0ZDLENBQUQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oJCl7XHJcblx0dmFyIGNvbnRlbnRTZWN0aW9ucyA9ICQoJy5jZC1zZWN0aW9uJyksXHJcblx0XHRuYXZpZ2F0aW9uSXRlbXMgPSAkKCcjY2QtdmVydGljYWwtbmF2IGEnKTtcclxuXHJcblx0dXBkYXRlTmF2aWdhdGlvbigpO1xyXG5cdCQod2luZG93KS5vbignc2Nyb2xsJywgZnVuY3Rpb24oKXtcclxuXHRcdHVwZGF0ZU5hdmlnYXRpb24oKTtcclxuXHR9KTtcclxuXHJcblx0Ly9zbW9vdGggc2Nyb2xsIHRvIHRoZSBzZWN0aW9uXHJcblx0bmF2aWdhdGlvbkl0ZW1zLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHNtb290aFNjcm9sbCgkKHRoaXMuaGFzaCkpO1xyXG4gICAgfSk7XHJcbiAgICAvL3Ntb290aCBzY3JvbGwgdG8gc2Vjb25kIHNlY3Rpb25cclxuICAgICQoJy5jZC1zY3JvbGwtZG93bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHNtb290aFNjcm9sbCgkKHRoaXMuaGFzaCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9vcGVuLWNsb3NlIG5hdmlnYXRpb24gb24gdG91Y2ggZGV2aWNlc1xyXG4gICAgJCgnLnRvdWNoIC5jZC1uYXYtdHJpZ2dlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICBcdCQoJy50b3VjaCAjY2QtdmVydGljYWwtbmF2JykudG9nZ2xlQ2xhc3MoJ29wZW4nKTtcclxuXHJcbiAgICB9KTtcclxuICAgIC8vY2xvc2UgbmF2aWdhdGlvbiBvbiB0b3VjaCBkZXZpY2VzIHdoZW4gc2VsZWN0aW4gYW4gZWxlbW50IGZyb20gdGhlIGxpc3RcclxuICAgICQoJy50b3VjaCAjY2QtdmVydGljYWwtbmF2IGEnKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xyXG4gICAgXHQkKCcudG91Y2ggI2NkLXZlcnRpY2FsLW5hdicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XHJcbiAgICB9KTtcclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbigpIHtcclxuXHRcdGNvbnRlbnRTZWN0aW9ucy5lYWNoKGZ1bmN0aW9uKCl7XHJcblx0XHRcdCR0aGlzID0gJCh0aGlzKTtcclxuXHRcdFx0dmFyIGFjdGl2ZVNlY3Rpb24gPSAkKCcjY2QtdmVydGljYWwtbmF2IGFbaHJlZj1cIiMnKyR0aGlzLmF0dHIoJ2lkJykrJ1wiXScpLmRhdGEoJ251bWJlcicpIC0gMTtcclxuXHRcdFx0aWYgKCAoICR0aGlzLm9mZnNldCgpLnRvcCAtICQod2luZG93KS5oZWlnaHQoKS8yIDwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpICkgJiYgKCAkdGhpcy5vZmZzZXQoKS50b3AgKyAkdGhpcy5oZWlnaHQoKSAtICQod2luZG93KS5oZWlnaHQoKS8yID4gJCh3aW5kb3cpLnNjcm9sbFRvcCgpICkgKSB7XHJcblx0XHRcdFx0bmF2aWdhdGlvbkl0ZW1zLmVxKGFjdGl2ZVNlY3Rpb24pLmFkZENsYXNzKCdpcy1zZWxlY3RlZCcpO1xyXG5cdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0bmF2aWdhdGlvbkl0ZW1zLmVxKGFjdGl2ZVNlY3Rpb24pLnJlbW92ZUNsYXNzKCdpcy1zZWxlY3RlZCcpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNtb290aFNjcm9sbCh0YXJnZXQpIHtcclxuICAgICAgICAkKCdib2R5LGh0bWwnKS5hbmltYXRlKFxyXG4gICAgICAgIFx0eydzY3JvbGxUb3AnOnRhcmdldC5vZmZzZXQoKS50b3B9LFxyXG4gICAgICAgIFx0NjAwXHJcbiAgICAgICAgKTtcclxuXHR9XHJcbn0pO1xyXG4iLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xyXG4gICQoJy5zbGlkZXInKS5zbGljayh7XHJcbiAgZG90czogdHJ1ZSxcclxuICBhcnJvd3M6IGZhbHNlXHJcbiAgfSk7XHJcbiAkKGZ1bmN0aW9uICgpIHtcclxuICAgdmFyIG9ianQgPSAkKFwiZGl2LnBlcnNvblwiKS5sZW5ndGg7IC8vINCh0YfQuNGC0LDQtdC8INC60L7Qu9C40YfQtdGB0YLQstC+INGN0LvQtdC80LXQvdGC0L7QsiDRgSBjbGFzcz1cImJsb2NrXCJcclxuICAgaWYgKG9ianQgPiAzKSB7XHJcbiAgICAgJChcIi5vd2wtY2Fyb3VzZWxcIikub3dsQ2Fyb3VzZWwoe1xyXG4gICAgICAgICBpdGVtczogMyxcclxuICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgbmF2OiB0cnVlLFxyXG4gICAgICAgICBkb3RzOiBmYWxzZVxyXG4gICAgIH0pO1xyXG4gICB9XHJcbiB9KTtcclxubmV3IFdPVygpLmluaXQoKTtcclxuJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpIHtcclxuXHJcbiAgICBpZiAoJCh0aGlzKS5zY3JvbGxUb3AoKSA+IDEpe1xyXG5cclxuICAgICAgICAkKCdoZWFkZXInKS5hZGRDbGFzcyhcInN0aWNreVwiKTtcclxuXHJcbiAgICB9ICBlbHNle1xyXG5cclxuICAgICAgICAkKCdoZWFkZXInKS5yZW1vdmVDbGFzcyhcInN0aWNreVwiKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG59KTtcclxuIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxuXHJcbiAgLypcclxuXHJcbiAgICogUmVwbGFjZSBhbGwgU1ZHIGltYWdlcyB3aXRoIGlubGluZSBTVkdcclxuXHJcbiAgICovXHJcblxyXG4gIGpRdWVyeSgnaW1nLnN2ZycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgdmFyICRpbWcgPSBqUXVlcnkodGhpcyk7XHJcblxyXG4gICB2YXIgaW1nSUQgPSAkaW1nLmF0dHIoJ2lkJyk7XHJcblxyXG4gICB2YXIgaW1nQ2xhc3MgPSAkaW1nLmF0dHIoJ2NsYXNzJyk7XHJcblxyXG4gICB2YXIgaW1nVVJMID0gJGltZy5hdHRyKCdzcmMnKTtcclxuXHJcblxyXG5cclxuICAgalF1ZXJ5LmdldChpbWdVUkwsIGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAvLyBHZXQgdGhlIFNWRyB0YWcsIGlnbm9yZSB0aGUgcmVzdFxyXG5cclxuICAgdmFyICRzdmcgPSBqUXVlcnkoZGF0YSkuZmluZCgnc3ZnJyk7XHJcblxyXG5cclxuXHJcbiAgIC8vIEFkZCByZXBsYWNlZCBpbWFnZSdzIElEIHRvIHRoZSBuZXcgU1ZHXHJcblxyXG4gICBpZiAodHlwZW9mIGltZ0lEICE9PSAndW5kZWZpbmVkJykge1xyXG5cclxuICAgJHN2ZyA9ICRzdmcuYXR0cignaWQnLCBpbWdJRCk7XHJcblxyXG4gICB9XHJcblxyXG4gICAvLyBBZGQgcmVwbGFjZWQgaW1hZ2UncyBjbGFzc2VzIHRvIHRoZSBuZXcgU1ZHXHJcblxyXG4gICBpZiAodHlwZW9mIGltZ0NsYXNzICE9PSAndW5kZWZpbmVkJykge1xyXG5cclxuICAgJHN2ZyA9ICRzdmcuYXR0cignY2xhc3MnLCBpbWdDbGFzcyArICcgcmVwbGFjZWQtc3ZnJyk7XHJcblxyXG4gICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAvLyBSZXBsYWNlIGltYWdlIHdpdGggbmV3IFNWR1xyXG5cclxuICAgJGltZy5yZXBsYWNlV2l0aCgkc3ZnKTtcclxuXHJcbiAgIH0sICd4bWwnKTtcclxuXHJcbiAgfSk7XHJcbn0pO1xyXG4iLCIvKipcclxuICogT3dsIENhcm91c2VsIHYyLjMuNFxyXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE4IERhdmlkIERldXRzY2hcclxuICogTGljZW5zZWQgdW5kZXI6IFNFRSBMSUNFTlNFIElOIGh0dHBzOi8vZ2l0aHViLmNvbS9Pd2xDYXJvdXNlbDIvT3dsQ2Fyb3VzZWwyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcclxuICovXHJcbi8qKlxyXG4gKiBPd2wgY2Fyb3VzZWxcclxuICogQHZlcnNpb24gMi4zLjRcclxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKiBAdG9kbyBMYXp5IExvYWQgSWNvblxyXG4gKiBAdG9kbyBwcmV2ZW50IGFuaW1hdGlvbmVuZCBidWJsaW5nXHJcbiAqIEB0b2RvIGl0ZW1zU2NhbGVVcFxyXG4gKiBAdG9kbyBUZXN0IFplcHRvXHJcbiAqIEB0b2RvIHN0YWdlUGFkZGluZyBjYWxjdWxhdGUgd3JvbmcgYWN0aXZlIGNsYXNzZXNcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBjYXJvdXNlbC5cclxuXHQgKiBAY2xhc3MgVGhlIE93bCBDYXJvdXNlbC5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudHxqUXVlcnl9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBjcmVhdGUgdGhlIGNhcm91c2VsIGZvci5cclxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gVGhlIG9wdGlvbnNcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBPd2woZWxlbWVudCwgb3B0aW9ucykge1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBzZXR0aW5ncyBmb3IgdGhlIGNhcm91c2VsLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLnNldHRpbmdzID0gbnVsbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnQgb3B0aW9ucyBzZXQgYnkgdGhlIGNhbGxlciBpbmNsdWRpbmcgZGVmYXVsdHMuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKi9cclxuXHRcdHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBPd2wuRGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUGx1Z2luIGVsZW1lbnQuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUHJveGllZCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZXMgdG8gdGhlIHJ1bm5pbmcgcGx1Z2lucyBvZiB0aGlzIGNhcm91c2VsLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9wbHVnaW5zID0ge307XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50bHkgc3VwcHJlc3NlZCBldmVudHMgdG8gcHJldmVudCB0aGVtIGZyb20gYmVpbmcgcmV0cmlnZ2VyZWQuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3N1cHJlc3MgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFic29sdXRlIGN1cnJlbnQgcG9zaXRpb24uXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2N1cnJlbnQgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fc3BlZWQgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ29vcmRpbmF0ZXMgb2YgYWxsIGl0ZW1zIGluIHBpeGVsLlxyXG5cdFx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZW1iZXIgaXMgbWlzc2xlYWRpbmcuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2Nvb3JkaW5hdGVzID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IGJyZWFrcG9pbnQuXHJcblx0XHQgKiBAdG9kbyBSZWFsIG1lZGlhIHF1ZXJpZXMgd291bGQgYmUgbmljZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fYnJlYWtwb2ludCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IHdpZHRoIG9mIHRoZSBwbHVnaW4gZWxlbWVudC5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fd2lkdGggPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsIHJlYWwgaXRlbXMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2l0ZW1zID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgY2xvbmVkIGl0ZW1zLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jbG9uZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE1lcmdlIHZhbHVlcyBvZiBhbGwgaXRlbXMuXHJcblx0XHQgKiBAdG9kbyBNYXliZSB0aGlzIGNvdWxkIGJlIHBhcnQgb2YgYSBwbHVnaW4uXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX21lcmdlcnMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFdpZHRocyBvZiBhbGwgaXRlbXMuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3dpZHRocyA9IFtdO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW52YWxpZGF0ZWQgcGFydHMgd2l0aGluIHRoZSB1cGRhdGUgcHJvY2Vzcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faW52YWxpZGF0ZWQgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE9yZGVyZWQgbGlzdCBvZiB3b3JrZXJzIGZvciB0aGUgdXBkYXRlIHByb2Nlc3MuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3BpcGUgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnQgc3RhdGUgaW5mb3JtYXRpb24gZm9yIHRoZSBkcmFnIG9wZXJhdGlvbi5cclxuXHRcdCAqIEB0b2RvICMyNjFcclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fZHJhZyA9IHtcclxuXHRcdFx0dGltZTogbnVsbCxcclxuXHRcdFx0dGFyZ2V0OiBudWxsLFxyXG5cdFx0XHRwb2ludGVyOiBudWxsLFxyXG5cdFx0XHRzdGFnZToge1xyXG5cdFx0XHRcdHN0YXJ0OiBudWxsLFxyXG5cdFx0XHRcdGN1cnJlbnQ6IG51bGxcclxuXHRcdFx0fSxcclxuXHRcdFx0ZGlyZWN0aW9uOiBudWxsXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBzdGF0ZSBpbmZvcm1hdGlvbiBhbmQgdGhlaXIgdGFncy5cclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3N0YXRlcyA9IHtcclxuXHRcdFx0Y3VycmVudDoge30sXHJcblx0XHRcdHRhZ3M6IHtcclxuXHRcdFx0XHQnaW5pdGlhbGl6aW5nJzogWyAnYnVzeScgXSxcclxuXHRcdFx0XHQnYW5pbWF0aW5nJzogWyAnYnVzeScgXSxcclxuXHRcdFx0XHQnZHJhZ2dpbmcnOiBbICdpbnRlcmFjdGluZycgXVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdCQuZWFjaChbICdvblJlc2l6ZScsICdvblRocm90dGxlZFJlc2l6ZScgXSwgJC5wcm94eShmdW5jdGlvbihpLCBoYW5kbGVyKSB7XHJcblx0XHRcdHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdID0gJC5wcm94eSh0aGlzW2hhbmRsZXJdLCB0aGlzKTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHQkLmVhY2goT3dsLlBsdWdpbnMsICQucHJveHkoZnVuY3Rpb24oa2V5LCBwbHVnaW4pIHtcclxuXHRcdFx0dGhpcy5fcGx1Z2luc1trZXkuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSldXHJcblx0XHRcdFx0PSBuZXcgcGx1Z2luKHRoaXMpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdCQuZWFjaChPd2wuV29ya2VycywgJC5wcm94eShmdW5jdGlvbihwcmlvcml0eSwgd29ya2VyKSB7XHJcblx0XHRcdHRoaXMuX3BpcGUucHVzaCh7XHJcblx0XHRcdFx0J2ZpbHRlcic6IHdvcmtlci5maWx0ZXIsXHJcblx0XHRcdFx0J3J1bic6ICQucHJveHkod29ya2VyLnJ1biwgdGhpcylcclxuXHRcdFx0fSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5zZXR1cCgpO1xyXG5cdFx0dGhpcy5pbml0aWFsaXplKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBjYXJvdXNlbC5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLkRlZmF1bHRzID0ge1xyXG5cdFx0aXRlbXM6IDMsXHJcblx0XHRsb29wOiBmYWxzZSxcclxuXHRcdGNlbnRlcjogZmFsc2UsXHJcblx0XHRyZXdpbmQ6IGZhbHNlLFxyXG5cdFx0Y2hlY2tWaXNpYmlsaXR5OiB0cnVlLFxyXG5cclxuXHRcdG1vdXNlRHJhZzogdHJ1ZSxcclxuXHRcdHRvdWNoRHJhZzogdHJ1ZSxcclxuXHRcdHB1bGxEcmFnOiB0cnVlLFxyXG5cdFx0ZnJlZURyYWc6IGZhbHNlLFxyXG5cclxuXHRcdG1hcmdpbjogMCxcclxuXHRcdHN0YWdlUGFkZGluZzogMCxcclxuXHJcblx0XHRtZXJnZTogZmFsc2UsXHJcblx0XHRtZXJnZUZpdDogdHJ1ZSxcclxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXHJcblxyXG5cdFx0c3RhcnRQb3NpdGlvbjogMCxcclxuXHRcdHJ0bDogZmFsc2UsXHJcblxyXG5cdFx0c21hcnRTcGVlZDogMjUwLFxyXG5cdFx0Zmx1aWRTcGVlZDogZmFsc2UsXHJcblx0XHRkcmFnRW5kU3BlZWQ6IGZhbHNlLFxyXG5cclxuXHRcdHJlc3BvbnNpdmU6IHt9LFxyXG5cdFx0cmVzcG9uc2l2ZVJlZnJlc2hSYXRlOiAyMDAsXHJcblx0XHRyZXNwb25zaXZlQmFzZUVsZW1lbnQ6IHdpbmRvdyxcclxuXHJcblx0XHRmYWxsYmFja0Vhc2luZzogJ3N3aW5nJyxcclxuXHRcdHNsaWRlVHJhbnNpdGlvbjogJycsXHJcblxyXG5cdFx0aW5mbzogZmFsc2UsXHJcblxyXG5cdFx0bmVzdGVkSXRlbVNlbGVjdG9yOiBmYWxzZSxcclxuXHRcdGl0ZW1FbGVtZW50OiAnZGl2JyxcclxuXHRcdHN0YWdlRWxlbWVudDogJ2RpdicsXHJcblxyXG5cdFx0cmVmcmVzaENsYXNzOiAnb3dsLXJlZnJlc2gnLFxyXG5cdFx0bG9hZGVkQ2xhc3M6ICdvd2wtbG9hZGVkJyxcclxuXHRcdGxvYWRpbmdDbGFzczogJ293bC1sb2FkaW5nJyxcclxuXHRcdHJ0bENsYXNzOiAnb3dsLXJ0bCcsXHJcblx0XHRyZXNwb25zaXZlQ2xhc3M6ICdvd2wtcmVzcG9uc2l2ZScsXHJcblx0XHRkcmFnQ2xhc3M6ICdvd2wtZHJhZycsXHJcblx0XHRpdGVtQ2xhc3M6ICdvd2wtaXRlbScsXHJcblx0XHRzdGFnZUNsYXNzOiAnb3dsLXN0YWdlJyxcclxuXHRcdHN0YWdlT3V0ZXJDbGFzczogJ293bC1zdGFnZS1vdXRlcicsXHJcblx0XHRncmFiQ2xhc3M6ICdvd2wtZ3JhYidcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBFbnVtZXJhdGlvbiBmb3Igd2lkdGguXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEByZWFkb25seVxyXG5cdCAqIEBlbnVtIHtTdHJpbmd9XHJcblx0ICovXHJcblx0T3dsLldpZHRoID0ge1xyXG5cdFx0RGVmYXVsdDogJ2RlZmF1bHQnLFxyXG5cdFx0SW5uZXI6ICdpbm5lcicsXHJcblx0XHRPdXRlcjogJ291dGVyJ1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVudW1lcmF0aW9uIGZvciB0eXBlcy5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHJlYWRvbmx5XHJcblx0ICogQGVudW0ge1N0cmluZ31cclxuXHQgKi9cclxuXHRPd2wuVHlwZSA9IHtcclxuXHRcdEV2ZW50OiAnZXZlbnQnLFxyXG5cdFx0U3RhdGU6ICdzdGF0ZSdcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDb250YWlucyBhbGwgcmVnaXN0ZXJlZCBwbHVnaW5zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wuUGx1Z2lucyA9IHt9O1xyXG5cclxuXHQvKipcclxuXHQgKiBMaXN0IG9mIHdvcmtlcnMgaW52b2x2ZWQgaW4gdGhlIHVwZGF0ZSBwcm9jZXNzLlxyXG5cdCAqL1xyXG5cdE93bC5Xb3JrZXJzID0gWyB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5fd2lkdGggPSB0aGlzLiRlbGVtZW50LndpZHRoKCk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcclxuXHRcdFx0Y2FjaGUuY3VycmVudCA9IHRoaXMuX2l0ZW1zICYmIHRoaXMuX2l0ZW1zW3RoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCldO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignLmNsb25lZCcpLnJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XHJcblx0XHRcdHZhciBtYXJnaW4gPSB0aGlzLnNldHRpbmdzLm1hcmdpbiB8fCAnJyxcclxuXHRcdFx0XHRncmlkID0gIXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLFxyXG5cdFx0XHRcdHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsLFxyXG5cdFx0XHRcdGNzcyA9IHtcclxuXHRcdFx0XHRcdCd3aWR0aCc6ICdhdXRvJyxcclxuXHRcdFx0XHRcdCdtYXJnaW4tbGVmdCc6IHJ0bCA/IG1hcmdpbiA6ICcnLFxyXG5cdFx0XHRcdFx0J21hcmdpbi1yaWdodCc6IHJ0bCA/ICcnIDogbWFyZ2luXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdCFncmlkICYmIHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY3NzKGNzcyk7XHJcblxyXG5cdFx0XHRjYWNoZS5jc3MgPSBjc3M7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcclxuXHRcdFx0dmFyIHdpZHRoID0gKHRoaXMud2lkdGgoKSAvIHRoaXMuc2V0dGluZ3MuaXRlbXMpLnRvRml4ZWQoMykgLSB0aGlzLnNldHRpbmdzLm1hcmdpbixcclxuXHRcdFx0XHRtZXJnZSA9IG51bGwsXHJcblx0XHRcdFx0aXRlcmF0b3IgPSB0aGlzLl9pdGVtcy5sZW5ndGgsXHJcblx0XHRcdFx0Z3JpZCA9ICF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxcclxuXHRcdFx0XHR3aWR0aHMgPSBbXTtcclxuXHJcblx0XHRcdGNhY2hlLml0ZW1zID0ge1xyXG5cdFx0XHRcdG1lcmdlOiBmYWxzZSxcclxuXHRcdFx0XHR3aWR0aDogd2lkdGhcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHdoaWxlIChpdGVyYXRvci0tKSB7XHJcblx0XHRcdFx0bWVyZ2UgPSB0aGlzLl9tZXJnZXJzW2l0ZXJhdG9yXTtcclxuXHRcdFx0XHRtZXJnZSA9IHRoaXMuc2V0dGluZ3MubWVyZ2VGaXQgJiYgTWF0aC5taW4obWVyZ2UsIHRoaXMuc2V0dGluZ3MuaXRlbXMpIHx8IG1lcmdlO1xyXG5cclxuXHRcdFx0XHRjYWNoZS5pdGVtcy5tZXJnZSA9IG1lcmdlID4gMSB8fCBjYWNoZS5pdGVtcy5tZXJnZTtcclxuXHJcblx0XHRcdFx0d2lkdGhzW2l0ZXJhdG9yXSA9ICFncmlkID8gdGhpcy5faXRlbXNbaXRlcmF0b3JdLndpZHRoKCkgOiB3aWR0aCAqIG1lcmdlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl93aWR0aHMgPSB3aWR0aHM7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBjbG9uZXMgPSBbXSxcclxuXHRcdFx0XHRpdGVtcyA9IHRoaXMuX2l0ZW1zLFxyXG5cdFx0XHRcdHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncyxcclxuXHRcdFx0XHQvLyBUT0RPOiBTaG91bGQgYmUgY29tcHV0ZWQgZnJvbSBudW1iZXIgb2YgbWluIHdpZHRoIGl0ZW1zIGluIHN0YWdlXHJcblx0XHRcdFx0dmlldyA9IE1hdGgubWF4KHNldHRpbmdzLml0ZW1zICogMiwgNCksXHJcblx0XHRcdFx0c2l6ZSA9IE1hdGguY2VpbChpdGVtcy5sZW5ndGggLyAyKSAqIDIsXHJcblx0XHRcdFx0cmVwZWF0ID0gc2V0dGluZ3MubG9vcCAmJiBpdGVtcy5sZW5ndGggPyBzZXR0aW5ncy5yZXdpbmQgPyB2aWV3IDogTWF0aC5tYXgodmlldywgc2l6ZSkgOiAwLFxyXG5cdFx0XHRcdGFwcGVuZCA9ICcnLFxyXG5cdFx0XHRcdHByZXBlbmQgPSAnJztcclxuXHJcblx0XHRcdHJlcGVhdCAvPSAyO1xyXG5cclxuXHRcdFx0d2hpbGUgKHJlcGVhdCA+IDApIHtcclxuXHRcdFx0XHQvLyBTd2l0Y2ggdG8gb25seSB1c2luZyBhcHBlbmRlZCBjbG9uZXNcclxuXHRcdFx0XHRjbG9uZXMucHVzaCh0aGlzLm5vcm1hbGl6ZShjbG9uZXMubGVuZ3RoIC8gMiwgdHJ1ZSkpO1xyXG5cdFx0XHRcdGFwcGVuZCA9IGFwcGVuZCArIGl0ZW1zW2Nsb25lc1tjbG9uZXMubGVuZ3RoIC0gMV1dWzBdLm91dGVySFRNTDtcclxuXHRcdFx0XHRjbG9uZXMucHVzaCh0aGlzLm5vcm1hbGl6ZShpdGVtcy5sZW5ndGggLSAxIC0gKGNsb25lcy5sZW5ndGggLSAxKSAvIDIsIHRydWUpKTtcclxuXHRcdFx0XHRwcmVwZW5kID0gaXRlbXNbY2xvbmVzW2Nsb25lcy5sZW5ndGggLSAxXV1bMF0ub3V0ZXJIVE1MICsgcHJlcGVuZDtcclxuXHRcdFx0XHRyZXBlYXQgLT0gMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY2xvbmVzID0gY2xvbmVzO1xyXG5cclxuXHRcdFx0JChhcHBlbmQpLmFkZENsYXNzKCdjbG9uZWQnKS5hcHBlbmRUbyh0aGlzLiRzdGFnZSk7XHJcblx0XHRcdCQocHJlcGVuZCkuYWRkQ2xhc3MoJ2Nsb25lZCcpLnByZXBlbmRUbyh0aGlzLiRzdGFnZSk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCA/IDEgOiAtMSxcclxuXHRcdFx0XHRzaXplID0gdGhpcy5fY2xvbmVzLmxlbmd0aCArIHRoaXMuX2l0ZW1zLmxlbmd0aCxcclxuXHRcdFx0XHRpdGVyYXRvciA9IC0xLFxyXG5cdFx0XHRcdHByZXZpb3VzID0gMCxcclxuXHRcdFx0XHRjdXJyZW50ID0gMCxcclxuXHRcdFx0XHRjb29yZGluYXRlcyA9IFtdO1xyXG5cclxuXHRcdFx0d2hpbGUgKCsraXRlcmF0b3IgPCBzaXplKSB7XHJcblx0XHRcdFx0cHJldmlvdXMgPSBjb29yZGluYXRlc1tpdGVyYXRvciAtIDFdIHx8IDA7XHJcblx0XHRcdFx0Y3VycmVudCA9IHRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGl0ZXJhdG9yKV0gKyB0aGlzLnNldHRpbmdzLm1hcmdpbjtcclxuXHRcdFx0XHRjb29yZGluYXRlcy5wdXNoKHByZXZpb3VzICsgY3VycmVudCAqIHJ0bCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX2Nvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXM7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBwYWRkaW5nID0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsXHJcblx0XHRcdFx0Y29vcmRpbmF0ZXMgPSB0aGlzLl9jb29yZGluYXRlcyxcclxuXHRcdFx0XHRjc3MgPSB7XHJcblx0XHRcdFx0XHQnd2lkdGgnOiBNYXRoLmNlaWwoTWF0aC5hYnMoY29vcmRpbmF0ZXNbY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV0pKSArIHBhZGRpbmcgKiAyLFxyXG5cdFx0XHRcdFx0J3BhZGRpbmctbGVmdCc6IHBhZGRpbmcgfHwgJycsXHJcblx0XHRcdFx0XHQncGFkZGluZy1yaWdodCc6IHBhZGRpbmcgfHwgJydcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKGNzcyk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcclxuXHRcdFx0dmFyIGl0ZXJhdG9yID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLFxyXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXHJcblx0XHRcdFx0aXRlbXMgPSB0aGlzLiRzdGFnZS5jaGlsZHJlbigpO1xyXG5cclxuXHRcdFx0aWYgKGdyaWQgJiYgY2FjaGUuaXRlbXMubWVyZ2UpIHtcclxuXHRcdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xyXG5cdFx0XHRcdFx0Y2FjaGUuY3NzLndpZHRoID0gdGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoaXRlcmF0b3IpXTtcclxuXHRcdFx0XHRcdGl0ZW1zLmVxKGl0ZXJhdG9yKS5jc3MoY2FjaGUuY3NzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoZ3JpZCkge1xyXG5cdFx0XHRcdGNhY2hlLmNzcy53aWR0aCA9IGNhY2hlLml0ZW1zLndpZHRoO1xyXG5cdFx0XHRcdGl0ZW1zLmNzcyhjYWNoZS5jc3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICdpdGVtcycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCA8IDEgJiYgdGhpcy4kc3RhZ2UucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xyXG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gY2FjaGUuY3VycmVudCA/IHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuaW5kZXgoY2FjaGUuY3VycmVudCkgOiAwO1xyXG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gTWF0aC5tYXgodGhpcy5taW5pbXVtKCksIE1hdGgubWluKHRoaXMubWF4aW11bSgpLCBjYWNoZS5jdXJyZW50KSk7XHJcblx0XHRcdHRoaXMucmVzZXQoY2FjaGUuY3VycmVudCk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICdwb3NpdGlvbicgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHRoaXMuX2N1cnJlbnQpKTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ3Bvc2l0aW9uJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsID8gMSA6IC0xLFxyXG5cdFx0XHRcdHBhZGRpbmcgPSB0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyAqIDIsXHJcblx0XHRcdFx0YmVnaW4gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMuY3VycmVudCgpKSArIHBhZGRpbmcsXHJcblx0XHRcdFx0ZW5kID0gYmVnaW4gKyB0aGlzLndpZHRoKCkgKiBydGwsXHJcblx0XHRcdFx0aW5uZXIsIG91dGVyLCBtYXRjaGVzID0gW10sIGksIG47XHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcblx0XHRcdFx0aW5uZXIgPSB0aGlzLl9jb29yZGluYXRlc1tpIC0gMV0gfHwgMDtcclxuXHRcdFx0XHRvdXRlciA9IE1hdGguYWJzKHRoaXMuX2Nvb3JkaW5hdGVzW2ldKSArIHBhZGRpbmcgKiBydGw7XHJcblxyXG5cdFx0XHRcdGlmICgodGhpcy5vcChpbm5lciwgJzw9JywgYmVnaW4pICYmICh0aGlzLm9wKGlubmVyLCAnPicsIGVuZCkpKVxyXG5cdFx0XHRcdFx0fHwgKHRoaXMub3Aob3V0ZXIsICc8JywgYmVnaW4pICYmIHRoaXMub3Aob3V0ZXIsICc+JywgZW5kKSkpIHtcclxuXHRcdFx0XHRcdG1hdGNoZXMucHVzaChpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignOmVxKCcgKyBtYXRjaGVzLmpvaW4oJyksIDplcSgnKSArICcpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuXHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jZW50ZXInKS5yZW1vdmVDbGFzcygnY2VudGVyJyk7XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmNlbnRlcikge1xyXG5cdFx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5jdXJyZW50KCkpLmFkZENsYXNzKCdjZW50ZXInKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gXTtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIHRoZSBzdGFnZSBET00gZWxlbWVudFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaW5pdGlhbGl6ZVN0YWdlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLiRzdGFnZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3MpO1xyXG5cclxuXHRcdC8vIGlmIHRoZSBzdGFnZSBpcyBhbHJlYWR5IGluIHRoZSBET00sIGdyYWIgaXQgYW5kIHNraXAgc3RhZ2UgaW5pdGlhbGl6YXRpb25cclxuXHRcdGlmICh0aGlzLiRzdGFnZS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcyk7XHJcblxyXG5cdFx0Ly8gY3JlYXRlIHN0YWdlXHJcblx0XHR0aGlzLiRzdGFnZSA9ICQoJzwnICsgdGhpcy5zZXR0aW5ncy5zdGFnZUVsZW1lbnQgKyAnPicsIHtcclxuXHRcdFx0XCJjbGFzc1wiOiB0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3NcclxuXHRcdH0pLndyYXAoICQoICc8ZGl2Lz4nLCB7XHJcblx0XHRcdFwiY2xhc3NcIjogdGhpcy5zZXR0aW5ncy5zdGFnZU91dGVyQ2xhc3NcclxuXHRcdH0pKTtcclxuXHJcblx0XHQvLyBhcHBlbmQgc3RhZ2VcclxuXHRcdHRoaXMuJGVsZW1lbnQuYXBwZW5kKHRoaXMuJHN0YWdlLnBhcmVudCgpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGUgaXRlbSBET00gZWxlbWVudHNcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmluaXRpYWxpemVJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyICRpdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLm93bC1pdGVtJyk7XHJcblxyXG5cdFx0Ly8gaWYgdGhlIGl0ZW1zIGFyZSBhbHJlYWR5IGluIHRoZSBET00sIGdyYWIgdGhlbSBhbmQgc2tpcCBpdGVtIGluaXRpYWxpemF0aW9uXHJcblx0XHRpZiAoJGl0ZW1zLmxlbmd0aCkge1xyXG5cdFx0XHR0aGlzLl9pdGVtcyA9ICRpdGVtcy5nZXQoKS5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG5cdFx0XHRcdHJldHVybiAkKGl0ZW0pO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHRoaXMuX21lcmdlcnMgPSB0aGlzLl9pdGVtcy5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIDE7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYXBwZW5kIGNvbnRlbnRcclxuXHRcdHRoaXMucmVwbGFjZSh0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCkubm90KHRoaXMuJHN0YWdlLnBhcmVudCgpKSk7XHJcblxyXG5cdFx0Ly8gY2hlY2sgdmlzaWJpbGl0eVxyXG5cdFx0aWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcclxuXHRcdFx0Ly8gdXBkYXRlIHZpZXdcclxuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBpbnZhbGlkYXRlIHdpZHRoXHJcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgnd2lkdGgnKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLiRlbGVtZW50XHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKVxyXG5cdFx0XHQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgY2Fyb3VzZWwuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5lbnRlcignaW5pdGlhbGl6aW5nJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ2luaXRpYWxpemUnKTtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuc2V0dGluZ3MucnRsQ2xhc3MsIHRoaXMuc2V0dGluZ3MucnRsKTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGggJiYgIXRoaXMuaXMoJ3ByZS1sb2FkaW5nJykpIHtcclxuXHRcdFx0dmFyIGltZ3MsIG5lc3RlZFNlbGVjdG9yLCB3aWR0aDtcclxuXHRcdFx0aW1ncyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyk7XHJcblx0XHRcdG5lc3RlZFNlbGVjdG9yID0gdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IgPyAnLicgKyB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciA6IHVuZGVmaW5lZDtcclxuXHRcdFx0d2lkdGggPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKG5lc3RlZFNlbGVjdG9yKS53aWR0aCgpO1xyXG5cclxuXHRcdFx0aWYgKGltZ3MubGVuZ3RoICYmIHdpZHRoIDw9IDApIHtcclxuXHRcdFx0XHR0aGlzLnByZWxvYWRBdXRvV2lkdGhJbWFnZXMoaW1ncyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmluaXRpYWxpemVTdGFnZSgpO1xyXG5cdFx0dGhpcy5pbml0aWFsaXplSXRlbXMoKTtcclxuXHJcblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50SGFuZGxlcnMoKTtcclxuXHJcblx0XHR0aGlzLmxlYXZlKCdpbml0aWFsaXppbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcignaW5pdGlhbGl6ZWQnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdmlzaWJpbGl0eSBvZiAkZWxlbWVudFxyXG5cdCAqICAgICAgICAgICAgICAgICAgICBpZiB5b3Uga25vdyB0aGUgY2Fyb3VzZWwgd2lsbCBhbHdheXMgYmUgdmlzaWJsZSB5b3UgY2FuIHNldCBgY2hlY2tWaXNpYmlsaXR5YCB0byBgZmFsc2VgIHRvXHJcblx0ICogICAgICAgICAgICAgICAgICAgIHByZXZlbnQgdGhlIGV4cGVuc2l2ZSBicm93c2VyIGxheW91dCBmb3JjZWQgcmVmbG93IHRoZSAkZWxlbWVudC5pcygnOnZpc2libGUnKSBkb2VzXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5pc1Zpc2libGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnNldHRpbmdzLmNoZWNrVmlzaWJpbGl0eVxyXG5cdFx0XHQ/IHRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJylcclxuXHRcdFx0OiB0cnVlO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHVwcyB0aGUgY3VycmVudCBzZXR0aW5ncy5cclxuXHQgKiBAdG9kbyBSZW1vdmUgcmVzcG9uc2l2ZSBjbGFzc2VzLiBXaHkgc2hvdWxkIGFkYXB0aXZlIGRlc2lnbnMgYmUgYnJvdWdodCBpbnRvIElFOD9cclxuXHQgKiBAdG9kbyBTdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGJ5IHVzaW5nIGBtYXRjaE1lZGlhYCB3b3VsZCBiZSBuaWNlLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0KCksXHJcblx0XHRcdG92ZXJ3cml0ZXMgPSB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSxcclxuXHRcdFx0bWF0Y2ggPSAtMSxcclxuXHRcdFx0c2V0dGluZ3MgPSBudWxsO1xyXG5cclxuXHRcdGlmICghb3ZlcndyaXRlcykge1xyXG5cdFx0XHRzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JC5lYWNoKG92ZXJ3cml0ZXMsIGZ1bmN0aW9uKGJyZWFrcG9pbnQpIHtcclxuXHRcdFx0XHRpZiAoYnJlYWtwb2ludCA8PSB2aWV3cG9ydCAmJiBicmVha3BvaW50ID4gbWF0Y2gpIHtcclxuXHRcdFx0XHRcdG1hdGNoID0gTnVtYmVyKGJyZWFrcG9pbnQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG92ZXJ3cml0ZXNbbWF0Y2hdKTtcclxuXHRcdFx0aWYgKHR5cGVvZiBzZXR0aW5ncy5zdGFnZVBhZGRpbmcgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRzZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBzZXR0aW5ncy5zdGFnZVBhZGRpbmcoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkZWxldGUgc2V0dGluZ3MucmVzcG9uc2l2ZTtcclxuXHJcblx0XHRcdC8vIHJlc3BvbnNpdmUgY2xhc3NcclxuXHRcdFx0aWYgKHNldHRpbmdzLnJlc3BvbnNpdmVDbGFzcykge1xyXG5cdFx0XHRcdHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnLFxyXG5cdFx0XHRcdFx0dGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycpLnJlcGxhY2UobmV3IFJlZ0V4cCgnKCcgKyB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzICsgJy0pXFxcXFMrXFxcXHMnLCAnZycpLCAnJDEnICsgbWF0Y2gpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcignY2hhbmdlJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAnc2V0dGluZ3MnLCB2YWx1ZTogc2V0dGluZ3MgfSB9KTtcclxuXHRcdHRoaXMuX2JyZWFrcG9pbnQgPSBtYXRjaDtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnc2V0dGluZ3MnKTtcclxuXHRcdHRoaXMudHJpZ2dlcignY2hhbmdlZCcsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3NldHRpbmdzJywgdmFsdWU6IHRoaXMuc2V0dGluZ3MgfSB9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIG9wdGlvbiBsb2dpYyBpZiBuZWNlc3NlcnkuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub3B0aW9uc0xvZ2ljID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5tZXJnZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByZXBhcmVzIGFuIGl0ZW0gYmVmb3JlIGFkZC5cclxuXHQgKiBAdG9kbyBSZW5hbWUgZXZlbnQgcGFyYW1ldGVyIGBjb250ZW50YCB0byBgaXRlbWAuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEByZXR1cm5zIHtqUXVlcnl8SFRNTEVsZW1lbnR9IC0gVGhlIGl0ZW0gY29udGFpbmVyLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHRcdHZhciBldmVudCA9IHRoaXMudHJpZ2dlcigncHJlcGFyZScsIHsgY29udGVudDogaXRlbSB9KTtcclxuXHJcblx0XHRpZiAoIWV2ZW50LmRhdGEpIHtcclxuXHRcdFx0ZXZlbnQuZGF0YSA9ICQoJzwnICsgdGhpcy5zZXR0aW5ncy5pdGVtRWxlbWVudCArICcvPicpXHJcblx0XHRcdFx0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5pdGVtQ2xhc3MpLmFwcGVuZChpdGVtKVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcigncHJlcGFyZWQnLCB7IGNvbnRlbnQ6IGV2ZW50LmRhdGEgfSk7XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LmRhdGE7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyB0aGUgdmlldy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0biA9IHRoaXMuX3BpcGUubGVuZ3RoLFxyXG5cdFx0XHRmaWx0ZXIgPSAkLnByb3h5KGZ1bmN0aW9uKHApIHsgcmV0dXJuIHRoaXNbcF0gfSwgdGhpcy5faW52YWxpZGF0ZWQpLFxyXG5cdFx0XHRjYWNoZSA9IHt9O1xyXG5cclxuXHRcdHdoaWxlIChpIDwgbikge1xyXG5cdFx0XHRpZiAodGhpcy5faW52YWxpZGF0ZWQuYWxsIHx8ICQuZ3JlcCh0aGlzLl9waXBlW2ldLmZpbHRlciwgZmlsdGVyKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0dGhpcy5fcGlwZVtpXS5ydW4oY2FjaGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGkrKztcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9pbnZhbGlkYXRlZCA9IHt9O1xyXG5cclxuXHRcdCF0aGlzLmlzKCd2YWxpZCcpICYmIHRoaXMuZW50ZXIoJ3ZhbGlkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgd2lkdGggb2YgdGhlIHZpZXcuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7T3dsLldpZHRofSBbZGltZW5zaW9uPU93bC5XaWR0aC5EZWZhdWx0XSAtIFRoZSBkaW1lbnNpb24gdG8gcmV0dXJuLlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3IGluIHBpeGVsLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUud2lkdGggPSBmdW5jdGlvbihkaW1lbnNpb24pIHtcclxuXHRcdGRpbWVuc2lvbiA9IGRpbWVuc2lvbiB8fCBPd2wuV2lkdGguRGVmYXVsdDtcclxuXHRcdHN3aXRjaCAoZGltZW5zaW9uKSB7XHJcblx0XHRcdGNhc2UgT3dsLldpZHRoLklubmVyOlxyXG5cdFx0XHRjYXNlIE93bC5XaWR0aC5PdXRlcjpcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fd2lkdGg7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3dpZHRoIC0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgKiAyICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVmcmVzaGVzIHRoZSBjYXJvdXNlbCBwcmltYXJpbHkgZm9yIGFkYXB0aXZlIHB1cnBvc2VzLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZW50ZXIoJ3JlZnJlc2hpbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcigncmVmcmVzaCcpO1xyXG5cclxuXHRcdHRoaXMuc2V0dXAoKTtcclxuXHJcblx0XHR0aGlzLm9wdGlvbnNMb2dpYygpO1xyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyk7XHJcblxyXG5cdFx0dGhpcy51cGRhdGUoKTtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpO1xyXG5cclxuXHRcdHRoaXMubGVhdmUoJ3JlZnJlc2hpbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcigncmVmcmVzaGVkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ2hlY2tzIHdpbmRvdyBgcmVzaXplYCBldmVudC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5vblRocm90dGxlZFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKTtcclxuXHRcdHRoaXMucmVzaXplVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl9oYW5kbGVycy5vblJlc2l6ZSwgdGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlUmVmcmVzaFJhdGUpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB3aW5kb3cgYHJlc2l6ZWAgZXZlbnQuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghdGhpcy5faXRlbXMubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5fd2lkdGggPT09IHRoaXMuJGVsZW1lbnQud2lkdGgoKSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmVudGVyKCdyZXNpemluZycpO1xyXG5cclxuXHRcdGlmICh0aGlzLnRyaWdnZXIoJ3Jlc2l6ZScpLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcblx0XHRcdHRoaXMubGVhdmUoJ3Jlc2l6aW5nJyk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmludmFsaWRhdGUoJ3dpZHRoJyk7XHJcblxyXG5cdFx0dGhpcy5yZWZyZXNoKCk7XHJcblxyXG5cdFx0dGhpcy5sZWF2ZSgncmVzaXppbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcigncmVzaXplZCcpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVycyBldmVudCBoYW5kbGVycy5cclxuXHQgKiBAdG9kbyBDaGVjayBgbXNQb2ludGVyRW5hYmxlZGBcclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVnaXN0ZXJFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kICsgJy5vd2wuY29yZScsICQucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsIHRoaXMpKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xyXG5cdFx0XHR0aGlzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5tb3VzZURyYWcpIHtcclxuXHRcdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKTtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ21vdXNlZG93bi5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5vbignZHJhZ3N0YXJ0Lm93bC5jb3JlIHNlbGVjdHN0YXJ0Lm93bC5jb3JlJywgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZSB9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy50b3VjaERyYWcpe1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5vbigndG91Y2hzdGFydC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5vbigndG91Y2hjYW5jZWwub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnRW5kLCB0aGlzKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyBgdG91Y2hzdGFydGAgYW5kIGBtb3VzZWRvd25gIGV2ZW50cy5cclxuXHQgKiBAdG9kbyBIb3Jpem9udGFsIHN3aXBlIHRocmVzaG9sZCBhcyBvcHRpb25cclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciBzdGFnZSA9IG51bGw7XHJcblxyXG5cdFx0aWYgKGV2ZW50LndoaWNoID09PSAzKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zZm9ybSkge1xyXG5cdFx0XHRzdGFnZSA9IHRoaXMuJHN0YWdlLmNzcygndHJhbnNmb3JtJykucmVwbGFjZSgvLipcXCh8XFwpfCAvZywgJycpLnNwbGl0KCcsJyk7XHJcblx0XHRcdHN0YWdlID0ge1xyXG5cdFx0XHRcdHg6IHN0YWdlW3N0YWdlLmxlbmd0aCA9PT0gMTYgPyAxMiA6IDRdLFxyXG5cdFx0XHRcdHk6IHN0YWdlW3N0YWdlLmxlbmd0aCA9PT0gMTYgPyAxMyA6IDVdXHJcblx0XHRcdH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdGFnZSA9IHRoaXMuJHN0YWdlLnBvc2l0aW9uKCk7XHJcblx0XHRcdHN0YWdlID0ge1xyXG5cdFx0XHRcdHg6IHRoaXMuc2V0dGluZ3MucnRsID9cclxuXHRcdFx0XHRcdHN0YWdlLmxlZnQgKyB0aGlzLiRzdGFnZS53aWR0aCgpIC0gdGhpcy53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW4gOlxyXG5cdFx0XHRcdFx0c3RhZ2UubGVmdCxcclxuXHRcdFx0XHR5OiBzdGFnZS50b3BcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5pcygnYW5pbWF0aW5nJykpIHtcclxuXHRcdFx0JC5zdXBwb3J0LnRyYW5zZm9ybSA/IHRoaXMuYW5pbWF0ZShzdGFnZS54KSA6IHRoaXMuJHN0YWdlLnN0b3AoKVxyXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzLCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyk7XHJcblxyXG5cdFx0dGhpcy5zcGVlZCgwKTtcclxuXHJcblx0XHR0aGlzLl9kcmFnLnRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdHRoaXMuX2RyYWcudGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xyXG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5zdGFydCA9IHN0YWdlO1xyXG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50ID0gc3RhZ2U7XHJcblx0XHR0aGlzLl9kcmFnLnBvaW50ZXIgPSB0aGlzLnBvaW50ZXIoZXZlbnQpO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwLm93bC5jb3JlIHRvdWNoZW5kLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ0VuZCwgdGhpcykpO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9uZSgnbW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZScsICQucHJveHkoZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdFx0dmFyIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSk7XHJcblxyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdNb3ZlLCB0aGlzKSk7XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEueCkgPCBNYXRoLmFicyhkZWx0YS55KSAmJiB0aGlzLmlzKCd2YWxpZCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0dGhpcy5lbnRlcignZHJhZ2dpbmcnKTtcclxuXHRcdFx0dGhpcy50cmlnZ2VyKCdkcmFnJyk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyB0aGUgYHRvdWNobW92ZWAgYW5kIGBtb3VzZW1vdmVgIGV2ZW50cy5cclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ01vdmUgPSBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0dmFyIG1pbmltdW0gPSBudWxsLFxyXG5cdFx0XHRtYXhpbXVtID0gbnVsbCxcclxuXHRcdFx0cHVsbCA9IG51bGwsXHJcblx0XHRcdGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSksXHJcblx0XHRcdHN0YWdlID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQsIGRlbHRhKTtcclxuXHJcblx0XHRpZiAoIXRoaXMuaXMoJ2RyYWdnaW5nJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xyXG5cdFx0XHRtaW5pbXVtID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk7XHJcblx0XHRcdG1heGltdW0gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpICsgMSkgLSBtaW5pbXVtO1xyXG5cdFx0XHRzdGFnZS54ID0gKCgoc3RhZ2UueCAtIG1pbmltdW0pICUgbWF4aW11bSArIG1heGltdW0pICUgbWF4aW11bSkgKyBtaW5pbXVtO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWluaW11bSA9IHRoaXMuc2V0dGluZ3MucnRsID8gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSkgOiB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKTtcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMuc2V0dGluZ3MucnRsID8gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSkgOiB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKTtcclxuXHRcdFx0cHVsbCA9IHRoaXMuc2V0dGluZ3MucHVsbERyYWcgPyAtMSAqIGRlbHRhLnggLyA1IDogMDtcclxuXHRcdFx0c3RhZ2UueCA9IE1hdGgubWF4KE1hdGgubWluKHN0YWdlLngsIG1pbmltdW0gKyBwdWxsKSwgbWF4aW11bSArIHB1bGwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCA9IHN0YWdlO1xyXG5cclxuXHRcdHRoaXMuYW5pbWF0ZShzdGFnZS54KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHRoZSBgdG91Y2hlbmRgIGFuZCBgbW91c2V1cGAgZXZlbnRzLlxyXG5cdCAqIEB0b2RvICMyNjFcclxuXHQgKiBAdG9kbyBUaHJlc2hvbGQgZm9yIGNsaWNrIGV2ZW50XHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ0VuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgZGVsdGEgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLCB0aGlzLnBvaW50ZXIoZXZlbnQpKSxcclxuXHRcdFx0c3RhZ2UgPSB0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQsXHJcblx0XHRcdGRpcmVjdGlvbiA9IGRlbHRhLnggPiAwIF4gdGhpcy5zZXR0aW5ncy5ydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9mZignLm93bC5jb3JlJyk7XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKTtcclxuXHJcblx0XHRpZiAoZGVsdGEueCAhPT0gMCAmJiB0aGlzLmlzKCdkcmFnZ2luZycpIHx8ICF0aGlzLmlzKCd2YWxpZCcpKSB7XHJcblx0XHRcdHRoaXMuc3BlZWQodGhpcy5zZXR0aW5ncy5kcmFnRW5kU3BlZWQgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKTtcclxuXHRcdFx0dGhpcy5jdXJyZW50KHRoaXMuY2xvc2VzdChzdGFnZS54LCBkZWx0YS54ICE9PSAwID8gZGlyZWN0aW9uIDogdGhpcy5fZHJhZy5kaXJlY3Rpb24pKTtcclxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHRcdFx0dGhpcy5fZHJhZy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEueCkgPiAzIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5fZHJhZy50aW1lID4gMzAwKSB7XHJcblx0XHRcdFx0dGhpcy5fZHJhZy50YXJnZXQub25lKCdjbGljay5vd2wuY29yZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLmlzKCdkcmFnZ2luZycpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmxlYXZlKCdkcmFnZ2luZycpO1xyXG5cdFx0dGhpcy50cmlnZ2VyKCdkcmFnZ2VkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY2xvc2VzdCBpdGVtIGZvciBhIGNvb3JkaW5hdGUuXHJcblx0ICogQHRvZG8gU2V0dGluZyBgZnJlZURyYWdgIG1ha2VzIGBjbG9zZXN0YCBub3QgcmV1c2FibGUuIFNlZSAjMTY1LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29vcmRpbmF0ZSAtIFRoZSBjb29yZGluYXRlIGluIHBpeGVsLlxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uIHRvIGNoZWNrIGZvciB0aGUgY2xvc2VzdCBpdGVtLiBFdGhlciBgbGVmdGAgb3IgYHJpZ2h0YC5cclxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjbG9zZXN0IGl0ZW0uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZSwgZGlyZWN0aW9uKSB7XHJcblx0XHR2YXIgcG9zaXRpb24gPSAtMSxcclxuXHRcdFx0cHVsbCA9IDMwLFxyXG5cdFx0XHR3aWR0aCA9IHRoaXMud2lkdGgoKSxcclxuXHRcdFx0Y29vcmRpbmF0ZXMgPSB0aGlzLmNvb3JkaW5hdGVzKCk7XHJcblxyXG5cdFx0aWYgKCF0aGlzLnNldHRpbmdzLmZyZWVEcmFnKSB7XHJcblx0XHRcdC8vIGNoZWNrIGNsb3Nlc3QgaXRlbVxyXG5cdFx0XHQkLmVhY2goY29vcmRpbmF0ZXMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XHJcblx0XHRcdFx0Ly8gb24gYSBsZWZ0IHB1bGwsIGNoZWNrIG9uIGN1cnJlbnQgaW5kZXhcclxuXHRcdFx0XHRpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gcHVsbCAmJiBjb29yZGluYXRlIDwgdmFsdWUgKyBwdWxsKSB7XHJcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGluZGV4O1xyXG5cdFx0XHRcdC8vIG9uIGEgcmlnaHQgcHVsbCwgY2hlY2sgb24gcHJldmlvdXMgaW5kZXhcclxuXHRcdFx0XHQvLyB0byBkbyBzbywgc3VidHJhY3Qgd2lkdGggZnJvbSB2YWx1ZSBhbmQgc2V0IHBvc2l0aW9uID0gaW5kZXggKyAxXHJcblx0XHRcdFx0fSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gd2lkdGggLSBwdWxsICYmIGNvb3JkaW5hdGUgPCB2YWx1ZSAtIHdpZHRoICsgcHVsbCkge1xyXG5cdFx0XHRcdFx0cG9zaXRpb24gPSBpbmRleCArIDE7XHJcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLm9wKGNvb3JkaW5hdGUsICc8JywgdmFsdWUpXHJcblx0XHRcdFx0XHQmJiB0aGlzLm9wKGNvb3JkaW5hdGUsICc+JywgY29vcmRpbmF0ZXNbaW5kZXggKyAxXSAhPT0gdW5kZWZpbmVkID8gY29vcmRpbmF0ZXNbaW5kZXggKyAxXSA6IHZhbHVlIC0gd2lkdGgpKSB7XHJcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gaW5kZXggKyAxIDogaW5kZXg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBwb3NpdGlvbiA9PT0gLTE7XHJcblx0XHRcdH0sIHRoaXMpKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMuc2V0dGluZ3MubG9vcCkge1xyXG5cdFx0XHQvLyBub24gbG9vcCBib3VuZHJpZXNcclxuXHRcdFx0aWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJz4nLCBjb29yZGluYXRlc1t0aGlzLm1pbmltdW0oKV0pKSB7XHJcblx0XHRcdFx0cG9zaXRpb24gPSBjb29yZGluYXRlID0gdGhpcy5taW5pbXVtKCk7XHJcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5vcChjb29yZGluYXRlLCAnPCcsIGNvb3JkaW5hdGVzW3RoaXMubWF4aW11bSgpXSkpIHtcclxuXHRcdFx0XHRwb3NpdGlvbiA9IGNvb3JkaW5hdGUgPSB0aGlzLm1heGltdW0oKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBwb3NpdGlvbjtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBBbmltYXRlcyB0aGUgc3RhZ2UuXHJcblx0ICogQHRvZG8gIzI3MFxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29vcmRpbmF0ZSAtIFRoZSBjb29yZGluYXRlIGluIHBpeGVscy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbihjb29yZGluYXRlKSB7XHJcblx0XHR2YXIgYW5pbWF0ZSA9IHRoaXMuc3BlZWQoKSA+IDA7XHJcblxyXG5cdFx0dGhpcy5pcygnYW5pbWF0aW5nJykgJiYgdGhpcy5vblRyYW5zaXRpb25FbmQoKTtcclxuXHJcblx0XHRpZiAoYW5pbWF0ZSkge1xyXG5cdFx0XHR0aGlzLmVudGVyKCdhbmltYXRpbmcnKTtcclxuXHRcdFx0dGhpcy50cmlnZ2VyKCd0cmFuc2xhdGUnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zZm9ybTNkICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XHJcblx0XHRcdHRoaXMuJHN0YWdlLmNzcyh7XHJcblx0XHRcdFx0dHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIGNvb3JkaW5hdGUgKyAncHgsMHB4LDBweCknLFxyXG5cdFx0XHRcdHRyYW5zaXRpb246ICh0aGlzLnNwZWVkKCkgLyAxMDAwKSArICdzJyArIChcclxuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc2xpZGVUcmFuc2l0aW9uID8gJyAnICsgdGhpcy5zZXR0aW5ncy5zbGlkZVRyYW5zaXRpb24gOiAnJ1xyXG5cdFx0XHRcdClcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2UgaWYgKGFuaW1hdGUpIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuYW5pbWF0ZSh7XHJcblx0XHRcdFx0bGVmdDogY29vcmRpbmF0ZSArICdweCdcclxuXHRcdFx0fSwgdGhpcy5zcGVlZCgpLCB0aGlzLnNldHRpbmdzLmZhbGxiYWNrRWFzaW5nLCAkLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLCB0aGlzKSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5jc3Moe1xyXG5cdFx0XHRcdGxlZnQ6IGNvb3JkaW5hdGUgKyAncHgnXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB3aGV0aGVyIHRoZSBjYXJvdXNlbCBpcyBpbiBhIHNwZWNpZmljIHN0YXRlIG9yIG5vdC5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgLSBUaGUgc3RhdGUgdG8gY2hlY2suXHJcblx0ICogQHJldHVybnMge0Jvb2xlYW59IC0gVGhlIGZsYWcgd2hpY2ggaW5kaWNhdGVzIGlmIHRoZSBjYXJvdXNlbCBpcyBidXN5LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3N0YXRlcy5jdXJyZW50W3N0YXRlXSAmJiB0aGlzLl9zdGF0ZXMuY3VycmVudFtzdGF0ZV0gPiAwO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgdGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIG5ldyBhYnNvbHV0ZSBwb3NpdGlvbiBvciBub3RoaW5nIHRvIGxlYXZlIGl0IHVuY2hhbmdlZC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBpdGVtLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fY3VycmVudDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5faXRlbXMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2N1cnJlbnQgIT09IHBvc2l0aW9uKSB7XHJcblx0XHRcdHZhciBldmVudCA9IHRoaXMudHJpZ2dlcignY2hhbmdlJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAncG9zaXRpb24nLCB2YWx1ZTogcG9zaXRpb24gfSB9KTtcclxuXHJcblx0XHRcdGlmIChldmVudC5kYXRhICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKGV2ZW50LmRhdGEpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9jdXJyZW50ID0gcG9zaXRpb247XHJcblxyXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XHJcblxyXG5cdFx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZWQnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdwb3NpdGlvbicsIHZhbHVlOiB0aGlzLl9jdXJyZW50IH0gfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnQ7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSW52YWxpZGF0ZXMgdGhlIGdpdmVuIHBhcnQgb2YgdGhlIHVwZGF0ZSByb3V0aW5lLlxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbcGFydF0gLSBUaGUgcGFydCB0byBpbnZhbGlkYXRlLlxyXG5cdCAqIEByZXR1cm5zIHtBcnJheS48U3RyaW5nPn0gLSBUaGUgaW52YWxpZGF0ZWQgcGFydHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5pbnZhbGlkYXRlID0gZnVuY3Rpb24ocGFydCkge1xyXG5cdFx0aWYgKCQudHlwZShwYXJ0KSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0dGhpcy5faW52YWxpZGF0ZWRbcGFydF0gPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmlzKCd2YWxpZCcpICYmIHRoaXMubGVhdmUoJ3ZhbGlkJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gJC5tYXAodGhpcy5faW52YWxpZGF0ZWQsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIGkgfSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVzZXRzIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIG5ldyBpdGVtLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbik7XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3NwZWVkID0gMDtcclxuXHRcdHRoaXMuX2N1cnJlbnQgPSBwb3NpdGlvbjtcclxuXHJcblx0XHR0aGlzLnN1cHByZXNzKFsgJ3RyYW5zbGF0ZScsICd0cmFuc2xhdGVkJyBdKTtcclxuXHJcblx0XHR0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyhwb3NpdGlvbikpO1xyXG5cclxuXHRcdHRoaXMucmVsZWFzZShbICd0cmFuc2xhdGUnLCAndHJhbnNsYXRlZCcgXSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogTm9ybWFsaXplcyBhbiBhYnNvbHV0ZSBvciBhIHJlbGF0aXZlIHBvc2l0aW9uIG9mIGFuIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBvciByZWxhdGl2ZSBwb3NpdGlvbiB0byBub3JtYWxpemUuXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgcmVsYXRpdmUgb3Igbm90LlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIG5vcm1hbGl6ZWQgcG9zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwb3NpdGlvbiwgcmVsYXRpdmUpIHtcclxuXHRcdHZhciBuID0gdGhpcy5faXRlbXMubGVuZ3RoLFxyXG5cdFx0XHRtID0gcmVsYXRpdmUgPyAwIDogdGhpcy5fY2xvbmVzLmxlbmd0aDtcclxuXHJcblx0XHRpZiAoIXRoaXMuaXNOdW1lcmljKHBvc2l0aW9uKSB8fCBuIDwgMSkge1xyXG5cdFx0XHRwb3NpdGlvbiA9IHVuZGVmaW5lZDtcclxuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IG4gKyBtKSB7XHJcblx0XHRcdHBvc2l0aW9uID0gKChwb3NpdGlvbiAtIG0gLyAyKSAlIG4gKyBuKSAlIG4gKyBtIC8gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9zaXRpb247XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ29udmVydHMgYW4gYWJzb2x1dGUgcG9zaXRpb24gb2YgYW4gaXRlbSBpbnRvIGEgcmVsYXRpdmUgb25lLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gdG8gY29udmVydC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBjb252ZXJ0ZWQgcG9zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZWxhdGl2ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRwb3NpdGlvbiAtPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgbWF4aW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0byByZXR1cm4gYW4gYWJzb2x1dGUgcG9zaXRpb24gb3IgYSByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubWF4aW11bSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XHJcblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLFxyXG5cdFx0XHRpdGVyYXRvcixcclxuXHRcdFx0cmVjaXByb2NhbEl0ZW1zV2lkdGgsXHJcblx0XHRcdGVsZW1lbnRXaWR0aDtcclxuXHJcblx0XHRpZiAoc2V0dGluZ3MubG9vcCkge1xyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDIgKyB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xyXG5cdFx0fSBlbHNlIGlmIChzZXR0aW5ncy5hdXRvV2lkdGggfHwgc2V0dGluZ3MubWVyZ2UpIHtcclxuXHRcdFx0aXRlcmF0b3IgPSB0aGlzLl9pdGVtcy5sZW5ndGg7XHJcblx0XHRcdGlmIChpdGVyYXRvcikge1xyXG5cdFx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoID0gdGhpcy5faXRlbXNbLS1pdGVyYXRvcl0ud2lkdGgoKTtcclxuXHRcdFx0XHRlbGVtZW50V2lkdGggPSB0aGlzLiRlbGVtZW50LndpZHRoKCk7XHJcblx0XHRcdFx0d2hpbGUgKGl0ZXJhdG9yLS0pIHtcclxuXHRcdFx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoICs9IHRoaXMuX2l0ZW1zW2l0ZXJhdG9yXS53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XHJcblx0XHRcdFx0XHRpZiAocmVjaXByb2NhbEl0ZW1zV2lkdGggPiBlbGVtZW50V2lkdGgpIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdG1heGltdW0gPSBpdGVyYXRvciArIDE7XHJcblx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLmNlbnRlcikge1xyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSBzZXR0aW5ncy5pdGVtcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmUpIHtcclxuXHRcdFx0bWF4aW11bSAtPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gTWF0aC5tYXgobWF4aW11bSwgMCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgbWluaW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0byByZXR1cm4gYW4gYWJzb2x1dGUgcG9zaXRpb24gb3IgYSByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubWluaW11bSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XHJcblx0XHRyZXR1cm4gcmVsYXRpdmUgPyAwIDogdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcG9zaXRpb24uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxyXG5cdCAqIEByZXR1cm4ge2pRdWVyeXxBcnJheS48alF1ZXJ5Pn0gLSBUaGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gb3IgYWxsIGl0ZW1zIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLml0ZW1zID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9pdGVtcy5zbGljZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cdFx0cmV0dXJuIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIGFuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXHJcblx0ICogQHJldHVybiB7alF1ZXJ5fEFycmF5LjxqUXVlcnk+fSAtIFRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBvciBhbGwgaXRlbXMgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubWVyZ2VycyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fbWVyZ2Vycy5zbGljZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cdFx0cmV0dXJuIHRoaXMuX21lcmdlcnNbcG9zaXRpb25dO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGFic29sdXRlIHBvc2l0aW9ucyBvZiBjbG9uZXMgZm9yIGFuIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxyXG5cdCAqIEByZXR1cm5zIHtBcnJheS48TnVtYmVyPn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGNsb25lcyBmb3IgdGhlIGl0ZW0gb3IgYWxsIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmNsb25lcyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHR2YXIgb2RkID0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDIsXHJcblx0XHRcdGV2ZW4gPSBvZGQgKyB0aGlzLl9pdGVtcy5sZW5ndGgsXHJcblx0XHRcdG1hcCA9IGZ1bmN0aW9uKGluZGV4KSB7IHJldHVybiBpbmRleCAlIDIgPT09IDAgPyBldmVuICsgaW5kZXggLyAyIDogb2RkIC0gKGluZGV4ICsgMSkgLyAyIH07XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nsb25lcywgZnVuY3Rpb24odiwgaSkgeyByZXR1cm4gbWFwKGkpIH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAkLm1hcCh0aGlzLl9jbG9uZXMsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIHYgPT09IHBvc2l0aW9uID8gbWFwKGkpIDogbnVsbCB9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTZXRzIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZC5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcyBvciBub3RoaW5nIHRvIGxlYXZlIGl0IHVuY2hhbmdlZC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZCBpbiBtaWxsaXNlY29uZHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5zcGVlZCA9IGZ1bmN0aW9uKHNwZWVkKSB7XHJcblx0XHRpZiAoc3BlZWQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLl9zcGVlZCA9IHNwZWVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zcGVlZDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBjb29yZGluYXRlIG9mIGFuIGl0ZW0uXHJcblx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZXRob2QgaXMgbWlzc2xlYW5kaW5nLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gd2l0aGluIGBtaW5pbXVtKClgIGFuZCBgbWF4aW11bSgpYC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfEFycmF5LjxOdW1iZXI+fSAtIFRoZSBjb29yZGluYXRlIG9mIHRoZSBpdGVtIGluIHBpeGVsIG9yIGFsbCBjb29yZGluYXRlcy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmNvb3JkaW5hdGVzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdHZhciBtdWx0aXBsaWVyID0gMSxcclxuXHRcdFx0bmV3UG9zaXRpb24gPSBwb3NpdGlvbiAtIDEsXHJcblx0XHRcdGNvb3JkaW5hdGU7XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nvb3JkaW5hdGVzLCAkLnByb3h5KGZ1bmN0aW9uKGNvb3JkaW5hdGUsIGluZGV4KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXMoaW5kZXgpO1xyXG5cdFx0XHR9LCB0aGlzKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuY2VudGVyKSB7XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnJ0bCkge1xyXG5cdFx0XHRcdG11bHRpcGxpZXIgPSAtMTtcclxuXHRcdFx0XHRuZXdQb3NpdGlvbiA9IHBvc2l0aW9uICsgMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29vcmRpbmF0ZSA9IHRoaXMuX2Nvb3JkaW5hdGVzW3Bvc2l0aW9uXTtcclxuXHRcdFx0Y29vcmRpbmF0ZSArPSAodGhpcy53aWR0aCgpIC0gY29vcmRpbmF0ZSArICh0aGlzLl9jb29yZGluYXRlc1tuZXdQb3NpdGlvbl0gfHwgMCkpIC8gMiAqIG11bHRpcGxpZXI7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb29yZGluYXRlID0gdGhpcy5fY29vcmRpbmF0ZXNbbmV3UG9zaXRpb25dIHx8IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29vcmRpbmF0ZSA9IE1hdGguY2VpbChjb29yZGluYXRlKTtcclxuXHJcblx0XHRyZXR1cm4gY29vcmRpbmF0ZTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDYWxjdWxhdGVzIHRoZSBzcGVlZCBmb3IgYSB0cmFuc2xhdGlvbi5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGZyb20gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHN0YXJ0IGl0ZW0uXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRvIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQgaXRlbS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2ZhY3Rvcj11bmRlZmluZWRdIC0gVGhlIHRpbWUgZmFjdG9yIGluIG1pbGxpc2Vjb25kcy5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zbGF0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbihmcm9tLCB0bywgZmFjdG9yKSB7XHJcblx0XHRpZiAoZmFjdG9yID09PSAwKSB7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyh0byAtIGZyb20pLCAxKSwgNikgKiBNYXRoLmFicygoZmFjdG9yIHx8IHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCkpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzcGVlZCkge1xyXG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQoKSxcclxuXHRcdFx0cmV2ZXJ0ID0gbnVsbCxcclxuXHRcdFx0ZGlzdGFuY2UgPSBwb3NpdGlvbiAtIHRoaXMucmVsYXRpdmUoY3VycmVudCksXHJcblx0XHRcdGRpcmVjdGlvbiA9IChkaXN0YW5jZSA+IDApIC0gKGRpc3RhbmNlIDwgMCksXHJcblx0XHRcdGl0ZW1zID0gdGhpcy5faXRlbXMubGVuZ3RoLFxyXG5cdFx0XHRtaW5pbXVtID0gdGhpcy5taW5pbXVtKCksXHJcblx0XHRcdG1heGltdW0gPSB0aGlzLm1heGltdW0oKTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5sb29wKSB7XHJcblx0XHRcdGlmICghdGhpcy5zZXR0aW5ncy5yZXdpbmQgJiYgTWF0aC5hYnMoZGlzdGFuY2UpID4gaXRlbXMgLyAyKSB7XHJcblx0XHRcdFx0ZGlzdGFuY2UgKz0gZGlyZWN0aW9uICogLTEgKiBpdGVtcztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cG9zaXRpb24gPSBjdXJyZW50ICsgZGlzdGFuY2U7XHJcblx0XHRcdHJldmVydCA9ICgocG9zaXRpb24gLSBtaW5pbXVtKSAlIGl0ZW1zICsgaXRlbXMpICUgaXRlbXMgKyBtaW5pbXVtO1xyXG5cclxuXHRcdFx0aWYgKHJldmVydCAhPT0gcG9zaXRpb24gJiYgcmV2ZXJ0IC0gZGlzdGFuY2UgPD0gbWF4aW11bSAmJiByZXZlcnQgLSBkaXN0YW5jZSA+IDApIHtcclxuXHRcdFx0XHRjdXJyZW50ID0gcmV2ZXJ0IC0gZGlzdGFuY2U7XHJcblx0XHRcdFx0cG9zaXRpb24gPSByZXZlcnQ7XHJcblx0XHRcdFx0dGhpcy5yZXNldChjdXJyZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnJld2luZCkge1xyXG5cdFx0XHRtYXhpbXVtICs9IDE7XHJcblx0XHRcdHBvc2l0aW9uID0gKHBvc2l0aW9uICUgbWF4aW11bSArIG1heGltdW0pICUgbWF4aW11bTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBvc2l0aW9uID0gTWF0aC5tYXgobWluaW11bSwgTWF0aC5taW4obWF4aW11bSwgcG9zaXRpb24pKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNwZWVkKHRoaXMuZHVyYXRpb24oY3VycmVudCwgcG9zaXRpb24sIHNwZWVkKSk7XHJcblx0XHR0aGlzLmN1cnJlbnQocG9zaXRpb24pO1xyXG5cclxuXHRcdGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0c3BlZWQgPSBzcGVlZCB8fCBmYWxzZTtcclxuXHRcdHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkgKyAxLCBzcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBwcmV2aW91cyBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcclxuXHRcdHNwZWVkID0gc3BlZWQgfHwgZmFsc2U7XHJcblx0XHR0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpIC0gMSwgc3BlZWQpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgdGhlIGVuZCBvZiBhbiBhbmltYXRpb24uXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG5cdFx0Ly8gaWYgY3NzMiBhbmltYXRpb24gdGhlbiBldmVudCBvYmplY3QgaXMgdW5kZWZpbmVkXHJcblx0XHRpZiAoZXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHRcdC8vIENhdGNoIG9ubHkgb3dsLXN0YWdlIHRyYW5zaXRpb25FbmQgZXZlbnRcclxuXHRcdFx0aWYgKChldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC5vcmlnaW5hbFRhcmdldCkgIT09IHRoaXMuJHN0YWdlLmdldCgwKSkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubGVhdmUoJ2FuaW1hdGluZycpO1xyXG5cdFx0dGhpcy50cmlnZ2VyKCd0cmFuc2xhdGVkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB2aWV3cG9ydCB3aWR0aC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHJldHVybiB7TnVtYmVyfSAtIFRoZSB3aWR0aCBpbiBwaXhlbC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgd2lkdGg7XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCAhPT0gd2luZG93KSB7XHJcblx0XHRcdHdpZHRoID0gJCh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50KS53aWR0aCgpO1xyXG5cdFx0fSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCkge1xyXG5cdFx0XHR3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSB7XHJcblx0XHRcdHdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uc29sZS53YXJuKCdDYW4gbm90IGRldGVjdCB2aWV3cG9ydCB3aWR0aC4nKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB3aWR0aDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBjb250ZW50LlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxTdHJpbmd9IGNvbnRlbnQgLSBUaGUgbmV3IGNvbnRlbnQuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24oY29udGVudCkge1xyXG5cdFx0dGhpcy4kc3RhZ2UuZW1wdHkoKTtcclxuXHRcdHRoaXMuX2l0ZW1zID0gW107XHJcblxyXG5cdFx0aWYgKGNvbnRlbnQpIHtcclxuXHRcdFx0Y29udGVudCA9IChjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5KSA/IGNvbnRlbnQgOiAkKGNvbnRlbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcikge1xyXG5cdFx0XHRjb250ZW50ID0gY29udGVudC5maW5kKCcuJyArIHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yKTtcclxuXHRcdH1cclxuXHJcblx0XHRjb250ZW50LmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubm9kZVR5cGUgPT09IDE7XHJcblx0XHR9KS5lYWNoKCQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcclxuXHRcdFx0aXRlbSA9IHRoaXMucHJlcGFyZShpdGVtKTtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuYXBwZW5kKGl0ZW0pO1xyXG5cdFx0XHR0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xyXG5cdFx0XHR0aGlzLl9tZXJnZXJzLnB1c2goaXRlbS5maW5kKCdbZGF0YS1tZXJnZV0nKS5hZGRCYWNrKCdbZGF0YS1tZXJnZV0nKS5hdHRyKCdkYXRhLW1lcmdlJykgKiAxIHx8IDEpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdHRoaXMucmVzZXQodGhpcy5pc051bWVyaWModGhpcy5zZXR0aW5ncy5zdGFydFBvc2l0aW9uKSA/IHRoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbiA6IDApO1xyXG5cclxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBBZGRzIGFuIGl0ZW0uXHJcblx0ICogQHRvZG8gVXNlIGBpdGVtYCBpbnN0ZWFkIG9mIGBjb250ZW50YCBmb3IgdGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudHxqUXVlcnl8U3RyaW5nfSBjb250ZW50IC0gVGhlIGl0ZW0gY29udGVudCB0byBhZGQuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBpdGVtIG90aGVyd2lzZSB0aGUgaXRlbSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihjb250ZW50LCBwb3NpdGlvbikge1xyXG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLnJlbGF0aXZlKHRoaXMuX2N1cnJlbnQpO1xyXG5cclxuXHRcdHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IHRoaXMuX2l0ZW1zLmxlbmd0aCA6IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcclxuXHRcdGNvbnRlbnQgPSBjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGVudCA6ICQoY29udGVudCk7XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKCdhZGQnLCB7IGNvbnRlbnQ6IGNvbnRlbnQsIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcclxuXHJcblx0XHRjb250ZW50ID0gdGhpcy5wcmVwYXJlKGNvbnRlbnQpO1xyXG5cclxuXHRcdGlmICh0aGlzLl9pdGVtcy5sZW5ndGggPT09IDAgfHwgcG9zaXRpb24gPT09IHRoaXMuX2l0ZW1zLmxlbmd0aCkge1xyXG5cdFx0XHR0aGlzLl9pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy4kc3RhZ2UuYXBwZW5kKGNvbnRlbnQpO1xyXG5cdFx0XHR0aGlzLl9pdGVtcy5sZW5ndGggIT09IDAgJiYgdGhpcy5faXRlbXNbcG9zaXRpb24gLSAxXS5hZnRlcihjb250ZW50KTtcclxuXHRcdFx0dGhpcy5faXRlbXMucHVzaChjb250ZW50KTtcclxuXHRcdFx0dGhpcy5fbWVyZ2Vycy5wdXNoKGNvbnRlbnQuZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXS5iZWZvcmUoY29udGVudCk7XHJcblx0XHRcdHRoaXMuX2l0ZW1zLnNwbGljZShwb3NpdGlvbiwgMCwgY29udGVudCk7XHJcblx0XHRcdHRoaXMuX21lcmdlcnMuc3BsaWNlKHBvc2l0aW9uLCAwLCBjb250ZW50LmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5faXRlbXNbY3VycmVudF0gJiYgdGhpcy5yZXNldCh0aGlzLl9pdGVtc1tjdXJyZW50XS5pbmRleCgpKTtcclxuXHJcblx0XHR0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKCdhZGRlZCcsIHsgY29udGVudDogY29udGVudCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgYW4gaXRlbSBieSBpdHMgcG9zaXRpb24uXHJcblx0ICogQHRvZG8gVXNlIGBpdGVtYCBpbnN0ZWFkIG9mIGBjb250ZW50YCBmb3IgdGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIHRvIHJlbW92ZS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcclxuXHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKCdyZW1vdmUnLCB7IGNvbnRlbnQ6IHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXSwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xyXG5cclxuXHRcdHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXS5yZW1vdmUoKTtcclxuXHRcdHRoaXMuX2l0ZW1zLnNwbGljZShwb3NpdGlvbiwgMSk7XHJcblx0XHR0aGlzLl9tZXJnZXJzLnNwbGljZShwb3NpdGlvbiwgMSk7XHJcblxyXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xyXG5cclxuXHRcdHRoaXMudHJpZ2dlcigncmVtb3ZlZCcsIHsgY29udGVudDogbnVsbCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByZWxvYWRzIGltYWdlcyB3aXRoIGF1dG8gd2lkdGguXHJcblx0ICogQHRvZG8gUmVwbGFjZSBieSBhIG1vcmUgZ2VuZXJpYyBhcHByb2FjaFxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnByZWxvYWRBdXRvV2lkdGhJbWFnZXMgPSBmdW5jdGlvbihpbWFnZXMpIHtcclxuXHRcdGltYWdlcy5lYWNoKCQucHJveHkoZnVuY3Rpb24oaSwgZWxlbWVudCkge1xyXG5cdFx0XHR0aGlzLmVudGVyKCdwcmUtbG9hZGluZycpO1xyXG5cdFx0XHRlbGVtZW50ID0gJChlbGVtZW50KTtcclxuXHRcdFx0JChuZXcgSW1hZ2UoKSkub25lKCdsb2FkJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0ZWxlbWVudC5hdHRyKCdzcmMnLCBlLnRhcmdldC5zcmMpO1xyXG5cdFx0XHRcdGVsZW1lbnQuY3NzKCdvcGFjaXR5JywgMSk7XHJcblx0XHRcdFx0dGhpcy5sZWF2ZSgncHJlLWxvYWRpbmcnKTtcclxuXHRcdFx0XHQhdGhpcy5pcygncHJlLWxvYWRpbmcnKSAmJiAhdGhpcy5pcygnaW5pdGlhbGl6aW5nJykgJiYgdGhpcy5yZWZyZXNoKCk7XHJcblx0XHRcdH0sIHRoaXMpKS5hdHRyKCdzcmMnLCBlbGVtZW50LmF0dHIoJ3NyYycpIHx8IGVsZW1lbnQuYXR0cignZGF0YS1zcmMnKSB8fCBlbGVtZW50LmF0dHIoJ2RhdGEtc3JjLXJldGluYScpKTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnQub2ZmKCcub3dsLmNvcmUnKTtcclxuXHRcdHRoaXMuJHN0YWdlLm9mZignLm93bC5jb3JlJyk7XHJcblx0XHQkKGRvY3VtZW50KS5vZmYoJy5vd2wuY29yZScpO1xyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUgIT09IGZhbHNlKSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XHJcblx0XHRcdHRoaXMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBpIGluIHRoaXMuX3BsdWdpbnMpIHtcclxuXHRcdFx0dGhpcy5fcGx1Z2luc1tpXS5kZXN0cm95KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcclxuXHJcblx0XHR0aGlzLiRzdGFnZS51bndyYXAoKTtcclxuXHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY29udGVudHMoKS51bndyYXAoKTtcclxuXHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkudW53cmFwKCk7XHJcblx0XHR0aGlzLiRzdGFnZS5yZW1vdmUoKTtcclxuXHRcdHRoaXMuJGVsZW1lbnRcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpXHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJ0bENsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcylcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpXHJcblx0XHRcdC5hdHRyKCdjbGFzcycsIHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnKS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcyArICctXFxcXFMrXFxcXHMnLCAnZycpLCAnJykpXHJcblx0XHRcdC5yZW1vdmVEYXRhKCdvd2wuY2Fyb3VzZWwnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBPcGVyYXRvcnMgdG8gY2FsY3VsYXRlIHJpZ2h0LXRvLWxlZnQgYW5kIGxlZnQtdG8tcmlnaHQuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYV0gLSBUaGUgbGVmdCBzaWRlIG9wZXJhbmQuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IFtvXSAtIFRoZSBvcGVyYXRvci5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2JdIC0gVGhlIHJpZ2h0IHNpZGUgb3BlcmFuZC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9wID0gZnVuY3Rpb24oYSwgbywgYikge1xyXG5cdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsO1xyXG5cdFx0c3dpdGNoIChvKSB7XHJcblx0XHRcdGNhc2UgJzwnOlxyXG5cdFx0XHRcdHJldHVybiBydGwgPyBhID4gYiA6IGEgPCBiO1xyXG5cdFx0XHRjYXNlICc+JzpcclxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA8IGIgOiBhID4gYjtcclxuXHRcdFx0Y2FzZSAnPj0nOlxyXG5cdFx0XHRcdHJldHVybiBydGwgPyBhIDw9IGIgOiBhID49IGI7XHJcblx0XHRcdGNhc2UgJzw9JzpcclxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA+PSBiIDogYSA8PSBiO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEF0dGFjaGVzIHRvIGFuIGludGVybmFsIGV2ZW50LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBldmVudCBoYW5kbGVyIHRvIGF0dGFjaC5cclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGF0IHRoZSBjYXB0dXJpbmcgcGhhc2Ugb3Igbm90LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub24gPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcclxuXHRcdGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcclxuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcclxuXHRcdFx0ZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXRhY2hlcyBmcm9tIGFuIGludGVybmFsIGV2ZW50LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBhdHRhY2hlZCBldmVudCBoYW5kbGVyIHRvIGRldGFjaC5cclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgd2FzIHJlZ2lzdGVyZWQgYXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XHJcblx0XHRpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xyXG5cdFx0fSBlbHNlIGlmIChlbGVtZW50LmRldGFjaEV2ZW50KSB7XHJcblx0XHRcdGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVHJpZ2dlcnMgYSBwdWJsaWMgZXZlbnQuXHJcblx0ICogQHRvZG8gUmVtb3ZlIGBzdGF0dXNgLCBgcmVsYXRlZFRhcmdldGAgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgZXZlbnQgbmFtZS5cclxuXHQgKiBAcGFyYW0geyp9IFtkYXRhPW51bGxdIC0gVGhlIGV2ZW50IGRhdGEuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2U9Y2Fyb3VzZWxdIC0gVGhlIGV2ZW50IG5hbWVzcGFjZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3N0YXRlXSAtIFRoZSBzdGF0ZSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudGVyPWZhbHNlXSAtIEluZGljYXRlcyBpZiB0aGUgY2FsbCBlbnRlcnMgdGhlIHNwZWNpZmllZCBzdGF0ZSBvciBub3QuXHJcblx0ICogQHJldHVybnMge0V2ZW50fSAtIFRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSwgZGF0YSwgbmFtZXNwYWNlLCBzdGF0ZSwgZW50ZXIpIHtcclxuXHRcdHZhciBzdGF0dXMgPSB7XHJcblx0XHRcdGl0ZW06IHsgY291bnQ6IHRoaXMuX2l0ZW1zLmxlbmd0aCwgaW5kZXg6IHRoaXMuY3VycmVudCgpIH1cclxuXHRcdH0sIGhhbmRsZXIgPSAkLmNhbWVsQ2FzZShcclxuXHRcdFx0JC5ncmVwKFsgJ29uJywgbmFtZSwgbmFtZXNwYWNlIF0sIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHYgfSlcclxuXHRcdFx0XHQuam9pbignLScpLnRvTG93ZXJDYXNlKClcclxuXHRcdCksIGV2ZW50ID0gJC5FdmVudChcclxuXHRcdFx0WyBuYW1lLCAnb3dsJywgbmFtZXNwYWNlIHx8ICdjYXJvdXNlbCcgXS5qb2luKCcuJykudG9Mb3dlckNhc2UoKSxcclxuXHRcdFx0JC5leHRlbmQoeyByZWxhdGVkVGFyZ2V0OiB0aGlzIH0sIHN0YXR1cywgZGF0YSlcclxuXHRcdCk7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl9zdXByZXNzW25hbWVdKSB7XHJcblx0XHRcdCQuZWFjaCh0aGlzLl9wbHVnaW5zLCBmdW5jdGlvbihuYW1lLCBwbHVnaW4pIHtcclxuXHRcdFx0XHRpZiAocGx1Z2luLm9uVHJpZ2dlcikge1xyXG5cdFx0XHRcdFx0cGx1Z2luLm9uVHJpZ2dlcihldmVudCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHRoaXMucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogbmFtZSB9KTtcclxuXHRcdFx0dGhpcy4kZWxlbWVudC50cmlnZ2VyKGV2ZW50KTtcclxuXHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzICYmIHR5cGVvZiB0aGlzLnNldHRpbmdzW2hhbmRsZXJdID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0dGhpcy5zZXR0aW5nc1toYW5kbGVyXS5jYWxsKHRoaXMsIGV2ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBldmVudDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBFbnRlcnMgYSBzdGF0ZS5cclxuXHQgKiBAcGFyYW0gbmFtZSAtIFRoZSBzdGF0ZSBuYW1lLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbihuYW1lKSB7XHJcblx0XHQkLmVhY2goWyBuYW1lIF0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW25hbWVdIHx8IFtdKSwgJC5wcm94eShmdW5jdGlvbihpLCBuYW1lKSB7XHJcblx0XHRcdGlmICh0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0gPSAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSsrO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIExlYXZlcyBhIHN0YXRlLlxyXG5cdCAqIEBwYXJhbSBuYW1lIC0gVGhlIHN0YXRlIG5hbWUuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuXHRcdCQuZWFjaChbIG5hbWUgXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbbmFtZV0gfHwgW10pLCAkLnByb3h5KGZ1bmN0aW9uKGksIG5hbWUpIHtcclxuXHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0tLTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlcnMgYW4gZXZlbnQgb3Igc3RhdGUuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgZXZlbnQgb3Igc3RhdGUgdG8gcmVnaXN0ZXIuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uKG9iamVjdCkge1xyXG5cdFx0aWYgKG9iamVjdC50eXBlID09PSBPd2wuVHlwZS5FdmVudCkge1xyXG5cdFx0XHRpZiAoISQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0pIHtcclxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdID0ge307XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICghJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5vd2wpIHtcclxuXHRcdFx0XHR2YXIgX2RlZmF1bHQgPSAkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLl9kZWZhdWx0O1xyXG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0uX2RlZmF1bHQgPSBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRpZiAoX2RlZmF1bHQgJiYgX2RlZmF1bHQuYXBwbHkgJiYgKCFlLm5hbWVzcGFjZSB8fCBlLm5hbWVzcGFjZS5pbmRleE9mKCdvd2wnKSA9PT0gLTEpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBfZGVmYXVsdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIGUubmFtZXNwYWNlICYmIGUubmFtZXNwYWNlLmluZGV4T2YoJ293bCcpID4gLTE7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLm93bCA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAob2JqZWN0LnR5cGUgPT09IE93bC5UeXBlLlN0YXRlKSB7XHJcblx0XHRcdGlmICghdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdKSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gb2JqZWN0LnRhZ3M7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdLmNvbmNhdChvYmplY3QudGFncyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9ICQuZ3JlcCh0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0sICQucHJveHkoZnVuY3Rpb24odGFnLCBpKSB7XHJcblx0XHRcdFx0cmV0dXJuICQuaW5BcnJheSh0YWcsIHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSkgPT09IGk7XHJcblx0XHRcdH0sIHRoaXMpKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdXBwcmVzc2VzIGV2ZW50cy5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gZXZlbnRzIC0gVGhlIGV2ZW50cyB0byBzdXBwcmVzcy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnN1cHByZXNzID0gZnVuY3Rpb24oZXZlbnRzKSB7XHJcblx0XHQkLmVhY2goZXZlbnRzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xyXG5cdFx0XHR0aGlzLl9zdXByZXNzW2V2ZW50XSA9IHRydWU7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVsZWFzZXMgc3VwcHJlc3NlZCBldmVudHMuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IGV2ZW50cyAtIFRoZSBldmVudHMgdG8gcmVsZWFzZS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbihldmVudHMpIHtcclxuXHRcdCQuZWFjaChldmVudHMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGV2ZW50KSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzLl9zdXByZXNzW2V2ZW50XTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHVuaWZpZWQgcG9pbnRlciBjb29yZGluYXRlcyBmcm9tIGV2ZW50LlxyXG5cdCAqIEB0b2RvICMyNjFcclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtFdmVudH0gLSBUaGUgYG1vdXNlZG93bmAgb3IgYHRvdWNoc3RhcnRgIGV2ZW50LlxyXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gQ29udGFpbnMgYHhgIGFuZCBgeWAgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb2ludGVyIHBvc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucG9pbnRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgcmVzdWx0ID0geyB4OiBudWxsLCB5OiBudWxsIH07XHJcblxyXG5cdFx0ZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcblx0XHRldmVudCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggP1xyXG5cdFx0XHRldmVudC50b3VjaGVzWzBdIDogZXZlbnQuY2hhbmdlZFRvdWNoZXMgJiYgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID9cclxuXHRcdFx0XHRldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50O1xyXG5cclxuXHRcdGlmIChldmVudC5wYWdlWCkge1xyXG5cdFx0XHRyZXN1bHQueCA9IGV2ZW50LnBhZ2VYO1xyXG5cdFx0XHRyZXN1bHQueSA9IGV2ZW50LnBhZ2VZO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmVzdWx0LnggPSBldmVudC5jbGllbnRYO1xyXG5cdFx0XHRyZXN1bHQueSA9IGV2ZW50LmNsaWVudFk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnB1dCBpcyBhIE51bWJlciBvciBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29lcmNlZCB0byBhIE51bWJlclxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8T2JqZWN0fEFycmF5fEJvb2xlYW58UmVnRXhwfEZ1bmN0aW9ufFN5bWJvbH0gLSBUaGUgaW5wdXQgdG8gYmUgdGVzdGVkXHJcblx0ICogQHJldHVybnMge0Jvb2xlYW59IC0gQW4gaW5kaWNhdGlvbiBpZiB0aGUgaW5wdXQgaXMgYSBOdW1iZXIgb3IgY2FuIGJlIGNvZXJjZWQgdG8gYSBOdW1iZXJcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmlzTnVtZXJpYyA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG5cdFx0cmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG51bWJlcikpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGRpZmZlcmVuY2Ugb2YgdHdvIHZlY3RvcnMuXHJcblx0ICogQHRvZG8gIzI2MVxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gLSBUaGUgZmlyc3QgdmVjdG9yLlxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSAtIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIGRpZmZlcmVuY2UuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5kaWZmZXJlbmNlID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0eDogZmlyc3QueCAtIHNlY29uZC54LFxyXG5cdFx0XHR5OiBmaXJzdC55IC0gc2Vjb25kLnlcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGpRdWVyeSBQbHVnaW4gZm9yIHRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKiBAdG9kbyBOYXZpZ2F0aW9uIHBsdWdpbiBgbmV4dGAgYW5kIGBwcmV2YFxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHQkLmZuLm93bENhcm91c2VsID0gZnVuY3Rpb24ob3B0aW9uKSB7XHJcblx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcclxuXHRcdFx0XHRkYXRhID0gJHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJyk7XHJcblxyXG5cdFx0XHRpZiAoIWRhdGEpIHtcclxuXHRcdFx0XHRkYXRhID0gbmV3IE93bCh0aGlzLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbik7XHJcblx0XHRcdFx0JHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJywgZGF0YSk7XHJcblxyXG5cdFx0XHRcdCQuZWFjaChbXHJcblx0XHRcdFx0XHQnbmV4dCcsICdwcmV2JywgJ3RvJywgJ2Rlc3Ryb3knLCAncmVmcmVzaCcsICdyZXBsYWNlJywgJ2FkZCcsICdyZW1vdmUnXHJcblx0XHRcdFx0XSwgZnVuY3Rpb24oaSwgZXZlbnQpIHtcclxuXHRcdFx0XHRcdGRhdGEucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogZXZlbnQgfSk7XHJcblx0XHRcdFx0XHRkYXRhLiRlbGVtZW50Lm9uKGV2ZW50ICsgJy5vd2wuY2Fyb3VzZWwuY29yZScsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5yZWxhdGVkVGFyZ2V0ICE9PSB0aGlzKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zdXBwcmVzcyhbIGV2ZW50IF0pO1xyXG5cdFx0XHRcdFx0XHRcdGRhdGFbZXZlbnRdLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWxlYXNlKFsgZXZlbnQgXSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sIGRhdGEpKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgJiYgb3B0aW9uLmNoYXJBdCgwKSAhPT0gJ18nKSB7XHJcblx0XHRcdFx0ZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBqUXVlcnkgUGx1Z2luXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBPd2w7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogQXV0b1JlZnJlc2ggUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMy40XHJcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvIHJlZnJlc2ggcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgQXV0byBSZWZyZXNoIFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgQXV0b1JlZnJlc2ggPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZyZXNoIGludGVydmFsLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge251bWJlcn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faW50ZXJ2YWwgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogV2hldGhlciB0aGUgZWxlbWVudCBpcyBjdXJyZW50bHkgdmlzaWJsZSBvciBub3QuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fdmlzaWJsZSA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoKSB7XHJcblx0XHRcdFx0XHR0aGlzLndhdGNoKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b1JlZnJlc2guRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b1JlZnJlc2guRGVmYXVsdHMgPSB7XHJcblx0XHRhdXRvUmVmcmVzaDogdHJ1ZSxcclxuXHRcdGF1dG9SZWZyZXNoSW50ZXJ2YWw6IDUwMFxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFdhdGNoZXMgdGhlIGVsZW1lbnQuXHJcblx0ICovXHJcblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5faW50ZXJ2YWwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3Zpc2libGUgPSB0aGlzLl9jb3JlLmlzVmlzaWJsZSgpO1xyXG5cdFx0dGhpcy5faW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLnJlZnJlc2gsIHRoaXMpLCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoSW50ZXJ2YWwpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZnJlc2hlcyB0aGUgZWxlbWVudC5cclxuXHQgKi9cclxuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKHRoaXMuX2NvcmUuaXNWaXNpYmxlKCkgPT09IHRoaXMuX3Zpc2libGUpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3Zpc2libGUgPSAhdGhpcy5fdmlzaWJsZTtcclxuXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdvd2wtaGlkZGVuJywgIXRoaXMuX3Zpc2libGUpO1xyXG5cclxuXHRcdHRoaXMuX3Zpc2libGUgJiYgKHRoaXMuX2NvcmUuaW52YWxpZGF0ZSgnd2lkdGgnKSAmJiB0aGlzLl9jb3JlLnJlZnJlc2goKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKi9cclxuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b1JlZnJlc2ggPSBBdXRvUmVmcmVzaDtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBMYXp5IFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjMuNFxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBsYXp5IHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIExhenkgUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBMYXp5ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFscmVhZHkgbG9hZGVkIGl0ZW1zLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0FycmF5LjxqUXVlcnk+fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9sb2FkZWQgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgY2hhbmdlLm93bC5jYXJvdXNlbCByZXNpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmICghZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICghdGhpcy5fY29yZS5zZXR0aW5ncyB8fCAhdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKChlLnByb3BlcnR5ICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB8fCBlLnR5cGUgPT0gJ2luaXRpYWxpemVkJykge1xyXG5cdFx0XHRcdFx0dmFyIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcclxuXHRcdFx0XHRcdFx0biA9IChzZXR0aW5ncy5jZW50ZXIgJiYgTWF0aC5jZWlsKHNldHRpbmdzLml0ZW1zIC8gMikgfHwgc2V0dGluZ3MuaXRlbXMpLFxyXG5cdFx0XHRcdFx0XHRpID0gKChzZXR0aW5ncy5jZW50ZXIgJiYgbiAqIC0xKSB8fCAwKSxcclxuXHRcdFx0XHRcdFx0cG9zaXRpb24gPSAoZS5wcm9wZXJ0eSAmJiBlLnByb3BlcnR5LnZhbHVlICE9PSB1bmRlZmluZWQgPyBlLnByb3BlcnR5LnZhbHVlIDogdGhpcy5fY29yZS5jdXJyZW50KCkpICsgaSxcclxuXHRcdFx0XHRcdFx0Y2xvbmVzID0gdGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgsXHJcblx0XHRcdFx0XHRcdGxvYWQgPSAkLnByb3h5KGZ1bmN0aW9uKGksIHYpIHsgdGhpcy5sb2FkKHYpIH0sIHRoaXMpO1xyXG5cdFx0XHRcdFx0Ly9UT0RPOiBOZWVkIGRvY3VtZW50YXRpb24gZm9yIHRoaXMgbmV3IG9wdGlvblxyXG5cdFx0XHRcdFx0aWYgKHNldHRpbmdzLmxhenlMb2FkRWFnZXIgPiAwKSB7XHJcblx0XHRcdFx0XHRcdG4gKz0gc2V0dGluZ3MubGF6eUxvYWRFYWdlcjtcclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIGNhcm91c2VsIGlzIGxvb3BpbmcgYWxzbyBwcmVsb2FkIGltYWdlcyB0aGF0IGFyZSB0byB0aGUgXCJsZWZ0XCJcclxuXHRcdFx0XHRcdFx0aWYgKHNldHRpbmdzLmxvb3ApIHtcclxuICAgICAgICAgICAgICBwb3NpdGlvbiAtPSBzZXR0aW5ncy5sYXp5TG9hZEVhZ2VyO1xyXG4gICAgICAgICAgICAgIG4rKztcclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHdoaWxlIChpKysgPCBuKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMubG9hZChjbG9uZXMgLyAyICsgdGhpcy5fY29yZS5yZWxhdGl2ZShwb3NpdGlvbikpO1xyXG5cdFx0XHRcdFx0XHRjbG9uZXMgJiYgJC5lYWNoKHRoaXMuX2NvcmUuY2xvbmVzKHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKSwgbG9hZCk7XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uKys7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgdGhlIGRlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIExhenkuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlclxyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRMYXp5LkRlZmF1bHRzID0ge1xyXG5cdFx0bGF6eUxvYWQ6IGZhbHNlLFxyXG5cdFx0bGF6eUxvYWRFYWdlcjogMFxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvYWRzIGFsbCByZXNvdXJjZXMgb2YgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TGF6eS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHR2YXIgJGl0ZW0gPSB0aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHBvc2l0aW9uKSxcclxuXHRcdFx0JGVsZW1lbnRzID0gJGl0ZW0gJiYgJGl0ZW0uZmluZCgnLm93bC1sYXp5Jyk7XHJcblxyXG5cdFx0aWYgKCEkZWxlbWVudHMgfHwgJC5pbkFycmF5KCRpdGVtLmdldCgwKSwgdGhpcy5fbG9hZGVkKSA+IC0xKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQkZWxlbWVudHMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XHJcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCksIGltYWdlLFxyXG4gICAgICAgICAgICAgICAgdXJsID0gKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSAmJiAkZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSkgfHwgJGVsZW1lbnQuYXR0cignZGF0YS1zcmMnKSB8fCAkZWxlbWVudC5hdHRyKCdkYXRhLXNyY3NldCcpO1xyXG5cclxuXHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdsb2FkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcclxuXHJcblx0XHRcdGlmICgkZWxlbWVudC5pcygnaW1nJykpIHtcclxuXHRcdFx0XHQkZWxlbWVudC5vbmUoJ2xvYWQub3dsLmxhenknLCAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0JGVsZW1lbnQuY3NzKCdvcGFjaXR5JywgMSk7XHJcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ2xvYWRlZCcsIHsgZWxlbWVudDogJGVsZW1lbnQsIHVybDogdXJsIH0sICdsYXp5Jyk7XHJcblx0XHRcdFx0fSwgdGhpcykpLmF0dHIoJ3NyYycsIHVybCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoJ3NvdXJjZScpKSB7XHJcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5vbmUoJ2xvYWQub3dsLmxhenknLCAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpKS5hdHRyKCdzcmNzZXQnLCB1cmwpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGltYWdlID0gbmV3IEltYWdlKCk7XHJcblx0XHRcdFx0aW1hZ2Uub25sb2FkID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCRlbGVtZW50LmNzcyh7XHJcblx0XHRcdFx0XHRcdCdiYWNrZ3JvdW5kLWltYWdlJzogJ3VybChcIicgKyB1cmwgKyAnXCIpJyxcclxuXHRcdFx0XHRcdFx0J29wYWNpdHknOiAnMSdcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdsb2FkZWQnLCB7IGVsZW1lbnQ6ICRlbGVtZW50LCB1cmw6IHVybCB9LCAnbGF6eScpO1xyXG5cdFx0XHRcdH0sIHRoaXMpO1xyXG5cdFx0XHRcdGltYWdlLnNyYyA9IHVybDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdHRoaXMuX2xvYWRlZC5wdXNoKCRpdGVtLmdldCgwKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0TGF6eS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLmhhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuaGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTGF6eSA9IExhenk7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogQXV0b0hlaWdodCBQbHVnaW5cclxuICogQHZlcnNpb24gMi4zLjRcclxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgYXV0byBoZWlnaHQgcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgQXV0byBIZWlnaHQgUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBBdXRvSGVpZ2h0ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcclxuXHRcdC8qKlxyXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge093bH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xyXG5cclxuXHRcdHRoaXMuX3ByZXZpb3VzSGVpZ2h0ID0gbnVsbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xyXG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIHJlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0KSB7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nKXtcclxuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2xvYWRlZC5vd2wubGF6eSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRcclxuXHRcdFx0XHRcdCYmIGUuZWxlbWVudC5jbG9zZXN0KCcuJyArIHRoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbUNsYXNzKS5pbmRleCgpID09PSB0aGlzLl9jb3JlLmN1cnJlbnQoKSkge1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvSGVpZ2h0LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcclxuXHRcdHRoaXMuX2ludGVydmFsSWQgPSBudWxsO1xyXG5cdFx0dmFyIHJlZlRoaXMgPSB0aGlzO1xyXG5cclxuXHRcdC8vIFRoZXNlIGNoYW5nZXMgaGF2ZSBiZWVuIHRha2VuIGZyb20gYSBQUiBieSBnYXZyb2NoZWxlZ25vdSBwcm9wb3NlZCBpbiAjMTU3NVxyXG5cdFx0Ly8gYW5kIGhhdmUgYmVlbiBtYWRlIGNvbXBhdGlibGUgd2l0aCB0aGUgbGF0ZXN0IGpRdWVyeSB2ZXJzaW9uXHJcblx0XHQkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKHJlZlRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCkge1xyXG5cdFx0XHRcdHJlZlRoaXMudXBkYXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIEF1dG9yZXNpemUgdGhlIGhlaWdodCBvZiB0aGUgY2Fyb3VzZWwgd2hlbiB3aW5kb3cgaXMgcmVzaXplZFxyXG5cdFx0Ly8gV2hlbiBjYXJvdXNlbCBoYXMgaW1hZ2VzLCB0aGUgaGVpZ2h0IGlzIGRlcGVuZGVudCBvbiB0aGUgd2lkdGhcclxuXHRcdC8vIGFuZCBzaG91bGQgYWxzbyBjaGFuZ2Ugb24gcmVzaXplXHJcblx0XHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAocmVmVGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0KSB7XHJcblx0XHRcdFx0aWYgKHJlZlRoaXMuX2ludGVydmFsSWQgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHJlZlRoaXMuX2ludGVydmFsSWQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmVmVGhpcy5faW50ZXJ2YWxJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZWZUaGlzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdH0sIDI1MCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEF1dG9IZWlnaHQuRGVmYXVsdHMgPSB7XHJcblx0XHRhdXRvSGVpZ2h0OiBmYWxzZSxcclxuXHRcdGF1dG9IZWlnaHRDbGFzczogJ293bC1oZWlnaHQnXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyB0aGUgdmlldy5cclxuXHQgKi9cclxuXHRBdXRvSGVpZ2h0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzdGFydCA9IHRoaXMuX2NvcmUuX2N1cnJlbnQsXHJcblx0XHRcdGVuZCA9IHN0YXJ0ICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtcyxcclxuXHRcdFx0bGF6eUxvYWRFbmFibGVkID0gdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCxcclxuXHRcdFx0dmlzaWJsZSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkudG9BcnJheSgpLnNsaWNlKHN0YXJ0LCBlbmQpLFxyXG5cdFx0XHRoZWlnaHRzID0gW10sXHJcblx0XHRcdG1heGhlaWdodCA9IDA7XHJcblxyXG5cdFx0JC5lYWNoKHZpc2libGUsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XHJcblx0XHRcdGhlaWdodHMucHVzaCgkKGl0ZW0pLmhlaWdodCgpKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG1heGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xyXG5cclxuXHRcdGlmIChtYXhoZWlnaHQgPD0gMSAmJiBsYXp5TG9hZEVuYWJsZWQgJiYgdGhpcy5fcHJldmlvdXNIZWlnaHQpIHtcclxuXHRcdFx0bWF4aGVpZ2h0ID0gdGhpcy5fcHJldmlvdXNIZWlnaHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fcHJldmlvdXNIZWlnaHQgPSBtYXhoZWlnaHQ7XHJcblxyXG5cdFx0dGhpcy5fY29yZS4kc3RhZ2UucGFyZW50KClcclxuXHRcdFx0LmhlaWdodChtYXhoZWlnaHQpXHJcblx0XHRcdC5hZGRDbGFzcyh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRDbGFzcyk7XHJcblx0fTtcclxuXHJcblx0QXV0b0hlaWdodC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b0hlaWdodCA9IEF1dG9IZWlnaHQ7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogVmlkZW8gUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMy40XHJcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgdGhlIHZpZGVvIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIFZpZGVvIFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgVmlkZW8gPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWNoZSBhbGwgdmlkZW8gVVJMcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3ZpZGVvcyA9IHt9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBwbGF5aW5nIGl0ZW0uXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7alF1ZXJ5fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9wbGF5aW5nID0gbnVsbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEB0b2RvIFRoZSBjbG9uZWQgY29udGVudCByZW1vdmFsZSBpcyB0b28gbGF0ZVxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUucmVnaXN0ZXIoeyB0eXBlOiAnc3RhdGUnLCBuYW1lOiAncGxheWluZycsIHRhZ3M6IFsgJ2ludGVyYWN0aW5nJyBdIH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdyZXNpemUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW8gJiYgdGhpcy5pc0luRnVsbFNjcmVlbigpKSB7XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5pcygncmVzaXppbmcnKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS4kc3RhZ2UuZmluZCgnLmNsb25lZCAub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJyAmJiB0aGlzLl9wbGF5aW5nKSB7XHJcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKCFlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyICRlbGVtZW50ID0gJChlLmNvbnRlbnQpLmZpbmQoJy5vd2wtdmlkZW8nKTtcclxuXHJcblx0XHRcdFx0aWYgKCRlbGVtZW50Lmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0JGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHRcdFx0XHRcdHRoaXMuZmV0Y2goJGVsZW1lbnQsICQoZS5jb250ZW50KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVmlkZW8uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24oJ2NsaWNrLm93bC52aWRlbycsICcub3dsLXZpZGVvLXBsYXktaWNvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHR0aGlzLnBsYXkoZSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRWaWRlby5EZWZhdWx0cyA9IHtcclxuXHRcdHZpZGVvOiBmYWxzZSxcclxuXHRcdHZpZGVvSGVpZ2h0OiBmYWxzZSxcclxuXHRcdHZpZGVvV2lkdGg6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgdmlkZW8gSUQgYW5kIHRoZSB0eXBlIChZb3VUdWJlL1ZpbWVvL3Z6YWFyIG9ubHkpLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge2pRdWVyeX0gdGFyZ2V0IC0gVGhlIHRhcmdldCBjb250YWluaW5nIHRoZSB2aWRlbyBkYXRhLlxyXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSBpdGVtIC0gVGhlIGl0ZW0gY29udGFpbmluZyB0aGUgdmlkZW8uXHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24odGFyZ2V0LCBpdGVtKSB7XHJcblx0XHRcdHZhciB0eXBlID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICd2aW1lbyc7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJykpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICd2emFhcidcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiAneW91dHViZSc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkoKSxcclxuXHRcdFx0XHRpZCA9IHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEteW91dHViZS1pZCcpIHx8IHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJyksXHJcblx0XHRcdFx0d2lkdGggPSB0YXJnZXQuYXR0cignZGF0YS13aWR0aCcpIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9XaWR0aCxcclxuXHRcdFx0XHRoZWlnaHQgPSB0YXJnZXQuYXR0cignZGF0YS1oZWlnaHQnKSB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvSGVpZ2h0LFxyXG5cdFx0XHRcdHVybCA9IHRhcmdldC5hdHRyKCdocmVmJyk7XHJcblxyXG5cdFx0aWYgKHVybCkge1xyXG5cclxuXHRcdFx0LypcclxuXHRcdFx0XHRcdFBhcnNlcyB0aGUgaWQncyBvdXQgb2YgdGhlIGZvbGxvd2luZyB1cmxzIChhbmQgcHJvYmFibHkgbW9yZSk6XHJcblx0XHRcdFx0XHRodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTppZFxyXG5cdFx0XHRcdFx0aHR0cHM6Ly95b3V0dS5iZS86aWRcclxuXHRcdFx0XHRcdGh0dHBzOi8vdmltZW8uY29tLzppZFxyXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vY2hhbm5lbHMvOmNoYW5uZWwvOmlkXHJcblx0XHRcdFx0XHRodHRwczovL3ZpbWVvLmNvbS9ncm91cHMvOmdyb3VwL3ZpZGVvcy86aWRcclxuXHRcdFx0XHRcdGh0dHBzOi8vYXBwLnZ6YWFyLmNvbS92aWRlb3MvOmlkXHJcblxyXG5cdFx0XHRcdFx0VmlzdWFsIGV4YW1wbGU6IGh0dHBzOi8vcmVnZXhwZXIuY29tLyMoaHR0cCUzQSU3Q2h0dHBzJTNBJTdDKSU1QyUyRiU1QyUyRihwbGF5ZXIuJTdDd3d3LiU3Q2FwcC4pJTNGKHZpbWVvJTVDLmNvbSU3Q3lvdXR1KGJlJTVDLmNvbSU3QyU1Qy5iZSU3Q2JlJTVDLmdvb2dsZWFwaXMlNUMuY29tKSU3Q3Z6YWFyJTVDLmNvbSklNUMlMkYodmlkZW8lNUMlMkYlN0N2aWRlb3MlNUMlMkYlN0NlbWJlZCU1QyUyRiU3Q2NoYW5uZWxzJTVDJTJGLiUyQiU1QyUyRiU3Q2dyb3VwcyU1QyUyRi4lMkIlNUMlMkYlN0N3YXRjaCU1QyUzRnYlM0QlN0N2JTVDJTJGKSUzRiglNUJBLVphLXowLTkuXyUyNS0lNUQqKSglNUMlMjYlNUNTJTJCKSUzRlxyXG5cdFx0XHQqL1xyXG5cclxuXHRcdFx0aWQgPSB1cmwubWF0Y2goLyhodHRwOnxodHRwczp8KVxcL1xcLyhwbGF5ZXIufHd3dy58YXBwLik/KHZpbWVvXFwuY29tfHlvdXR1KGJlXFwuY29tfFxcLmJlfGJlXFwuZ29vZ2xlYXBpc1xcLmNvbXxiZVxcLW5vY29va2llXFwuY29tKXx2emFhclxcLmNvbSlcXC8odmlkZW9cXC98dmlkZW9zXFwvfGVtYmVkXFwvfGNoYW5uZWxzXFwvLitcXC98Z3JvdXBzXFwvLitcXC98d2F0Y2hcXD92PXx2XFwvKT8oW0EtWmEtejAtOS5fJS1dKikoXFwmXFxTKyk/Lyk7XHJcblxyXG5cdFx0XHRpZiAoaWRbM10uaW5kZXhPZigneW91dHUnKSA+IC0xKSB7XHJcblx0XHRcdFx0dHlwZSA9ICd5b3V0dWJlJztcclxuXHRcdFx0fSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2aW1lbycpID4gLTEpIHtcclxuXHRcdFx0XHR0eXBlID0gJ3ZpbWVvJztcclxuXHRcdFx0fSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2emFhcicpID4gLTEpIHtcclxuXHRcdFx0XHR0eXBlID0gJ3Z6YWFyJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIFVSTCBub3Qgc3VwcG9ydGVkLicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlkID0gaWRbNl07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgdmlkZW8gVVJMLicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3ZpZGVvc1t1cmxdID0ge1xyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRpZDogaWQsXHJcblx0XHRcdHdpZHRoOiB3aWR0aCxcclxuXHRcdFx0aGVpZ2h0OiBoZWlnaHRcclxuXHRcdH07XHJcblxyXG5cdFx0aXRlbS5hdHRyKCdkYXRhLXZpZGVvJywgdXJsKTtcclxuXHJcblx0XHR0aGlzLnRodW1ibmFpbCh0YXJnZXQsIHRoaXMuX3ZpZGVvc1t1cmxdKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHZpZGVvIHRodW1ibmFpbC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtqUXVlcnl9IHRhcmdldCAtIFRoZSB0YXJnZXQgY29udGFpbmluZyB0aGUgdmlkZW8gZGF0YS5cclxuXHQgKiBAcGFyYW0ge09iamVjdH0gaW5mbyAtIFRoZSB2aWRlbyBpbmZvIG9iamVjdC5cclxuXHQgKiBAc2VlIGBmZXRjaGBcclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUudGh1bWJuYWlsID0gZnVuY3Rpb24odGFyZ2V0LCB2aWRlbykge1xyXG5cdFx0dmFyIHRuTGluayxcclxuXHRcdFx0aWNvbixcclxuXHRcdFx0cGF0aCxcclxuXHRcdFx0ZGltZW5zaW9ucyA9IHZpZGVvLndpZHRoICYmIHZpZGVvLmhlaWdodCA/ICd3aWR0aDonICsgdmlkZW8ud2lkdGggKyAncHg7aGVpZ2h0OicgKyB2aWRlby5oZWlnaHQgKyAncHg7JyA6ICcnLFxyXG5cdFx0XHRjdXN0b21UbiA9IHRhcmdldC5maW5kKCdpbWcnKSxcclxuXHRcdFx0c3JjVHlwZSA9ICdzcmMnLFxyXG5cdFx0XHRsYXp5Q2xhc3MgPSAnJyxcclxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxyXG5cdFx0XHRjcmVhdGUgPSBmdW5jdGlvbihwYXRoKSB7XHJcblx0XHRcdFx0aWNvbiA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXBsYXktaWNvblwiPjwvZGl2Pic7XHJcblxyXG5cdFx0XHRcdGlmIChzZXR0aW5ncy5sYXp5TG9hZCkge1xyXG5cdFx0XHRcdFx0dG5MaW5rID0gJCgnPGRpdi8+Jyx7XHJcblx0XHRcdFx0XHRcdFwiY2xhc3NcIjogJ293bC12aWRlby10biAnICsgbGF6eUNsYXNzLFxyXG5cdFx0XHRcdFx0XHRcInNyY1R5cGVcIjogcGF0aFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRuTGluayA9ICQoICc8ZGl2Lz4nLCB7XHJcblx0XHRcdFx0XHRcdFwiY2xhc3NcIjogXCJvd2wtdmlkZW8tdG5cIixcclxuXHRcdFx0XHRcdFx0XCJzdHlsZVwiOiAnb3BhY2l0eToxO2JhY2tncm91bmQtaW1hZ2U6dXJsKCcgKyBwYXRoICsgJyknXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGFyZ2V0LmFmdGVyKHRuTGluayk7XHJcblx0XHRcdFx0dGFyZ2V0LmFmdGVyKGljb24pO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIHdyYXAgdmlkZW8gY29udGVudCBpbnRvIG93bC12aWRlby13cmFwcGVyIGRpdlxyXG5cdFx0dGFyZ2V0LndyYXAoICQoICc8ZGl2Lz4nLCB7XHJcblx0XHRcdFwiY2xhc3NcIjogXCJvd2wtdmlkZW8td3JhcHBlclwiLFxyXG5cdFx0XHRcInN0eWxlXCI6IGRpbWVuc2lvbnNcclxuXHRcdH0pKTtcclxuXHJcblx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xyXG5cdFx0XHRzcmNUeXBlID0gJ2RhdGEtc3JjJztcclxuXHRcdFx0bGF6eUNsYXNzID0gJ293bC1sYXp5JztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBjdXN0b20gdGh1bWJuYWlsXHJcblx0XHRpZiAoY3VzdG9tVG4ubGVuZ3RoKSB7XHJcblx0XHRcdGNyZWF0ZShjdXN0b21Ubi5hdHRyKHNyY1R5cGUpKTtcclxuXHRcdFx0Y3VzdG9tVG4ucmVtb3ZlKCk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodmlkZW8udHlwZSA9PT0gJ3lvdXR1YmUnKSB7XHJcblx0XHRcdHBhdGggPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgdmlkZW8uaWQgKyBcIi9ocWRlZmF1bHQuanBnXCI7XHJcblx0XHRcdGNyZWF0ZShwYXRoKTtcclxuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xyXG5cdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdHR5cGU6ICdHRVQnLFxyXG5cdFx0XHRcdHVybDogJy8vdmltZW8uY29tL2FwaS92Mi92aWRlby8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxyXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbnAnLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0XHRcdHBhdGggPSBkYXRhWzBdLnRodW1ibmFpbF9sYXJnZTtcclxuXHRcdFx0XHRcdGNyZWF0ZShwYXRoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XHJcblx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0dHlwZTogJ0dFVCcsXHJcblx0XHRcdFx0dXJsOiAnLy92emFhci5jb20vYXBpL3ZpZGVvcy8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxyXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbnAnLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0XHRcdHBhdGggPSBkYXRhLmZyYW1lZ3JhYl91cmw7XHJcblx0XHRcdFx0XHRjcmVhdGUocGF0aCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdG9wcyB0aGUgY3VycmVudCB2aWRlby5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcCcsIG51bGwsICd2aWRlbycpO1xyXG5cdFx0dGhpcy5fcGxheWluZy5maW5kKCcub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XHJcblx0XHR0aGlzLl9wbGF5aW5nLnJlbW92ZUNsYXNzKCdvd2wtdmlkZW8tcGxheWluZycpO1xyXG5cdFx0dGhpcy5fcGxheWluZyA9IG51bGw7XHJcblx0XHR0aGlzLl9jb3JlLmxlYXZlKCdwbGF5aW5nJyk7XHJcblx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3N0b3BwZWQnLCBudWxsLCAndmlkZW8nKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydHMgdGhlIGN1cnJlbnQgdmlkZW8uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLFxyXG5cdFx0XHRpdGVtID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLFxyXG5cdFx0XHR2aWRlbyA9IHRoaXMuX3ZpZGVvc1tpdGVtLmF0dHIoJ2RhdGEtdmlkZW8nKV0sXHJcblx0XHRcdHdpZHRoID0gdmlkZW8ud2lkdGggfHwgJzEwMCUnLFxyXG5cdFx0XHRoZWlnaHQgPSB2aWRlby5oZWlnaHQgfHwgdGhpcy5fY29yZS4kc3RhZ2UuaGVpZ2h0KCksXHJcblx0XHRcdGh0bWwsXHJcblx0XHRcdGlmcmFtZTtcclxuXHJcblx0XHRpZiAodGhpcy5fcGxheWluZykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fY29yZS5lbnRlcigncGxheWluZycpO1xyXG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdwbGF5JywgbnVsbCwgJ3ZpZGVvJyk7XHJcblxyXG5cdFx0aXRlbSA9IHRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZShpdGVtLmluZGV4KCkpKTtcclxuXHJcblx0XHR0aGlzLl9jb3JlLnJlc2V0KGl0ZW0uaW5kZXgoKSk7XHJcblxyXG5cdFx0aHRtbCA9ICQoICc8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gd2Via2l0QWxsb3dGdWxsU2NyZWVuID48L2lmcmFtZT4nICk7XHJcblx0XHRodG1sLmF0dHIoICdoZWlnaHQnLCBoZWlnaHQgKTtcclxuXHRcdGh0bWwuYXR0ciggJ3dpZHRoJywgd2lkdGggKTtcclxuXHRcdGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcclxuXHRcdFx0aHRtbC5hdHRyKCAnc3JjJywgJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyB2aWRlby5pZCArICc/YXV0b3BsYXk9MSZyZWw9MCZ2PScgKyB2aWRlby5pZCApO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndmltZW8nKSB7XHJcblx0XHRcdGh0bWwuYXR0ciggJ3NyYycsICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJyArIHZpZGVvLmlkICsgJz9hdXRvcGxheT0xJyApO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XHJcblx0XHRcdGh0bWwuYXR0ciggJ3NyYycsICcvL3ZpZXcudnphYXIuY29tLycgKyB2aWRlby5pZCArICcvcGxheWVyP2F1dG9wbGF5PXRydWUnICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWZyYW1lID0gJChodG1sKS53cmFwKCAnPGRpdiBjbGFzcz1cIm93bC12aWRlby1mcmFtZVwiIC8+JyApLmluc2VydEFmdGVyKGl0ZW0uZmluZCgnLm93bC12aWRlbycpKTtcclxuXHJcblx0XHR0aGlzLl9wbGF5aW5nID0gaXRlbS5hZGRDbGFzcygnb3dsLXZpZGVvLXBsYXlpbmcnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDaGVja3Mgd2hldGhlciBhbiB2aWRlbyBpcyBjdXJyZW50bHkgaW4gZnVsbCBzY3JlZW4gbW9kZSBvciBub3QuXHJcblx0ICogQHRvZG8gQmFkIHN0eWxlIGJlY2F1c2UgbG9va3MgbGlrZSBhIHJlYWRvbmx5IG1ldGhvZCBidXQgY2hhbmdlcyBtZW1iZXJzLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUuaXNJbkZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHxcclxuXHRcdFx0XHRkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudDtcclxuXHJcblx0XHRyZXR1cm4gZWxlbWVudCAmJiAkKGVsZW1lbnQpLnBhcmVudCgpLmhhc0NsYXNzKCdvd2wtdmlkZW8tZnJhbWUnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqL1xyXG5cdFZpZGVvLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XHJcblxyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoJ2NsaWNrLm93bC52aWRlbycpO1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5WaWRlbyA9IFZpZGVvO1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIEFuaW1hdGUgUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMy40XHJcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgdGhlIGFuaW1hdGUgcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgTmF2aWdhdGlvbiBQbHVnaW5cclxuXHQgKiBAcGFyYW0ge093bH0gc2NvcGUgLSBUaGUgT3dsIENhcm91c2VsXHJcblx0ICovXHJcblx0dmFyIEFuaW1hdGUgPSBmdW5jdGlvbihzY29wZSkge1xyXG5cdFx0dGhpcy5jb3JlID0gc2NvcGU7XHJcblx0XHR0aGlzLmNvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBbmltYXRlLkRlZmF1bHRzLCB0aGlzLmNvcmUub3B0aW9ucyk7XHJcblx0XHR0aGlzLnN3YXBwaW5nID0gdHJ1ZTtcclxuXHRcdHRoaXMucHJldmlvdXMgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLm5leHQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0dGhpcy5oYW5kbGVycyA9IHtcclxuXHRcdFx0J2NoYW5nZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpIHtcclxuXHRcdFx0XHRcdHRoaXMucHJldmlvdXMgPSB0aGlzLmNvcmUuY3VycmVudCgpO1xyXG5cdFx0XHRcdFx0dGhpcy5uZXh0ID0gZS5wcm9wZXJ0eS52YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnZHJhZy5vd2wuY2Fyb3VzZWwgZHJhZ2dlZC5vd2wuY2Fyb3VzZWwgdHJhbnNsYXRlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHRoaXMuc3dhcHBpbmcgPSBlLnR5cGUgPT0gJ3RyYW5zbGF0ZWQnO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCd0cmFuc2xhdGUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuc3dhcHBpbmcgJiYgKHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVPdXQgfHwgdGhpcy5jb3JlLm9wdGlvbnMuYW5pbWF0ZUluKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5zd2FwKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLmNvcmUuJGVsZW1lbnQub24odGhpcy5oYW5kbGVycyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRBbmltYXRlLkRlZmF1bHRzID0ge1xyXG5cdFx0YW5pbWF0ZU91dDogZmFsc2UsXHJcblx0XHRhbmltYXRlSW46IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVG9nZ2xlcyB0aGUgYW5pbWF0aW9uIGNsYXNzZXMgd2hlbmV2ZXIgYW4gdHJhbnNsYXRpb25zIHN0YXJ0cy5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHJldHVybnMge0Jvb2xlYW58dW5kZWZpbmVkfVxyXG5cdCAqL1xyXG5cdEFuaW1hdGUucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRpZiAodGhpcy5jb3JlLnNldHRpbmdzLml0ZW1zICE9PSAxKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoISQuc3VwcG9ydC5hbmltYXRpb24gfHwgISQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmNvcmUuc3BlZWQoMCk7XHJcblxyXG5cdFx0dmFyIGxlZnQsXHJcblx0XHRcdGNsZWFyID0gJC5wcm94eSh0aGlzLmNsZWFyLCB0aGlzKSxcclxuXHRcdFx0cHJldmlvdXMgPSB0aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5wcmV2aW91cyksXHJcblx0XHRcdG5leHQgPSB0aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5uZXh0KSxcclxuXHRcdFx0aW5jb21pbmcgPSB0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluLFxyXG5cdFx0XHRvdXRnb2luZyA9IHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlT3V0O1xyXG5cclxuXHRcdGlmICh0aGlzLmNvcmUuY3VycmVudCgpID09PSB0aGlzLnByZXZpb3VzKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAob3V0Z29pbmcpIHtcclxuXHRcdFx0bGVmdCA9IHRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLnByZXZpb3VzKSAtIHRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLm5leHQpO1xyXG5cdFx0XHRwcmV2aW91cy5vbmUoJC5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsIGNsZWFyKVxyXG5cdFx0XHRcdC5jc3MoIHsgJ2xlZnQnOiBsZWZ0ICsgJ3B4JyB9IClcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2FuaW1hdGVkIG93bC1hbmltYXRlZC1vdXQnKVxyXG5cdFx0XHRcdC5hZGRDbGFzcyhvdXRnb2luZyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGluY29taW5nKSB7XHJcblx0XHRcdG5leHQub25lKCQuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBjbGVhcilcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2FuaW1hdGVkIG93bC1hbmltYXRlZC1pbicpXHJcblx0XHRcdFx0LmFkZENsYXNzKGluY29taW5nKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRBbmltYXRlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdCQoZS50YXJnZXQpLmNzcyggeyAnbGVmdCc6ICcnIH0gKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkIG93bC1hbmltYXRlZC1vdXQgb3dsLWFuaW1hdGVkLWluJylcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4pXHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dCk7XHJcblx0XHR0aGlzLmNvcmUub25UcmFuc2l0aW9uRW5kKCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QW5pbWF0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLmhhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BbmltYXRlID0gQW5pbWF0ZTtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBBdXRvcGxheSBQbHVnaW5cclxuICogQHZlcnNpb24gMi4zLjRcclxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcclxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAYXV0aG9yIFRvbSBEZSBDYWx1d8OpXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgYXV0b3BsYXkgcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgQXV0b3BsYXkgUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IHNjb3BlIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBBdXRvcGxheSA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBhdXRvcGxheSB0aW1lb3V0IGlkLlxyXG5cdFx0ICogQHR5cGUge051bWJlcn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY2FsbCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIHRoZSBwbHVnaW4sIHRoaXMgdmFyaWFibGUgY29udGFpbnMgZWl0aGVyXHJcblx0XHQgKiB0aGUgc3RhcnQgdGltZSBvZiB0aGUgdGltZXIgb3IgdGhlIGN1cnJlbnQgdGltZXIgdmFsdWUgaWYgaXQnc1xyXG5cdFx0ICogcGF1c2VkLiBTaW5jZSB3ZSBzdGFydCBpbiBhIHBhdXNlZCBzdGF0ZSB3ZSBpbml0aWFsaXplIHRoZSB0aW1lclxyXG5cdFx0ICogdmFsdWUuXHJcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl90aW1lID0gMDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFN0b3JlcyB0aGUgdGltZW91dCBjdXJyZW50bHkgdXNlZC5cclxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3RpbWVvdXQgPSAwO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW5kaWNhdGVzIHdoZW5ldmVyIHRoZSBhdXRvcGxheSBpcyBwYXVzZWQuXHJcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fcGF1c2VkID0gdHJ1ZTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xyXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAnc2V0dGluZ3MnKSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nICYmIHRoaXMuX3BhdXNlZCkge1xyXG5cdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIHRpbWVyLiBUaGlzIGNvZGUgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHBvc2l0aW9uXHJcblx0XHRcdFx0XHQvLyBvZiB0aGUgY2Fyb3VzZWwgd2FzIGNoYW5nZWQgdGhyb3VnaCB1c2VyIGludGVyYWN0aW9uLlxyXG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IDA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5KSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncGxheS5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKGUsIHQsIHMpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHRoaXMucGxheSh0LCBzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnc3RvcC5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdtb3VzZW92ZXIub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UgJiYgdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdtb3VzZWxlYXZlLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0XHRcdHRoaXMucGxheSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCd0b3VjaHN0YXJ0Lm93bC5jb3JlJzogJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UgJiYgdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCd0b3VjaGVuZC5vd2wuY29yZSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b3BsYXkuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRBdXRvcGxheS5EZWZhdWx0cyA9IHtcclxuXHRcdGF1dG9wbGF5OiBmYWxzZSxcclxuXHRcdGF1dG9wbGF5VGltZW91dDogNTAwMCxcclxuXHRcdGF1dG9wbGF5SG92ZXJQYXVzZTogZmFsc2UsXHJcblx0XHRhdXRvcGxheVNwZWVkOiBmYWxzZVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRyYW5zaXRpb24gdG8gdGhlIG5leHQgc2xpZGUgYW5kIHNldCBhIHRpbWVvdXQgZm9yIHRoZSBuZXh0IHRyYW5zaXRpb24uXHJcblx0ICogQHByaXZhdGVcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgZm9yIHRoZSBhbmltYXRpb25zLlxyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uKHNwZWVkKSB7XHJcblx0XHR0aGlzLl9jYWxsID0gd2luZG93LnNldFRpbWVvdXQoXHJcblx0XHRcdCQucHJveHkodGhpcy5fbmV4dCwgdGhpcywgc3BlZWQpLFxyXG5cdFx0XHR0aGlzLl90aW1lb3V0ICogKE1hdGgucm91bmQodGhpcy5yZWFkKCkgLyB0aGlzLl90aW1lb3V0KSArIDEpIC0gdGhpcy5yZWFkKClcclxuXHRcdCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2NvcmUuaXMoJ2ludGVyYWN0aW5nJykgfHwgZG9jdW1lbnQuaGlkZGVuKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuX2NvcmUubmV4dChzcGVlZCB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5U3BlZWQpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVhZHMgdGhlIGN1cnJlbnQgdGltZXIgdmFsdWUgd2hlbiB0aGUgdGltZXIgaXMgcGxheWluZy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX3RpbWU7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU3RhcnRzIHRoZSBhdXRvcGxheS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lb3V0XSAtIFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgZm9yIHRoZSBhbmltYXRpb25zLlxyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24odGltZW91dCwgc3BlZWQpIHtcclxuXHRcdHZhciBlbGFwc2VkO1xyXG5cclxuXHRcdGlmICghdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xyXG5cdFx0XHR0aGlzLl9jb3JlLmVudGVyKCdyb3RhdGluZycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRpbWVvdXQgPSB0aW1lb3V0IHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlUaW1lb3V0O1xyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSBsYXN0IHRyYW5zaXRpb24uIElmIHRoZSBjYXJvdXNlbFxyXG5cdFx0Ly8gd2Fzbid0IHBsYXlpbmcgdGhpcyBjYWxjdWxhdGlvbiB3aWxsIHlpZWxkIHplcm8uXHJcblx0XHRlbGFwc2VkID0gTWF0aC5taW4odGhpcy5fdGltZSAlICh0aGlzLl90aW1lb3V0IHx8IHRpbWVvdXQpLCB0aW1lb3V0KTtcclxuXHJcblx0XHRpZiAodGhpcy5fcGF1c2VkKSB7XHJcblx0XHRcdC8vIFN0YXJ0IHRoZSBjbG9jay5cclxuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMucmVhZCgpO1xyXG5cdFx0XHR0aGlzLl9wYXVzZWQgPSBmYWxzZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIENsZWFyIHRoZSBhY3RpdmUgdGltZW91dCB0byBhbGxvdyByZXBsYWNlbWVudC5cclxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9jYWxsKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBZGp1c3QgdGhlIG9yaWdpbiBvZiB0aGUgdGltZXIgdG8gbWF0Y2ggdGhlIG5ldyB0aW1lb3V0IHZhbHVlLlxyXG5cdFx0dGhpcy5fdGltZSArPSB0aGlzLnJlYWQoKSAlIHRpbWVvdXQgLSBlbGFwc2VkO1xyXG5cclxuXHRcdHRoaXMuX3RpbWVvdXQgPSB0aW1lb3V0O1xyXG5cdFx0dGhpcy5fY2FsbCA9IHdpbmRvdy5zZXRUaW1lb3V0KCQucHJveHkodGhpcy5fbmV4dCwgdGhpcywgc3BlZWQpLCB0aW1lb3V0IC0gZWxhcHNlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU3RvcHMgdGhlIGF1dG9wbGF5LlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRBdXRvcGxheS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0Ly8gUmVzZXQgdGhlIGNsb2NrLlxyXG5cdFx0XHR0aGlzLl90aW1lID0gMDtcclxuXHRcdFx0dGhpcy5fcGF1c2VkID0gdHJ1ZTtcclxuXHJcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fY2FsbCk7XHJcblx0XHRcdHRoaXMuX2NvcmUubGVhdmUoJ3JvdGF0aW5nJyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUGF1c2VzIHRoZSBhdXRvcGxheS5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5fY29yZS5pcygncm90YXRpbmcnKSAmJiAhdGhpcy5fcGF1c2VkKSB7XHJcblx0XHRcdC8vIFBhdXNlIHRoZSBjbG9jay5cclxuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMucmVhZCgpO1xyXG5cdFx0XHR0aGlzLl9wYXVzZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9jYWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XHJcblxyXG5cdFx0dGhpcy5zdG9wKCk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLmF1dG9wbGF5ID0gQXV0b3BsYXk7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogTmF2aWdhdGlvbiBQbHVnaW5cclxuICogQHZlcnNpb24gMi4zLjRcclxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBuYXZpZ2F0aW9uIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbC5cclxuXHQgKi9cclxuXHR2YXIgTmF2aWdhdGlvbiA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQgb3Igbm90LlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgY3VycmVudCBwYWdpbmcgaW5kZXhlcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtBcnJheX1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fcGFnZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBET00gZWxlbWVudHMgb2YgdGhlIHVzZXIgaW50ZXJmYWNlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29udHJvbHMgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE1hcmt1cCBmb3IgYW4gaW5kaWNhdG9yLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0FycmF5LjxTdHJpbmc+fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl90ZW1wbGF0ZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBjYXJvdXNlbCBlbGVtZW50LlxyXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy4kZWxlbWVudCA9IHRoaXMuX2NvcmUuJGVsZW1lbnQ7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBPdmVycmlkZGVuIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fb3ZlcnJpZGVzID0ge1xyXG5cdFx0XHRuZXh0OiB0aGlzLl9jb3JlLm5leHQsXHJcblx0XHRcdHByZXY6IHRoaXMuX2NvcmUucHJldixcclxuXHRcdFx0dG86IHRoaXMuX2NvcmUudG9cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J3ByZXBhcmVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XHJcblx0XHRcdFx0XHR0aGlzLl90ZW1wbGF0ZXMucHVzaCgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdENsYXNzICsgJ1wiPicgK1xyXG5cdFx0XHRcdFx0XHQkKGUuY29udGVudCkuZmluZCgnW2RhdGEtZG90XScpLmFkZEJhY2soJ1tkYXRhLWRvdF0nKS5hdHRyKCdkYXRhLWRvdCcpICsgJzwvZGl2PicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdhZGRlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnNwbGljZShlLnBvc2l0aW9uLCAwLCB0aGlzLl90ZW1wbGF0ZXMucG9wKCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdyZW1vdmUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEpIHtcclxuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB7XHJcblx0XHRcdFx0XHR0aGlzLmRyYXcoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcclxuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xyXG5cdFx0XHRcdFx0dGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcigncmVmcmVzaCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3JlZnJlc2hlZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTmF2aWdhdGlvbi5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcclxuXHJcblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAdG9kbyBSZW5hbWUgYHNsaWRlQnlgIHRvIGBuYXZCeWBcclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLkRlZmF1bHRzID0ge1xyXG5cdFx0bmF2OiBmYWxzZSxcclxuXHRcdG5hdlRleHQ6IFtcclxuXHRcdFx0JzxkaXYgYXJpYS1sYWJlbD1cIicgKyAnUHJldmlvdXMnICsgJ1wiPlx0PGltZyBjbGFzcz1cInN2Z1wiIHNyYz1cIi4vc3JjL2ltZy9hcnJvdy5zdmdcIiBhbHQ9XCJcIj4gPC9kaXY+JyxcclxuXHRcdFx0JzxkaXYgYXJpYS1sYWJlbD1cIicgKyAnTmV4dCcgKyAnXCI+XHQ8aW1nIGNsYXNzPVwic3ZnXCIgc3JjPVwiLi9zcmMvaW1nL2Fycm93LnN2Z1wiIGFsdD1cIlwiPjwvZGl2PidcclxuXHRcdF0sXHJcblx0XHRuYXZTcGVlZDogZmFsc2UsXHJcblx0XHRuYXZFbGVtZW50OiAnYnV0dG9uIHR5cGU9XCJidXR0b25cIiByb2xlPVwicHJlc2VudGF0aW9uXCInLFxyXG5cdFx0bmF2Q29udGFpbmVyOiBmYWxzZSxcclxuXHRcdG5hdkNvbnRhaW5lckNsYXNzOiAnb3dsLW5hdicsXHJcblx0XHRuYXZDbGFzczogW1xyXG5cdFx0XHQnb3dsLXByZXYnLFxyXG5cdFx0XHQnb3dsLW5leHQnXHJcblx0XHRdLFxyXG5cdFx0c2xpZGVCeTogMSxcclxuXHRcdGRvdENsYXNzOiAnb3dsLWRvdCcsXHJcblx0XHRkb3RzQ2xhc3M6ICdvd2wtZG90cycsXHJcblx0XHRkb3RzOiB0cnVlLFxyXG5cdFx0ZG90c0VhY2g6IGZhbHNlLFxyXG5cdFx0ZG90c0RhdGE6IGZhbHNlLFxyXG5cdFx0ZG90c1NwZWVkOiBmYWxzZSxcclxuXHRcdGRvdHNDb250YWluZXI6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGxheW91dCBvZiB0aGUgcGx1Z2luIGFuZCBleHRlbmRzIHRoZSBjYXJvdXNlbC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIG92ZXJyaWRlLFxyXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XHJcblxyXG5cdFx0Ly8gY3JlYXRlIERPTSBzdHJ1Y3R1cmUgZm9yIHJlbGF0aXZlIG5hdmlnYXRpb25cclxuXHRcdHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSA9IChzZXR0aW5ncy5uYXZDb250YWluZXIgPyAkKHNldHRpbmdzLm5hdkNvbnRhaW5lcilcclxuXHRcdFx0OiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLm5hdkNvbnRhaW5lckNsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxyXG5cdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MubmF2Q2xhc3NbMF0pXHJcblx0XHRcdC5odG1sKHNldHRpbmdzLm5hdlRleHRbMF0pXHJcblx0XHRcdC5wcmVwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKVxyXG5cdFx0XHQub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0dGhpcy5wcmV2KHNldHRpbmdzLm5hdlNwZWVkKTtcclxuXHRcdFx0fSwgdGhpcykpO1xyXG5cdFx0dGhpcy5fY29udHJvbHMuJG5leHQgPSAkKCc8JyArIHNldHRpbmdzLm5hdkVsZW1lbnQgKyAnPicpXHJcblx0XHRcdC5hZGRDbGFzcyhzZXR0aW5ncy5uYXZDbGFzc1sxXSlcclxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFsxXSlcclxuXHRcdFx0LmFwcGVuZFRvKHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSlcclxuXHRcdFx0Lm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdHRoaXMubmV4dChzZXR0aW5ncy5uYXZTcGVlZCk7XHJcblx0XHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgYWJzb2x1dGUgbmF2aWdhdGlvblxyXG5cdFx0aWYgKCFzZXR0aW5ncy5kb3RzRGF0YSkge1xyXG5cdFx0XHR0aGlzLl90ZW1wbGF0ZXMgPSBbICQoJzxidXR0b24gcm9sZT1cImJ1dHRvblwiPicpXHJcblx0XHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLmRvdENsYXNzKVxyXG5cdFx0XHRcdC5hcHBlbmQoJCgnPHNwYW4+JykpXHJcblx0XHRcdFx0LnByb3AoJ291dGVySFRNTCcpIF07XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlID0gKHNldHRpbmdzLmRvdHNDb250YWluZXIgPyAkKHNldHRpbmdzLmRvdHNDb250YWluZXIpXHJcblx0XHRcdDogJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5kb3RzQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcblx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUub24oJ2NsaWNrJywgJ2J1dHRvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHR2YXIgaW5kZXggPSAkKGUudGFyZ2V0KS5wYXJlbnQoKS5pcyh0aGlzLl9jb250cm9scy4kYWJzb2x1dGUpXHJcblx0XHRcdFx0PyAkKGUudGFyZ2V0KS5pbmRleCgpIDogJChlLnRhcmdldCkucGFyZW50KCkuaW5kZXgoKTtcclxuXHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdHRoaXMudG8oaW5kZXgsIHNldHRpbmdzLmRvdHNTcGVlZCk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblxyXG5cdFx0LyokZWwub24oJ2ZvY3VzaW4nLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0JChkb2N1bWVudCkub2ZmKFwiLmNhcm91c2VsXCIpO1xyXG5cclxuXHRcdFx0JChkb2N1bWVudCkub24oJ2tleWRvd24uY2Fyb3VzZWwnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09IDM3KSB7XHJcblx0XHRcdFx0XHQkZWwudHJpZ2dlcigncHJldi5vd2wnKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihlLmtleUNvZGUgPT0gMzkpIHtcclxuXHRcdFx0XHRcdCRlbC50cmlnZ2VyKCduZXh0Lm93bCcpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pOyovXHJcblxyXG5cdFx0Ly8gb3ZlcnJpZGUgcHVibGljIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsXHJcblx0XHRmb3IgKG92ZXJyaWRlIGluIHRoaXMuX292ZXJyaWRlcykge1xyXG5cdFx0XHR0aGlzLl9jb3JlW292ZXJyaWRlXSA9ICQucHJveHkodGhpc1tvdmVycmlkZV0sIHRoaXMpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBjb250cm9sLCBwcm9wZXJ0eSwgb3ZlcnJpZGUsIHNldHRpbmdzO1xyXG5cdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKGNvbnRyb2wgaW4gdGhpcy5fY29udHJvbHMpIHtcclxuXHRcdFx0aWYgKGNvbnRyb2wgPT09ICckcmVsYXRpdmUnICYmIHNldHRpbmdzLm5hdkNvbnRhaW5lcikge1xyXG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzW2NvbnRyb2xdLmh0bWwoJycpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzW2NvbnRyb2xdLnJlbW92ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRmb3IgKG92ZXJyaWRlIGluIHRoaXMub3ZlcmlkZXMpIHtcclxuXHRcdFx0dGhpcy5fY29yZVtvdmVycmlkZV0gPSB0aGlzLl9vdmVycmlkZXNbb3ZlcnJpZGVdO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIHRoZSBpbnRlcm5hbCBzdGF0ZS5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaSwgaiwgayxcclxuXHRcdFx0bG93ZXIgPSB0aGlzLl9jb3JlLmNsb25lcygpLmxlbmd0aCAvIDIsXHJcblx0XHRcdHVwcGVyID0gbG93ZXIgKyB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoLFxyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY29yZS5tYXhpbXVtKHRydWUpLFxyXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXHJcblx0XHRcdHNpemUgPSBzZXR0aW5ncy5jZW50ZXIgfHwgc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLmRvdHNEYXRhXHJcblx0XHRcdFx0PyAxIDogc2V0dGluZ3MuZG90c0VhY2ggfHwgc2V0dGluZ3MuaXRlbXM7XHJcblxyXG5cdFx0aWYgKHNldHRpbmdzLnNsaWRlQnkgIT09ICdwYWdlJykge1xyXG5cdFx0XHRzZXR0aW5ncy5zbGlkZUJ5ID0gTWF0aC5taW4oc2V0dGluZ3Muc2xpZGVCeSwgc2V0dGluZ3MuaXRlbXMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5kb3RzIHx8IHNldHRpbmdzLnNsaWRlQnkgPT0gJ3BhZ2UnKSB7XHJcblx0XHRcdHRoaXMuX3BhZ2VzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKGkgPSBsb3dlciwgaiA9IDAsIGsgPSAwOyBpIDwgdXBwZXI7IGkrKykge1xyXG5cdFx0XHRcdGlmIChqID49IHNpemUgfHwgaiA9PT0gMCkge1xyXG5cdFx0XHRcdFx0dGhpcy5fcGFnZXMucHVzaCh7XHJcblx0XHRcdFx0XHRcdHN0YXJ0OiBNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpLFxyXG5cdFx0XHRcdFx0XHRlbmQ6IGkgLSBsb3dlciArIHNpemUgLSAxXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGlmIChNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpID09PSBtYXhpbXVtKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aiA9IDAsICsraztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aiArPSB0aGlzLl9jb3JlLm1lcmdlcnModGhpcy5fY29yZS5yZWxhdGl2ZShpKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEcmF3cyB0aGUgdXNlciBpbnRlcmZhY2UuXHJcblx0ICogQHRvZG8gVGhlIG9wdGlvbiBgZG90c0RhdGFgIHdvbnQgd29yay5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGRpZmZlcmVuY2UsXHJcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcclxuXHRcdFx0ZGlzYWJsZWQgPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoIDw9IHNldHRpbmdzLml0ZW1zLFxyXG5cdFx0XHRpbmRleCA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpLFxyXG5cdFx0XHRsb29wID0gc2V0dGluZ3MubG9vcCB8fCBzZXR0aW5ncy5yZXdpbmQ7XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5uYXYgfHwgZGlzYWJsZWQpO1xyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5uYXYpIHtcclxuXHRcdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4IDw9IHRoaXMuX2NvcmUubWluaW11bSh0cnVlKSk7XHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRuZXh0LnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4ID49IHRoaXMuX2NvcmUubWF4aW11bSh0cnVlKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5kb3RzIHx8IGRpc2FibGVkKTtcclxuXHJcblx0XHRpZiAoc2V0dGluZ3MuZG90cykge1xyXG5cdFx0XHRkaWZmZXJlbmNlID0gdGhpcy5fcGFnZXMubGVuZ3RoIC0gdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKHNldHRpbmdzLmRvdHNEYXRhICYmIGRpZmZlcmVuY2UgIT09IDApIHtcclxuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuaHRtbCh0aGlzLl90ZW1wbGF0ZXMuam9pbignJykpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGRpZmZlcmVuY2UgPiAwKSB7XHJcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmFwcGVuZChuZXcgQXJyYXkoZGlmZmVyZW5jZSArIDEpLmpvaW4odGhpcy5fdGVtcGxhdGVzWzBdKSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoZGlmZmVyZW5jZSA8IDApIHtcclxuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5zbGljZShkaWZmZXJlbmNlKS5yZW1vdmUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmVxKCQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRXh0ZW5kcyBldmVudCBkYXRhLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBvYmplY3Qgd2hpY2ggZ2V0cyB0aHJvd24uXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUub25UcmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XHJcblxyXG5cdFx0ZXZlbnQucGFnZSA9IHtcclxuXHRcdFx0aW5kZXg6ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpLFxyXG5cdFx0XHRjb3VudDogdGhpcy5fcGFnZXMubGVuZ3RoLFxyXG5cdFx0XHRzaXplOiBzZXR0aW5ncyAmJiAoc2V0dGluZ3MuY2VudGVyIHx8IHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5kb3RzRGF0YVxyXG5cdFx0XHRcdD8gMSA6IHNldHRpbmdzLmRvdHNFYWNoIHx8IHNldHRpbmdzLml0ZW1zKVxyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IHBhZ2UgcG9zaXRpb24gb2YgdGhlIGNhcm91c2VsLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7XHJcblx0XHRyZXR1cm4gJC5ncmVwKHRoaXMuX3BhZ2VzLCAkLnByb3h5KGZ1bmN0aW9uKHBhZ2UsIGluZGV4KSB7XHJcblx0XHRcdHJldHVybiBwYWdlLnN0YXJ0IDw9IGN1cnJlbnQgJiYgcGFnZS5lbmQgPj0gY3VycmVudDtcclxuXHRcdH0sIHRoaXMpKS5wb3AoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IHN1Y2Nlc29yL3ByZWRlY2Vzc29yIHBvc2l0aW9uLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oc3VjY2Vzc29yKSB7XHJcblx0XHR2YXIgcG9zaXRpb24sIGxlbmd0aCxcclxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5zbGlkZUJ5ID09ICdwYWdlJykge1xyXG5cdFx0XHRwb3NpdGlvbiA9ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpO1xyXG5cdFx0XHRsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XHJcblx0XHRcdHN1Y2Nlc3NvciA/ICsrcG9zaXRpb24gOiAtLXBvc2l0aW9uO1xyXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX3BhZ2VzWygocG9zaXRpb24gJSBsZW5ndGgpICsgbGVuZ3RoKSAlIGxlbmd0aF0uc3RhcnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO1xyXG5cdFx0XHRsZW5ndGggPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoO1xyXG5cdFx0XHRzdWNjZXNzb3IgPyBwb3NpdGlvbiArPSBzZXR0aW5ncy5zbGlkZUJ5IDogcG9zaXRpb24gLT0gc2V0dGluZ3Muc2xpZGVCeTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9zaXRpb247XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZD1mYWxzZV0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24odHJ1ZSksIHNwZWVkKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTbGlkZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZD1mYWxzZV0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oZmFsc2UpLCBzcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbSBvciBwYWdlLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbc3RhbmRhcmQ9ZmFsc2VdIC0gV2hldGhlciB0byB1c2UgdGhlIHN0YW5kYXJkIGJlaGF2aW91ciBvciBub3QuXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihwb3NpdGlvbiwgc3BlZWQsIHN0YW5kYXJkKSB7XHJcblx0XHR2YXIgbGVuZ3RoO1xyXG5cclxuXHRcdGlmICghc3RhbmRhcmQgJiYgdGhpcy5fcGFnZXMubGVuZ3RoKSB7XHJcblx0XHRcdGxlbmd0aCA9IHRoaXMuX3BhZ2VzLmxlbmd0aDtcclxuXHRcdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuX3BhZ2VzWygocG9zaXRpb24gJSBsZW5ndGgpICsgbGVuZ3RoKSAlIGxlbmd0aF0uc3RhcnQsIHNwZWVkKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKShwb3NpdGlvbiwgc3BlZWQpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5OYXZpZ2F0aW9uID0gTmF2aWdhdGlvbjtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBIYXNoIFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjMuNFxyXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgdGhlIGhhc2ggcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgSGFzaCBQbHVnaW5cclxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXHJcblx0ICovXHJcblx0dmFyIEhhc2ggPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBIYXNoIGluZGV4IGZvciB0aGUgaXRlbXMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYXNoZXMgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBjYXJvdXNlbCBlbGVtZW50LlxyXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy4kZWxlbWVudCA9IHRoaXMuX2NvcmUuJGVsZW1lbnQ7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24gPT09ICdVUkxIYXNoJykge1xyXG5cdFx0XHRcdFx0JCh3aW5kb3cpLnRyaWdnZXIoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHR2YXIgaGFzaCA9ICQoZS5jb250ZW50KS5maW5kKCdbZGF0YS1oYXNoXScpLmFkZEJhY2soJ1tkYXRhLWhhc2hdJykuYXR0cignZGF0YS1oYXNoJyk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCFoYXNoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0aGlzLl9oYXNoZXNbaGFzaF0gPSBlLmNvbnRlbnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xyXG5cdFx0XHRcdFx0dmFyIGN1cnJlbnQgPSB0aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpKSxcclxuXHRcdFx0XHRcdFx0aGFzaCA9ICQubWFwKHRoaXMuX2hhc2hlcywgZnVuY3Rpb24oaXRlbSwgaGFzaCkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBpdGVtID09PSBjdXJyZW50ID8gaGFzaCA6IG51bGw7XHJcblx0XHRcdFx0XHRcdH0pLmpvaW4oKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIWhhc2ggfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSkgPT09IGhhc2gpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBIYXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIHRoZSBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIGhhc2ggbmF2aWdhdGlvblxyXG5cdFx0JCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLFxyXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKSxcclxuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMuX2hhc2hlc1toYXNoXSAmJiBpdGVtcy5pbmRleCh0aGlzLl9oYXNoZXNbaGFzaF0pO1xyXG5cclxuXHRcdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9jb3JlLnRvKHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pLCBmYWxzZSwgdHJ1ZSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRIYXNoLkRlZmF1bHRzID0ge1xyXG5cdFx0VVJMaGFzaExpc3RlbmVyOiBmYWxzZVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEhhc2gucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHQkKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJyk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkhhc2ggPSBIYXNoO1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnQgUGx1Z2luXHJcbiAqXHJcbiAqIEB2ZXJzaW9uIDIuMy40XHJcbiAqIEBhdXRob3IgVml2aWQgUGxhbmV0IFNvZnR3YXJlIEdtYkhcclxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdHZhciBzdHlsZSA9ICQoJzxzdXBwb3J0PicpLmdldCgwKS5zdHlsZSxcclxuXHRcdHByZWZpeGVzID0gJ1dlYmtpdCBNb3ogTyBtcycuc3BsaXQoJyAnKSxcclxuXHRcdGV2ZW50cyA9IHtcclxuXHRcdFx0dHJhbnNpdGlvbjoge1xyXG5cdFx0XHRcdGVuZDoge1xyXG5cdFx0XHRcdFx0V2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxyXG5cdFx0XHRcdFx0TW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxyXG5cdFx0XHRcdFx0T1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGFuaW1hdGlvbjoge1xyXG5cdFx0XHRcdGVuZDoge1xyXG5cdFx0XHRcdFx0V2Via2l0QW5pbWF0aW9uOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcclxuXHRcdFx0XHRcdE1vekFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXHJcblx0XHRcdFx0XHRPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXHJcblx0XHRcdFx0XHRhbmltYXRpb246ICdhbmltYXRpb25lbmQnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0dGVzdHMgPSB7XHJcblx0XHRcdGNzc3RyYW5zZm9ybXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ3RyYW5zZm9ybScpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjc3N0cmFuc2Zvcm1zM2Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ3BlcnNwZWN0aXZlJyk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGNzc3RyYW5zaXRpb25zOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCd0cmFuc2l0aW9uJyk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGNzc2FuaW1hdGlvbnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ2FuaW1hdGlvbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRmdW5jdGlvbiB0ZXN0KHByb3BlcnR5LCBwcmVmaXhlZCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IGZhbHNlLFxyXG5cdFx0XHR1cHBlciA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XHJcblxyXG5cdFx0JC5lYWNoKChwcm9wZXJ0eSArICcgJyArIHByZWZpeGVzLmpvaW4odXBwZXIgKyAnICcpICsgdXBwZXIpLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGksIHByb3BlcnR5KSB7XHJcblx0XHRcdGlmIChzdHlsZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJlc3VsdCA9IHByZWZpeGVkID8gcHJvcGVydHkgOiB0cnVlO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZWZpeGVkKHByb3BlcnR5KSB7XHJcblx0XHRyZXR1cm4gdGVzdChwcm9wZXJ0eSwgdHJ1ZSk7XHJcblx0fVxyXG5cclxuXHRpZiAodGVzdHMuY3NzdHJhbnNpdGlvbnMoKSkge1xyXG5cdFx0LyoganNoaW50IC1XMDUzICovXHJcblx0XHQkLnN1cHBvcnQudHJhbnNpdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zaXRpb24nKSlcclxuXHRcdCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCA9IGV2ZW50cy50cmFuc2l0aW9uLmVuZFsgJC5zdXBwb3J0LnRyYW5zaXRpb24gXTtcclxuXHR9XHJcblxyXG5cdGlmICh0ZXN0cy5jc3NhbmltYXRpb25zKCkpIHtcclxuXHRcdC8qIGpzaGludCAtVzA1MyAqL1xyXG5cdFx0JC5zdXBwb3J0LmFuaW1hdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ2FuaW1hdGlvbicpKVxyXG5cdFx0JC5zdXBwb3J0LmFuaW1hdGlvbi5lbmQgPSBldmVudHMuYW5pbWF0aW9uLmVuZFsgJC5zdXBwb3J0LmFuaW1hdGlvbiBdO1xyXG5cdH1cclxuXHJcblx0aWYgKHRlc3RzLmNzc3RyYW5zZm9ybXMoKSkge1xyXG5cdFx0LyoganNoaW50IC1XMDUzICovXHJcblx0XHQkLnN1cHBvcnQudHJhbnNmb3JtID0gbmV3IFN0cmluZyhwcmVmaXhlZCgndHJhbnNmb3JtJykpO1xyXG5cdFx0JC5zdXBwb3J0LnRyYW5zZm9ybTNkID0gdGVzdHMuY3NzdHJhbnNmb3JtczNkKCk7XHJcblx0fVxyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG4iLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuOC4wXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uQ2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXG4gICAgICAgICAgICAvLyBFeHRyYWN0ZWQgZnJvbSBqUXVlcnkgdjEuMTEgc291cmNlXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xuXG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU2xpY2s7XG5cbiAgICB9KCkpO1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24obWFya3VwLCBpbmRleCwgYWRkQmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAtdGFyZ2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBNYXRoLmNlaWwobm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKDBweCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZUYXJnZXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8ub3B0aW9ucy5hc05hdkZvcjtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5nZXROYXZUYXJnZXQoKTtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICE9PSBudWxsICYmIHR5cGVvZiBhc05hdkZvciA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5VGltZXIgPSBzZXRJbnRlcnZhbCggXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgaWYgKCAhXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggXy5kaXJlY3Rpb24gPT09IDEgJiYgKCBfLmN1cnJlbnRTbGlkZSArIDEgKSA9PT0gKCBfLnNsaWRlQ291bnQgLSAxICkpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfLmN1cnJlbnRTbGlkZSAtIDEgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXG5cbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIGRvdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgICAgICBkb3QgPSAkKCc8dWwgLz4nKS5hZGRDbGFzcyhfLm9wdGlvbnMuZG90c0NsYXNzKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdC5hcHBlbmQoJCgnPGxpIC8+JykuYXBwZW5kKF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRkb3RzID0gZG90LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcblxuICAgICAgICAgICAgXy4kZG90cy5maW5kKCdsaScpLmZpcnN0KCkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLnNob3VsZENsaWNrID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLmRldGFjaCgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JylcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kbGlzdC5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICBfLnVuc2xpY2tlZCA9IHRydWU7XG5cbiAgICAgICAgaWYoIXJlZnJlc2gpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdkZXN0cm95JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoZmlsdGVyICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmZpbHRlcihmaWx0ZXIpLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpXG4gICAgICAgICAgICAub24oJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snLCAnKicsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICRzZiA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb2N1c3NlZCA9ICRzZi5pcygnOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZighXy5vcHRpb25zLmFzTmF2Rm9yKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IDEgKyBNYXRoLmNlaWwoKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VyUXR5IC0gMTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgdmVydGljYWxIZWlnaHQsXG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDAsXG4gICAgICAgICAgICB0YXJnZXRTbGlkZSxcbiAgICAgICAgICAgIGNvZWY7XG5cbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICAgICAgY29lZiA9IC0xXG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTEuNTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICh2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogY29lZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSAvIDIpIC0gKChfLnNsaWRlV2lkdGggKiBfLnNsaWRlQ291bnQpIC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIC0gXy5zbGlkZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xKSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgPyBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLXNsaWRlJykuZWFjaChmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHBhcnNlSW50KHNsaWRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjcmVhdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuXG4gICAgICAgICAgICAkKF8uJHNsaWRlcikuYWRkQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XG4gICAgICAgICAgICBfLmJ1aWxkT3V0KCk7XG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xuICAgICAgICAgICAgXy5sb2FkU2xpZGVyKCk7XG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xuICAgICAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWF0aW9uKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICAgICBudW1Eb3RHcm91cHMgPSBNYXRoLmNlaWwoXy5zbGlkZUNvdW50IC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyksXG4gICAgICAgICAgICAgICAgdGFiQ29udHJvbEluZGV4ZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKS5maWx0ZXIoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsID49IDApICYmICh2YWwgPCBfLnNsaWRlQ291bnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUNvbnRyb2xJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzLmluZGV4T2YoaSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChzbGlkZUNvbnRyb2xJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgYXJpYUJ1dHRvbkNvbnRyb2wgPSAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgc2xpZGVDb250cm9sSW5kZXhcbiAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBhcmlhQnV0dG9uQ29udHJvbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYUJ1dHRvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXBwZWRTbGlkZUluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXNbaV07XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2J1dHRvbicpLmZpcnN0KCkuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgbWFwcGVkU2xpZGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAoaSArIDEpICsgJyBvZiAnICsgbnVtRG90R3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSkuZXEoXy5jdXJyZW50U2xpZGUpLmZpbmQoJ2J1dHRvbicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICAgICAgfSkuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpPV8uY3VycmVudFNsaWRlLCBtYXg9aStfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5hdHRyKHsndGFiaW5kZXgnOiAnMCd9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnBhdXNlT25Ib3ZlciApIHtcblxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oXy52aXNpYmlsaXR5Q2hhbmdlLCAkLnByb3h5KF8udmlzaWJpbGl0eSwgXykpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5yZXNpemUsIF8pKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0VUkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuc2hvdygpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5rZXlIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgICAvL0RvbnQgc2xpZGUgaWYgdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGZvcm0gZmllbGRzIGFuZCBhcnJvdyBrZXlzIGFyZSBwcmVzc2VkXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNyAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ25leHQnIDogICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpIHtcblxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3Jjc2V0JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTAwLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgMjAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8uY3VycmVudFNsaWRlICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSByYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBNYXRoLm1heCgwLCBfLmN1cnJlbnRTbGlkZSAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IDIgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSArIF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBfLmN1cnJlbnRTbGlkZSA6IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgcmFuZ2VFbmQgPSBNYXRoLmNlaWwocmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPiAwKSByYW5nZVN0YXJ0LS07XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kIDw9IF8uc2xpZGVDb3VudCkgcmFuZ2VFbmQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5zbGljZShyYW5nZVN0YXJ0LCByYW5nZUVuZCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgdmFyIHByZXZTbGlkZSA9IHJhbmdlU3RhcnQgLSAxLFxuICAgICAgICAgICAgICAgIG5leHRTbGlkZSA9IHJhbmdlRW5kLFxuICAgICAgICAgICAgICAgICRzbGlkZXMgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldlNsaWRlIDwgMCkgcHJldlNsaWRlID0gXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEocHJldlNsaWRlKSk7XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKG5leHRTbGlkZSkpO1xuICAgICAgICAgICAgICAgIHByZXZTbGlkZS0tO1xuICAgICAgICAgICAgICAgIG5leHRTbGlkZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5pbml0QURBKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkKF8uJHNsaWRlcy5nZXQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hdHRyKCd0YWJpbmRleCcsIDApLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VTcmNTZXQsXG4gICAgICAgICAgICBpbWFnZVNpemVzLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzICA9IGltYWdlLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHZhciBldmVuQ29lZiA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJSAyID09PSAwID8gMSA6IDA7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAtIGNlbnRlck9mZnNldCArIGV2ZW5Db2VmLCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSArIGV2ZW5Db2VmLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJyB8fCBfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsIGFuaW1TbGlkZSwgb2xkU2xpZGUsIHNsaWRlTGVmdCwgdGFyZ2V0TGVmdCA9IG51bGwsXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xuXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMud2FpdEZvckFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLnN3aXBpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXMsIHZlcnRpY2FsU3dpcGVMZW5ndGg7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IF8uc2Nyb2xsaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcblxuICAgICAgICBpZiAoIV8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgJiYgIV8uc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zd2lwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbk9mZnNldCA9IChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAoXy50b3VjaE9iamVjdC5jdXJYID4gXy50b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogXy5vcHRpb25zLmVkZ2VGcmljdGlvbjtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJlxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iXX0=
